//==========================================================================
// This file has been automatically generated for C++ Standalone by
// MadGraph 5 v. 1.5.7, 2013-01-15
// By the MadGraph Development Team
// Please visit us at https://launchpad.net/madgraph5
//==========================================================================

#include "HelAmps_HEF_MEKD.h"
#include <cstdlib>
#include <iostream>

using namespace std;

namespace MG5_HEF_MEKD
{

void VVT13_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
             double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP2;
    complex<double> TMP1;
    double P1[4];
    complex<double> TMP22;
    double P2[4];
    complex<double> TMP23;
    double P3[4];
    complex<double> TMP21;
    complex<double> denom;
    double OM1;
    complex<double> TMP28;
    complex<double> TMP27;
    complex<double> TMP65;
    complex<double> TMP68;
    complex<double> TMP69;
    OM1 = 0.;
    if (M1 != 0.)
        OM1 = 1. / pow(M1, 2);
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    P3[0] = T3[0].real();
    P3[1] = T3[1].real();
    P3[2] = T3[1].imag();
    P3[3] = T3[0].imag();
    V1[0] = +V2[0] + T3[0];
    V1[1] = +V2[1] + T3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP68 =
        (P1[0] * -1. *
             (V2[3] * T3[6] + V2[4] * T3[10] + V2[5] * T3[14] - V2[2] * T3[2]) +
         (P1[1] * (V2[3] * T3[7] + V2[4] * T3[11] + V2[5] * T3[15] -
                   V2[2] * T3[3]) +
          (P1[2] * (V2[3] * T3[8] + V2[4] * T3[12] + V2[5] * T3[16] -
                    V2[2] * T3[4]) +
           P1[3] * (V2[3] * T3[9] + V2[4] * T3[13] + V2[5] * T3[17] -
                    V2[2] * T3[5]))));
    TMP69 =
        (P1[0] * -1. *
             (V2[3] * T3[3] + V2[4] * T3[4] + V2[5] * T3[5] - V2[2] * T3[2]) +
         (P1[1] *
              (V2[3] * T3[7] + V2[4] * T3[8] + V2[5] * T3[9] - V2[2] * T3[6]) +
          (P1[2] * (V2[3] * T3[11] + V2[4] * T3[12] + V2[5] * T3[13] -
                    V2[2] * T3[10]) +
           P1[3] * (V2[3] * T3[15] + V2[4] * T3[16] + V2[5] * T3[17] -
                    V2[2] * T3[14]))));
    TMP27 =
        (P1[0] * -1. *
             (V2[3] * T3[6] + V2[4] * T3[10] + V2[5] * T3[14] - V2[2] * T3[2]) +
         (P1[1] * (V2[3] * T3[7] + V2[4] * T3[11] + V2[5] * T3[15] -
                   V2[2] * T3[3]) +
          (P1[2] * (V2[3] * T3[8] + V2[4] * T3[12] + V2[5] * T3[16] -
                    V2[2] * T3[4]) +
           P1[3] * (V2[3] * T3[9] + V2[4] * T3[13] + V2[5] * T3[17] -
                    V2[2] * T3[5]))));
    TMP21 =
        (P1[0] * -1. *
             (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] - P2[0] * T3[2]) +
         (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] * T3[15] -
                   P2[0] * T3[3]) +
          (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] + P2[3] * T3[16] -
                    P2[0] * T3[4]) +
           P1[3] * (P2[1] * T3[9] + P2[2] * T3[13] + P2[3] * T3[17] -
                    P2[0] * T3[5]))));
    TMP22 =
        (P1[0] * -1. *
             (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] - P2[0] * T3[2]) +
         (P1[1] *
              (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9] - P2[0] * T3[6]) +
          (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] * T3[13] -
                    P2[0] * T3[10]) +
           P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] + P2[3] * T3[17] -
                    P2[0] * T3[14]))));
    TMP23 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]);
    TMP28 =
        (P1[0] * -1. *
             (V2[3] * T3[3] + V2[4] * T3[4] + V2[5] * T3[5] - V2[2] * T3[2]) +
         (P1[1] *
              (V2[3] * T3[7] + V2[4] * T3[8] + V2[5] * T3[9] - V2[2] * T3[6]) +
          (P1[2] * (V2[3] * T3[11] + V2[4] * T3[12] + V2[5] * T3[13] -
                    V2[2] * T3[10]) +
           P1[3] * (V2[3] * T3[15] + V2[4] * T3[16] + V2[5] * T3[17] -
                    V2[2] * T3[14]))));
    TMP65 =
        (P1[0] * -1. *
             (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] - P2[0] * T3[2]) +
         (P1[1] *
              (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9] - P2[0] * T3[6]) +
          (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] * T3[13] -
                    P2[0] * T3[10]) +
           P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] + P2[3] * T3[17] -
                    P2[0] * T3[14]))));
    TMP1 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    TMP2 = (P3[0] * P2[0] - P3[1] * P2[1] - P3[2] * P2[2] - P3[3] * P2[3]);
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] =
        denom *
        (TMP1 * (TMP2 * (OM1 * P1[0] *
                             (-cI * (TMP27 + TMP28) + cI * (TMP68 + TMP69)) +
                         (V2[3] * (+cI * (T3[6] + T3[3])) +
                          (V2[4] * (+cI * (T3[10] + T3[4])) +
                           (V2[5] * (+cI * (T3[14] + T3[5])) -
                            2. * cI * (V2[2] * T3[2]))))) +
                 TMP23 * (OM1 * P1[0] * (-cI * (TMP65) + cI * (TMP22)) +
                          (P2[1] * -1. * (+cI * (T3[3] + T3[6])) +
                           (P2[2] * -1. * (+cI * (T3[4] + T3[10])) +
                            (P2[3] * -1. * (+cI * (T3[5] + T3[14])) +
                             2. * cI * (P2[0] * T3[2])))))) +
         P3[0] * (TMP2 * (+cI * (TMP27 + TMP28)) -
                  TMP23 * (+cI * (TMP21 + TMP22))));
    V1[3] =
        denom *
        (TMP1 * (TMP2 * (OM1 * P1[1] *
                             (-cI * (TMP27 + TMP28) + cI * (TMP68 + TMP69)) +
                         (V2[2] * -1. * (+cI * (T3[3] + T3[6])) +
                          (V2[4] * (+cI * (T3[11] + T3[8])) +
                           (V2[5] * (+cI * (T3[15] + T3[9])) +
                            2. * cI * (V2[3] * T3[7]))))) +
                 TMP23 * (OM1 * P1[1] * (-cI * (TMP65) + cI * (TMP22)) +
                          (P2[0] * (+cI * (T3[6] + T3[3])) +
                           (P2[2] * -1. * (+cI * (T3[8] + T3[11])) +
                            (P2[3] * -1. * (+cI * (T3[9] + T3[15])) -
                             2. * cI * (P2[1] * T3[7])))))) +
         P3[1] * (TMP2 * (+cI * (TMP27 + TMP28)) -
                  TMP23 * (+cI * (TMP21 + TMP22))));
    V1[4] =
        denom *
        (TMP1 * (TMP2 * (OM1 * P1[2] *
                             (-cI * (TMP27 + TMP28) + cI * (TMP68 + TMP69)) +
                         (V2[2] * -1. * (+cI * (T3[4] + T3[10])) +
                          (V2[3] * (+cI * (T3[8] + T3[11])) +
                           (V2[5] * (+cI * (T3[16] + T3[13])) +
                            2. * cI * (V2[4] * T3[12]))))) +
                 TMP23 * (OM1 * P1[2] * (-cI * (TMP65) + cI * (TMP22)) +
                          (P2[0] * (+cI * (T3[10] + T3[4])) +
                           (P2[1] * -1. * (+cI * (T3[11] + T3[8])) +
                            (P2[3] * -1. * (+cI * (T3[13] + T3[16])) -
                             2. * cI * (P2[2] * T3[12])))))) +
         P3[2] * (TMP2 * (+cI * (TMP27 + TMP28)) -
                  TMP23 * (+cI * (TMP21 + TMP22))));
    V1[5] =
        denom *
        (TMP1 * (TMP2 * (OM1 * P1[3] *
                             (-cI * (TMP27 + TMP28) + cI * (TMP68 + TMP69)) +
                         (V2[2] * -1. * (+cI * (T3[5] + T3[14])) +
                          (V2[3] * (+cI * (T3[9] + T3[15])) +
                           (V2[4] * (+cI * (T3[13] + T3[16])) +
                            2. * cI * (V2[5] * T3[17]))))) +
                 TMP23 * (OM1 * P1[3] * (-cI * (TMP65) + cI * (TMP22)) +
                          (P2[0] * (+cI * (T3[14] + T3[5])) +
                           (P2[1] * -1. * (+cI * (T3[15] + T3[9])) +
                            (P2[2] * -1. * (+cI * (T3[16] + T3[13])) -
                             2. * cI * (P2[3] * T3[17])))))) +
         P3[3] * (TMP2 * (+cI * (TMP27 + TMP28)) -
                  TMP23 * (+cI * (TMP21 + TMP22))));
}

void VVT6_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
            double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP59;
    complex<double> TMP61;
    complex<double> TMP1;
    double P1[4];
    complex<double> TMP57;
    double P2[4];
    complex<double> TMP23;
    double P3[4];
    complex<double> TMP66;
    complex<double> denom;
    complex<double> TMP67;
    double OM1;
    complex<double> TMP63;
    OM1 = 0.;
    if (M1 != 0.)
        OM1 = 1. / pow(M1, 2);
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    P3[0] = T3[0].real();
    P3[1] = T3[1].real();
    P3[2] = T3[1].imag();
    P3[3] = T3[0].imag();
    V1[0] = +V2[0] + T3[0];
    V1[1] = +V2[1] + T3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP57 =
        -1. *
        (P1[0] * (P2[0] * (P3[1] * (V2[4] * T3[5] - V2[5] * T3[4]) +
                           (P3[2] * (V2[5] * T3[3] - V2[3] * T3[5]) +
                            P3[3] * (V2[3] * T3[4] - V2[4] * T3[3]))) +
                  (P2[1] * (P3[0] * (V2[5] * T3[4] - V2[4] * T3[5]) +
                            (P3[2] * (V2[2] * T3[5] - V2[5] * T3[2]) +
                             P3[3] * (V2[4] * T3[2] - V2[2] * T3[4]))) +
                   (P2[2] * (P3[0] * (V2[3] * T3[5] - V2[5] * T3[3]) +
                             (P3[1] * (V2[5] * T3[2] - V2[2] * T3[5]) +
                              P3[3] * (V2[2] * T3[3] - V2[3] * T3[2]))) +
                    P2[3] * (P3[0] * (V2[4] * T3[3] - V2[3] * T3[4]) +
                             (P3[1] * (V2[2] * T3[4] - V2[4] * T3[2]) +
                              P3[2] * (V2[3] * T3[2] - V2[2] * T3[3])))))) +
         (P1[1] * (P2[0] * (P3[1] * (V2[5] * T3[8] - V2[4] * T3[9]) +
                            (P3[2] * (V2[3] * T3[9] - V2[5] * T3[7]) +
                             P3[3] * (V2[4] * T3[7] - V2[3] * T3[8]))) +
                   (P2[1] * (P3[0] * (V2[4] * T3[9] - V2[5] * T3[8]) +
                             (P3[2] * (V2[5] * T3[6] - V2[2] * T3[9]) +
                              P3[3] * (V2[2] * T3[8] - V2[4] * T3[6]))) +
                    (P2[2] * (P3[0] * (V2[5] * T3[7] - V2[3] * T3[9]) +
                              (P3[1] * (V2[2] * T3[9] - V2[5] * T3[6]) +
                               P3[3] * (V2[3] * T3[6] - V2[2] * T3[7]))) +
                     P2[3] * (P3[0] * (V2[3] * T3[8] - V2[4] * T3[7]) +
                              (P3[1] * (V2[4] * T3[6] - V2[2] * T3[8]) +
                               P3[2] * (V2[2] * T3[7] - V2[3] * T3[6])))))) +
          (P1[2] * (P2[0] * (P3[1] * (V2[5] * T3[12] - V2[4] * T3[13]) +
                             (P3[2] * (V2[3] * T3[13] - V2[5] * T3[11]) +
                              P3[3] * (V2[4] * T3[11] - V2[3] * T3[12]))) +
                    (P2[1] * (P3[0] * (V2[4] * T3[13] - V2[5] * T3[12]) +
                              (P3[2] * (V2[5] * T3[10] - V2[2] * T3[13]) +
                               P3[3] * (V2[2] * T3[12] - V2[4] * T3[10]))) +
                     (P2[2] * (P3[0] * (V2[5] * T3[11] - V2[3] * T3[13]) +
                               (P3[1] * (V2[2] * T3[13] - V2[5] * T3[10]) +
                                P3[3] * (V2[3] * T3[10] - V2[2] * T3[11]))) +
                      P2[3] * (P3[0] * (V2[3] * T3[12] - V2[4] * T3[11]) +
                               (P3[1] * (V2[4] * T3[10] - V2[2] * T3[12]) +
                                P3[2] * (V2[2] * T3[11] - V2[3] * T3[10])))))) +
           P1[3] *
               (P2[0] * (P3[1] * (V2[5] * T3[16] - V2[4] * T3[17]) +
                         (P3[2] * (V2[3] * T3[17] - V2[5] * T3[15]) +
                          P3[3] * (V2[4] * T3[15] - V2[3] * T3[16]))) +
                (P2[1] * (P3[0] * (V2[4] * T3[17] - V2[5] * T3[16]) +
                          (P3[2] * (V2[5] * T3[14] - V2[2] * T3[17]) +
                           P3[3] * (V2[2] * T3[16] - V2[4] * T3[14]))) +
                 (P2[2] * (P3[0] * (V2[5] * T3[15] - V2[3] * T3[17]) +
                           (P3[1] * (V2[2] * T3[17] - V2[5] * T3[14]) +
                            P3[3] * (V2[3] * T3[14] - V2[2] * T3[15]))) +
                  P2[3] * (P3[0] * (V2[3] * T3[16] - V2[4] * T3[15]) +
                           (P3[1] * (V2[4] * T3[14] - V2[2] * T3[16]) +
                            P3[2] * (V2[2] * T3[15] - V2[3] * T3[14])))))))));
    TMP23 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]);
    TMP59 =
        -1. *
        (P2[0] * (P1[0] * (P3[1] * (V2[4] * T3[5] - V2[5] * T3[4]) +
                           (P3[2] * (V2[5] * T3[3] - V2[3] * T3[5]) +
                            P3[3] * (V2[3] * T3[4] - V2[4] * T3[3]))) +
                  (P1[1] * (P3[0] * (V2[5] * T3[4] - V2[4] * T3[5]) +
                            (P3[2] * (V2[2] * T3[5] - V2[5] * T3[2]) +
                             P3[3] * (V2[4] * T3[2] - V2[2] * T3[4]))) +
                   (P1[2] * (P3[0] * (V2[3] * T3[5] - V2[5] * T3[3]) +
                             (P3[1] * (V2[5] * T3[2] - V2[2] * T3[5]) +
                              P3[3] * (V2[2] * T3[3] - V2[3] * T3[2]))) +
                    P1[3] * (P3[0] * (V2[4] * T3[3] - V2[3] * T3[4]) +
                             (P3[1] * (V2[2] * T3[4] - V2[4] * T3[2]) +
                              P3[2] * (V2[3] * T3[2] - V2[2] * T3[3])))))) +
         (P2[1] * (P1[0] * (P3[1] * (V2[5] * T3[8] - V2[4] * T3[9]) +
                            (P3[2] * (V2[3] * T3[9] - V2[5] * T3[7]) +
                             P3[3] * (V2[4] * T3[7] - V2[3] * T3[8]))) +
                   (P1[1] * (P3[0] * (V2[4] * T3[9] - V2[5] * T3[8]) +
                             (P3[2] * (V2[5] * T3[6] - V2[2] * T3[9]) +
                              P3[3] * (V2[2] * T3[8] - V2[4] * T3[6]))) +
                    (P1[2] * (P3[0] * (V2[5] * T3[7] - V2[3] * T3[9]) +
                              (P3[1] * (V2[2] * T3[9] - V2[5] * T3[6]) +
                               P3[3] * (V2[3] * T3[6] - V2[2] * T3[7]))) +
                     P1[3] * (P3[0] * (V2[3] * T3[8] - V2[4] * T3[7]) +
                              (P3[1] * (V2[4] * T3[6] - V2[2] * T3[8]) +
                               P3[2] * (V2[2] * T3[7] - V2[3] * T3[6])))))) +
          (P2[2] * (P1[0] * (P3[1] * (V2[5] * T3[12] - V2[4] * T3[13]) +
                             (P3[2] * (V2[3] * T3[13] - V2[5] * T3[11]) +
                              P3[3] * (V2[4] * T3[11] - V2[3] * T3[12]))) +
                    (P1[1] * (P3[0] * (V2[4] * T3[13] - V2[5] * T3[12]) +
                              (P3[2] * (V2[5] * T3[10] - V2[2] * T3[13]) +
                               P3[3] * (V2[2] * T3[12] - V2[4] * T3[10]))) +
                     (P1[2] * (P3[0] * (V2[5] * T3[11] - V2[3] * T3[13]) +
                               (P3[1] * (V2[2] * T3[13] - V2[5] * T3[10]) +
                                P3[3] * (V2[3] * T3[10] - V2[2] * T3[11]))) +
                      P1[3] * (P3[0] * (V2[3] * T3[12] - V2[4] * T3[11]) +
                               (P3[1] * (V2[4] * T3[10] - V2[2] * T3[12]) +
                                P3[2] * (V2[2] * T3[11] - V2[3] * T3[10])))))) +
           P2[3] *
               (P1[0] * (P3[1] * (V2[5] * T3[16] - V2[4] * T3[17]) +
                         (P3[2] * (V2[3] * T3[17] - V2[5] * T3[15]) +
                          P3[3] * (V2[4] * T3[15] - V2[3] * T3[16]))) +
                (P1[1] * (P3[0] * (V2[4] * T3[17] - V2[5] * T3[16]) +
                          (P3[2] * (V2[5] * T3[14] - V2[2] * T3[17]) +
                           P3[3] * (V2[2] * T3[16] - V2[4] * T3[14]))) +
                 (P1[2] * (P3[0] * (V2[5] * T3[15] - V2[3] * T3[17]) +
                           (P3[1] * (V2[2] * T3[17] - V2[5] * T3[14]) +
                            P3[3] * (V2[3] * T3[14] - V2[2] * T3[15]))) +
                  P1[3] * (P3[0] * (V2[3] * T3[16] - V2[4] * T3[15]) +
                           (P3[1] * (V2[4] * T3[14] - V2[2] * T3[16]) +
                            P3[2] * (V2[2] * T3[15] - V2[3] * T3[14])))))))));
    TMP61 =
        -1. *
        (P1[0] * (P2[0] * (P3[1] * (V2[4] * T3[14] - V2[5] * T3[10]) +
                           (P3[2] * (V2[5] * T3[6] - V2[3] * T3[14]) +
                            P3[3] * (V2[3] * T3[10] - V2[4] * T3[6]))) +
                  (P2[1] * (P3[0] * (V2[5] * T3[10] - V2[4] * T3[14]) +
                            (P3[2] * (V2[2] * T3[14] - V2[5] * T3[2]) +
                             P3[3] * (V2[4] * T3[2] - V2[2] * T3[10]))) +
                   (P2[2] * (P3[0] * (V2[3] * T3[14] - V2[5] * T3[6]) +
                             (P3[1] * (V2[5] * T3[2] - V2[2] * T3[14]) +
                              P3[3] * (V2[2] * T3[6] - V2[3] * T3[2]))) +
                    P2[3] * (P3[0] * (V2[4] * T3[6] - V2[3] * T3[10]) +
                             (P3[1] * (V2[2] * T3[10] - V2[4] * T3[2]) +
                              P3[2] * (V2[3] * T3[2] - V2[2] * T3[6])))))) +
         (P1[1] * (P2[0] * (P3[1] * (V2[5] * T3[11] - V2[4] * T3[15]) +
                            (P3[2] * (V2[3] * T3[15] - V2[5] * T3[7]) +
                             P3[3] * (V2[4] * T3[7] - V2[3] * T3[11]))) +
                   (P2[1] * (P3[0] * (V2[4] * T3[15] - V2[5] * T3[11]) +
                             (P3[2] * (V2[5] * T3[3] - V2[2] * T3[15]) +
                              P3[3] * (V2[2] * T3[11] - V2[4] * T3[3]))) +
                    (P2[2] * (P3[0] * (V2[5] * T3[7] - V2[3] * T3[15]) +
                              (P3[1] * (V2[2] * T3[15] - V2[5] * T3[3]) +
                               P3[3] * (V2[3] * T3[3] - V2[2] * T3[7]))) +
                     P2[3] * (P3[0] * (V2[3] * T3[11] - V2[4] * T3[7]) +
                              (P3[1] * (V2[4] * T3[3] - V2[2] * T3[11]) +
                               P3[2] * (V2[2] * T3[7] - V2[3] * T3[3])))))) +
          (P1[2] * (P2[0] * (P3[1] * (V2[5] * T3[12] - V2[4] * T3[16]) +
                             (P3[2] * (V2[3] * T3[16] - V2[5] * T3[8]) +
                              P3[3] * (V2[4] * T3[8] - V2[3] * T3[12]))) +
                    (P2[1] * (P3[0] * (V2[4] * T3[16] - V2[5] * T3[12]) +
                              (P3[2] * (V2[5] * T3[4] - V2[2] * T3[16]) +
                               P3[3] * (V2[2] * T3[12] - V2[4] * T3[4]))) +
                     (P2[2] * (P3[0] * (V2[5] * T3[8] - V2[3] * T3[16]) +
                               (P3[1] * (V2[2] * T3[16] - V2[5] * T3[4]) +
                                P3[3] * (V2[3] * T3[4] - V2[2] * T3[8]))) +
                      P2[3] * (P3[0] * (V2[3] * T3[12] - V2[4] * T3[8]) +
                               (P3[1] * (V2[4] * T3[4] - V2[2] * T3[12]) +
                                P3[2] * (V2[2] * T3[8] - V2[3] * T3[4])))))) +
           P1[3] * (P2[0] * (P3[1] * (V2[5] * T3[13] - V2[4] * T3[17]) +
                             (P3[2] * (V2[3] * T3[17] - V2[5] * T3[9]) +
                              P3[3] * (V2[4] * T3[9] - V2[3] * T3[13]))) +
                    (P2[1] * (P3[0] * (V2[4] * T3[17] - V2[5] * T3[13]) +
                              (P3[2] * (V2[5] * T3[5] - V2[2] * T3[17]) +
                               P3[3] * (V2[2] * T3[13] - V2[4] * T3[5]))) +
                     (P2[2] * (P3[0] * (V2[5] * T3[9] - V2[3] * T3[17]) +
                               (P3[1] * (V2[2] * T3[17] - V2[5] * T3[5]) +
                                P3[3] * (V2[3] * T3[5] - V2[2] * T3[9]))) +
                      P2[3] * (P3[0] * (V2[3] * T3[13] - V2[4] * T3[9]) +
                               (P3[1] * (V2[4] * T3[5] - V2[2] * T3[13]) +
                                P3[2] * (V2[2] * T3[9] - V2[3] * T3[5])))))))));
    TMP63 =
        -1. *
        (P2[0] * (P1[0] * (P3[1] * (V2[4] * T3[14] - V2[5] * T3[10]) +
                           (P3[2] * (V2[5] * T3[6] - V2[3] * T3[14]) +
                            P3[3] * (V2[3] * T3[10] - V2[4] * T3[6]))) +
                  (P1[1] * (P3[0] * (V2[5] * T3[10] - V2[4] * T3[14]) +
                            (P3[2] * (V2[2] * T3[14] - V2[5] * T3[2]) +
                             P3[3] * (V2[4] * T3[2] - V2[2] * T3[10]))) +
                   (P1[2] * (P3[0] * (V2[3] * T3[14] - V2[5] * T3[6]) +
                             (P3[1] * (V2[5] * T3[2] - V2[2] * T3[14]) +
                              P3[3] * (V2[2] * T3[6] - V2[3] * T3[2]))) +
                    P1[3] * (P3[0] * (V2[4] * T3[6] - V2[3] * T3[10]) +
                             (P3[1] * (V2[2] * T3[10] - V2[4] * T3[2]) +
                              P3[2] * (V2[3] * T3[2] - V2[2] * T3[6])))))) +
         (P2[1] * (P1[0] * (P3[1] * (V2[5] * T3[11] - V2[4] * T3[15]) +
                            (P3[2] * (V2[3] * T3[15] - V2[5] * T3[7]) +
                             P3[3] * (V2[4] * T3[7] - V2[3] * T3[11]))) +
                   (P1[1] * (P3[0] * (V2[4] * T3[15] - V2[5] * T3[11]) +
                             (P3[2] * (V2[5] * T3[3] - V2[2] * T3[15]) +
                              P3[3] * (V2[2] * T3[11] - V2[4] * T3[3]))) +
                    (P1[2] * (P3[0] * (V2[5] * T3[7] - V2[3] * T3[15]) +
                              (P3[1] * (V2[2] * T3[15] - V2[5] * T3[3]) +
                               P3[3] * (V2[3] * T3[3] - V2[2] * T3[7]))) +
                     P1[3] * (P3[0] * (V2[3] * T3[11] - V2[4] * T3[7]) +
                              (P3[1] * (V2[4] * T3[3] - V2[2] * T3[11]) +
                               P3[2] * (V2[2] * T3[7] - V2[3] * T3[3])))))) +
          (P2[2] * (P1[0] * (P3[1] * (V2[5] * T3[12] - V2[4] * T3[16]) +
                             (P3[2] * (V2[3] * T3[16] - V2[5] * T3[8]) +
                              P3[3] * (V2[4] * T3[8] - V2[3] * T3[12]))) +
                    (P1[1] * (P3[0] * (V2[4] * T3[16] - V2[5] * T3[12]) +
                              (P3[2] * (V2[5] * T3[4] - V2[2] * T3[16]) +
                               P3[3] * (V2[2] * T3[12] - V2[4] * T3[4]))) +
                     (P1[2] * (P3[0] * (V2[5] * T3[8] - V2[3] * T3[16]) +
                               (P3[1] * (V2[2] * T3[16] - V2[5] * T3[4]) +
                                P3[3] * (V2[3] * T3[4] - V2[2] * T3[8]))) +
                      P1[3] * (P3[0] * (V2[3] * T3[12] - V2[4] * T3[8]) +
                               (P3[1] * (V2[4] * T3[4] - V2[2] * T3[12]) +
                                P3[2] * (V2[2] * T3[8] - V2[3] * T3[4])))))) +
           P2[3] * (P1[0] * (P3[1] * (V2[5] * T3[13] - V2[4] * T3[17]) +
                             (P3[2] * (V2[3] * T3[17] - V2[5] * T3[9]) +
                              P3[3] * (V2[4] * T3[9] - V2[3] * T3[13]))) +
                    (P1[1] * (P3[0] * (V2[4] * T3[17] - V2[5] * T3[13]) +
                              (P3[2] * (V2[5] * T3[5] - V2[2] * T3[17]) +
                               P3[3] * (V2[2] * T3[13] - V2[4] * T3[5]))) +
                     (P1[2] * (P3[0] * (V2[5] * T3[9] - V2[3] * T3[17]) +
                               (P3[1] * (V2[2] * T3[17] - V2[5] * T3[5]) +
                                P3[3] * (V2[3] * T3[5] - V2[2] * T3[9]))) +
                      P1[3] * (P3[0] * (V2[3] * T3[13] - V2[4] * T3[9]) +
                               (P3[1] * (V2[4] * T3[5] - V2[2] * T3[13]) +
                                P3[2] * (V2[2] * T3[9] - V2[3] * T3[5])))))))));
    TMP66 =
        -1. *
        (P1[0] * (P1[1] * (P2[2] * (P3[3] * -1. * (T3[2] + T3[7]) +
                                    (P3[0] * T3[5] + P3[1] * T3[9])) +
                           (P2[3] * (P3[2] * (T3[2] + T3[7]) +
                                     (-P3[0] * T3[4] - P3[1] * T3[8])) +
                            (P2[0] * (P3[3] * T3[4] - P3[2] * T3[5]) +
                             P2[1] * (P3[3] * T3[8] - P3[2] * T3[9])))) +
                  (P1[2] * (P2[1] * (P3[3] * (T3[2] + T3[12]) +
                                     (-P3[0] * T3[5] - P3[2] * T3[13])) +
                            (P2[3] * (P3[1] * -1. * (T3[2] + T3[12]) +
                                      (P3[0] * T3[3] + P3[2] * T3[11])) +
                             (P2[0] * (P3[1] * T3[5] - P3[3] * T3[3]) +
                              P2[2] * (P3[1] * T3[13] - P3[3] * T3[11])))) +
                   (P1[3] * (P2[1] * (P3[2] * -1. * (T3[2] + T3[17]) +
                                      (P3[0] * T3[4] + P3[3] * T3[16])) +
                             (P2[2] * (P3[1] * (T3[2] + T3[17]) +
                                       (-P3[0] * T3[3] - P3[3] * T3[15])) +
                              (P2[0] * (P3[2] * T3[3] - P3[1] * T3[4]) +
                               P2[3] * (P3[2] * T3[15] - P3[1] * T3[16])))) +
                    P1[0] * (P2[1] * (P3[2] * T3[5] - P3[3] * T3[4]) +
                             (P2[2] * (P3[3] * T3[3] - P3[1] * T3[5]) +
                              P2[3] * (P3[1] * T3[4] - P3[2] * T3[3])))))) +
         (P1[1] * (P1[2] * (P2[0] * (P3[3] * (T3[7] - T3[12]) +
                                     (P3[2] * T3[13] - P3[1] * T3[9])) +
                            (P2[3] * (P3[0] * (T3[12] - T3[7]) +
                                      (P3[1] * T3[6] - P3[2] * T3[10])) +
                             (P2[1] * (P3[0] * T3[9] - P3[3] * T3[6]) +
                              P2[2] * (P3[3] * T3[10] - P3[0] * T3[13])))) +
                   (P1[3] * (P2[0] * (P3[2] * (T3[17] - T3[7]) +
                                      (P3[1] * T3[8] - P3[3] * T3[16])) +
                             (P2[2] * (P3[0] * (T3[7] - T3[17]) +
                                       (P3[3] * T3[14] - P3[1] * T3[6])) +
                              (P2[1] * (P3[2] * T3[6] - P3[0] * T3[8]) +
                               P2[3] * (P3[0] * T3[16] - P3[2] * T3[14])))) +
                    P1[1] * (P2[0] * (P3[2] * T3[9] - P3[3] * T3[8]) +
                             (P2[2] * (P3[3] * T3[6] - P3[0] * T3[9]) +
                              P2[3] * (P3[0] * T3[8] - P3[2] * T3[6]))))) +
          (P1[2] * (P1[3] * (P2[0] * (P3[1] * (T3[12] - T3[17]) +
                                      (P3[3] * T3[15] - P3[2] * T3[11])) +
                             (P2[1] * (P3[0] * (T3[17] - T3[12]) +
                                       (P3[2] * T3[10] - P3[3] * T3[14])) +
                              (P2[2] * (P3[0] * T3[11] - P3[1] * T3[10]) +
                               P2[3] * (P3[1] * T3[14] - P3[0] * T3[15])))) +
                    P1[2] * (P2[0] * (P3[3] * T3[11] - P3[1] * T3[13]) +
                             (P2[1] * (P3[0] * T3[13] - P3[3] * T3[10]) +
                              P2[3] * (P3[1] * T3[10] - P3[0] * T3[11])))) +
           P1[3] * P1[3] *
               (P2[0] * (P3[1] * T3[16] - P3[2] * T3[15]) +
                (P2[1] * (P3[2] * T3[14] - P3[0] * T3[16]) +
                 P2[2] * (P3[0] * T3[15] - P3[1] * T3[14]))))));
    TMP67 =
        -1. *
        (P1[0] * (P1[1] * (P2[2] * (P3[3] * -1. * (T3[2] + T3[7]) +
                                    (P3[0] * T3[14] + P3[1] * T3[15])) +
                           (P2[3] * (P3[2] * (T3[2] + T3[7]) +
                                     (-P3[0] * T3[10] - P3[1] * T3[11])) +
                            (P2[0] * (P3[3] * T3[10] - P3[2] * T3[14]) +
                             P2[1] * (P3[3] * T3[11] - P3[2] * T3[15])))) +
                  (P1[2] * (P2[1] * (P3[3] * (T3[2] + T3[12]) +
                                     (-P3[0] * T3[14] - P3[2] * T3[16])) +
                            (P2[3] * (P3[1] * -1. * (T3[2] + T3[12]) +
                                      (P3[0] * T3[6] + P3[2] * T3[8])) +
                             (P2[0] * (P3[1] * T3[14] - P3[3] * T3[6]) +
                              P2[2] * (P3[1] * T3[16] - P3[3] * T3[8])))) +
                   (P1[3] * (P2[1] * (P3[2] * -1. * (T3[2] + T3[17]) +
                                      (P3[0] * T3[10] + P3[3] * T3[13])) +
                             (P2[2] * (P3[1] * (T3[2] + T3[17]) +
                                       (-P3[0] * T3[6] - P3[3] * T3[9])) +
                              (P2[0] * (P3[2] * T3[6] - P3[1] * T3[10]) +
                               P2[3] * (P3[2] * T3[9] - P3[1] * T3[13])))) +
                    P1[0] * (P2[1] * (P3[2] * T3[14] - P3[3] * T3[10]) +
                             (P2[2] * (P3[3] * T3[6] - P3[1] * T3[14]) +
                              P2[3] * (P3[1] * T3[10] - P3[2] * T3[6])))))) +
         (P1[1] * (P1[2] * (P2[0] * (P3[3] * (T3[7] - T3[12]) +
                                     (P3[2] * T3[16] - P3[1] * T3[15])) +
                            (P2[3] * (P3[0] * (T3[12] - T3[7]) +
                                      (P3[1] * T3[3] - P3[2] * T3[4])) +
                             (P2[1] * (P3[0] * T3[15] - P3[3] * T3[3]) +
                              P2[2] * (P3[3] * T3[4] - P3[0] * T3[16])))) +
                   (P1[3] * (P2[0] * (P3[2] * (T3[17] - T3[7]) +
                                      (P3[1] * T3[11] - P3[3] * T3[13])) +
                             (P2[2] * (P3[0] * (T3[7] - T3[17]) +
                                       (P3[3] * T3[5] - P3[1] * T3[3])) +
                              (P2[1] * (P3[2] * T3[3] - P3[0] * T3[11]) +
                               P2[3] * (P3[0] * T3[13] - P3[2] * T3[5])))) +
                    P1[1] * (P2[0] * (P3[2] * T3[15] - P3[3] * T3[11]) +
                             (P2[2] * (P3[3] * T3[3] - P3[0] * T3[15]) +
                              P2[3] * (P3[0] * T3[11] - P3[2] * T3[3]))))) +
          (P1[2] * (P1[3] * (P2[0] * (P3[1] * (T3[12] - T3[17]) +
                                      (P3[3] * T3[9] - P3[2] * T3[8])) +
                             (P2[1] * (P3[0] * (T3[17] - T3[12]) +
                                       (P3[2] * T3[4] - P3[3] * T3[5])) +
                              (P2[2] * (P3[0] * T3[8] - P3[1] * T3[4]) +
                               P2[3] * (P3[1] * T3[5] - P3[0] * T3[9])))) +
                    P1[2] * (P2[0] * (P3[3] * T3[8] - P3[1] * T3[16]) +
                             (P2[1] * (P3[0] * T3[16] - P3[3] * T3[4]) +
                              P2[3] * (P3[1] * T3[4] - P3[0] * T3[8])))) +
           P1[3] * P1[3] *
               (P2[0] * (P3[1] * T3[13] - P3[2] * T3[9]) +
                (P2[1] * (P3[2] * T3[5] - P3[0] * T3[13]) +
                 P2[2] * (P3[0] * T3[9] - P3[1] * T3[5]))))));
    TMP1 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] =
        denom *
        (TMP23 *
             (P3[1] *
                  (P1[2] *
                       (P2[0] * -1. * (+cI * (T3[5] + T3[14])) +
                        (P2[1] * (+cI * (T3[9] + T3[15])) +
                         (P2[2] * 2. * (+cI * (T3[13] + T3[16])) +
                          2. * (P2[3] * (-cI * (T3[12]) + cI * (T3[17])))))) +
                   (P1[3] * (P2[0] * (+cI * (T3[4] + T3[10])) +
                             (P2[1] * -1. * (+cI * (T3[8] + T3[11])) +
                              (P2[2] * 2. * (-cI * (T3[12]) + cI * (T3[17])) -
                               2. * (P2[3] * (+cI * (T3[16] + T3[13])))))) +
                    (P1[0] * (P2[2] * -1. * (+cI * (T3[5] + T3[14])) +
                              P2[3] * (+cI * (T3[4] + T3[10]))) +
                     P1[1] * (P2[2] * (+cI * (T3[9] + T3[15])) -
                              P2[3] * (+cI * (T3[8] + T3[11])))))) +
              (P3[2] *
                   (P1[1] *
                        (P2[0] * (+cI * (T3[5] + T3[14])) +
                         (P2[1] * -2. * (+cI * (T3[9] + T3[15])) +
                          (P2[2] * -1. * (+cI * (T3[13] + T3[16])) +
                           2. * (P2[3] * (-cI * (T3[17]) + cI * (T3[7])))))) +
                    (P1[3] * (P2[0] * -1. * (+cI * (T3[3] + T3[6])) +
                              (P2[1] * 2. * (-cI * (T3[17]) + cI * (T3[7])) +
                               (P2[2] * (+cI * (T3[11] + T3[8])) +
                                2. * (P2[3] * (+cI * (T3[15] + T3[9])))))) +
                     (P1[0] * (P2[1] * (+cI * (T3[5] + T3[14])) -
                               P2[3] * (+cI * (T3[3] + T3[6]))) +
                      P1[2] * (P2[1] * -1. * (+cI * (T3[13] + T3[16])) +
                               P2[3] * (+cI * (T3[11] + T3[8])))))) +
               (P3[3] *
                    (P1[1] * (P2[0] * -1. * (+cI * (T3[4] + T3[10])) +
                              (P2[1] * 2. * (+cI * (T3[8] + T3[11])) +
                               (P2[2] * 2. * (-cI * (T3[7]) + cI * (T3[12])) +
                                P2[3] * (+cI * (T3[16] + T3[13]))))) +
                     (P1[2] * (P2[0] * (+cI * (T3[3] + T3[6])) +
                               (P2[1] * 2. * (-cI * (T3[7]) + cI * (T3[12])) +
                                (P2[2] * -2. * (+cI * (T3[11] + T3[8])) -
                                 P2[3] * (+cI * (T3[15] + T3[9]))))) +
                      (P1[0] * (P2[1] * -1. * (+cI * (T3[4] + T3[10])) +
                                P2[2] * (+cI * (T3[3] + T3[6]))) +
                       P1[3] * (P2[1] * (+cI * (T3[16] + T3[13])) -
                                P2[2] * (+cI * (T3[15] + T3[9])))))) +
                OM1 * P1[0] * (+cI * (TMP66 + TMP67))))) +
         (OM1 * P1[0] * TMP1 * (+cI * (TMP57 + TMP59 + TMP61 + TMP63)) -
          P3[0] * (+cI * (TMP57 + TMP59 + TMP61 + TMP63))));
    V1[3] =
        denom *
        (TMP23 *
             (P3[0] *
                  (P1[2] *
                       (P2[0] * -1. * (+cI * (T3[5] + T3[14])) +
                        (P2[1] * (+cI * (T3[9] + T3[15])) +
                         (P2[2] * 2. * (+cI * (T3[13] + T3[16])) +
                          2. * (P2[3] * (-cI * (T3[12]) + cI * (T3[17])))))) +
                   (P1[3] * (P2[0] * (+cI * (T3[4] + T3[10])) +
                             (P2[1] * -1. * (+cI * (T3[8] + T3[11])) +
                              (P2[2] * 2. * (-cI * (T3[12]) + cI * (T3[17])) -
                               2. * (P2[3] * (+cI * (T3[16] + T3[13])))))) +
                    (P1[0] * (P2[2] * -1. * (+cI * (T3[5] + T3[14])) +
                              P2[3] * (+cI * (T3[4] + T3[10]))) +
                     P1[1] * (P2[2] * (+cI * (T3[9] + T3[15])) -
                              P2[3] * (+cI * (T3[8] + T3[11])))))) +
              (P3[2] * (P1[0] * (P2[0] * 2. * (+cI * (T3[5] + T3[14])) +
                                 (P2[1] * -1. * (+cI * (T3[9] + T3[15])) +
                                  (P2[2] * -1. * (+cI * (T3[13] + T3[16])) -
                                   2. * (P2[3] * (+cI * (T3[2] + T3[17])))))) +
                        (P1[3] * (P2[0] * -2. * (+cI * (T3[17] + T3[2])) +
                                  (P2[1] * (+cI * (T3[6] + T3[3])) +
                                   (P2[2] * (+cI * (T3[10] + T3[4])) +
                                    2. * (P2[3] * (+cI * (T3[14] + T3[5])))))) +
                         (P1[1] * (P2[0] * -1. * (+cI * (T3[9] + T3[15])) +
                                   P2[3] * (+cI * (T3[6] + T3[3]))) +
                          P1[2] * (P2[0] * -1. * (+cI * (T3[13] + T3[16])) +
                                   P2[3] * (+cI * (T3[10] + T3[4])))))) +
               (P3[3] * (P1[0] * (P2[0] * -2. * (+cI * (T3[4] + T3[10])) +
                                  (P2[1] * (+cI * (T3[8] + T3[11])) +
                                   (P2[2] * 2. * (+cI * (T3[2] + T3[12])) +
                                    P2[3] * (+cI * (T3[16] + T3[13]))))) +
                         (P1[2] * (P2[0] * 2. * (+cI * (T3[12] + T3[2])) +
                                   (P2[1] * -1. * (+cI * (T3[6] + T3[3])) +
                                    (P2[2] * -2. * (+cI * (T3[10] + T3[4])) -
                                     P2[3] * (+cI * (T3[14] + T3[5]))))) +
                          (P1[1] * (P2[0] * (+cI * (T3[8] + T3[11])) -
                                    P2[2] * (+cI * (T3[6] + T3[3]))) +
                           P1[3] * (P2[0] * (+cI * (T3[16] + T3[13])) -
                                    P2[2] * (+cI * (T3[14] + T3[5])))))) +
                OM1 * P1[1] * (+cI * (TMP66 + TMP67))))) +
         (OM1 * P1[1] * TMP1 * (+cI * (TMP57 + TMP59 + TMP61 + TMP63)) -
          P3[1] * (+cI * (TMP57 + TMP59 + TMP61 + TMP63))));
    V1[4] =
        denom *
        (TMP23 *
             (P3[0] * (P1[1] * (P2[0] * (+cI * (T3[5] + T3[14])) +
                                (P2[1] * -2. * (+cI * (T3[9] + T3[15])) +
                                 (P2[2] * -1. * (+cI * (T3[13] + T3[16])) +
                                  2. * (P2[3] *
                                        (-cI * (T3[17]) + cI * (T3[7])))))) +
                       (P1[3] * (P2[0] * -1. * (+cI * (T3[3] + T3[6])) +
                                 (P2[1] * 2. * (-cI * (T3[17]) + cI * (T3[7])) +
                                  (P2[2] * (+cI * (T3[11] + T3[8])) +
                                   2. * (P2[3] * (+cI * (T3[15] + T3[9])))))) +
                        (P1[0] * (P2[1] * (+cI * (T3[5] + T3[14])) -
                                  P2[3] * (+cI * (T3[3] + T3[6]))) +
                         P1[2] * (P2[1] * -1. * (+cI * (T3[13] + T3[16])) +
                                  P2[3] * (+cI * (T3[11] + T3[8])))))) +
              (P3[1] * (P1[0] * (P2[0] * -2. * (+cI * (T3[5] + T3[14])) +
                                 (P2[1] * (+cI * (T3[9] + T3[15])) +
                                  (P2[2] * (+cI * (T3[13] + T3[16])) +
                                   2. * (P2[3] * (+cI * (T3[2] + T3[17])))))) +
                        (P1[3] * (P2[0] * 2. * (+cI * (T3[17] + T3[2])) +
                                  (P2[1] * -1. * (+cI * (T3[6] + T3[3])) +
                                   (P2[2] * -1. * (+cI * (T3[10] + T3[4])) -
                                    2. * (P2[3] * (+cI * (T3[14] + T3[5])))))) +
                         (P1[1] * (P2[0] * (+cI * (T3[9] + T3[15])) -
                                   P2[3] * (+cI * (T3[6] + T3[3]))) +
                          P1[2] * (P2[0] * (+cI * (T3[13] + T3[16])) -
                                   P2[3] * (+cI * (T3[10] + T3[4])))))) +
               (P3[3] * (P1[0] * (P2[0] * 2. * (+cI * (T3[3] + T3[6])) +
                                  (P2[1] * -2. * (+cI * (T3[2] + T3[7])) +
                                   (P2[2] * -1. * (+cI * (T3[11] + T3[8])) -
                                    P2[3] * (+cI * (T3[15] + T3[9]))))) +
                         (P1[1] * (P2[0] * -2. * (+cI * (T3[7] + T3[2])) +
                                   (P2[1] * 2. * (+cI * (T3[6] + T3[3])) +
                                    (P2[2] * (+cI * (T3[10] + T3[4])) +
                                     P2[3] * (+cI * (T3[14] + T3[5]))))) +
                          (P1[2] * (P2[0] * -1. * (+cI * (T3[11] + T3[8])) +
                                    P2[1] * (+cI * (T3[10] + T3[4]))) +
                           P1[3] * (P2[0] * -1. * (+cI * (T3[15] + T3[9])) +
                                    P2[1] * (+cI * (T3[14] + T3[5])))))) +
                OM1 * P1[2] * (+cI * (TMP66 + TMP67))))) +
         (OM1 * P1[2] * TMP1 * (+cI * (TMP57 + TMP59 + TMP61 + TMP63)) -
          P3[2] * (+cI * (TMP57 + TMP59 + TMP61 + TMP63))));
    V1[5] =
        denom *
        (TMP23 *
             (P3[0] * (P1[1] * (P2[0] * -1. * (+cI * (T3[4] + T3[10])) +
                                (P2[1] * 2. * (+cI * (T3[8] + T3[11])) +
                                 (P2[2] * 2. * (-cI * (T3[7]) + cI * (T3[12])) +
                                  P2[3] * (+cI * (T3[16] + T3[13]))))) +
                       (P1[2] * (P2[0] * (+cI * (T3[3] + T3[6])) +
                                 (P2[1] * 2. * (-cI * (T3[7]) + cI * (T3[12])) +
                                  (P2[2] * -2. * (+cI * (T3[11] + T3[8])) -
                                   P2[3] * (+cI * (T3[15] + T3[9]))))) +
                        (P1[0] * (P2[1] * -1. * (+cI * (T3[4] + T3[10])) +
                                  P2[2] * (+cI * (T3[3] + T3[6]))) +
                         P1[3] * (P2[1] * (+cI * (T3[16] + T3[13])) -
                                  P2[2] * (+cI * (T3[15] + T3[9])))))) +
              (P3[1] * (P1[0] * (P2[0] * 2. * (+cI * (T3[4] + T3[10])) +
                                 (P2[1] * -1. * (+cI * (T3[8] + T3[11])) +
                                  (P2[2] * -2. * (+cI * (T3[2] + T3[12])) -
                                   P2[3] * (+cI * (T3[16] + T3[13]))))) +
                        (P1[2] * (P2[0] * -2. * (+cI * (T3[12] + T3[2])) +
                                  (P2[1] * (+cI * (T3[6] + T3[3])) +
                                   (P2[2] * 2. * (+cI * (T3[10] + T3[4])) +
                                    P2[3] * (+cI * (T3[14] + T3[5]))))) +
                         (P1[1] * (P2[0] * -1. * (+cI * (T3[8] + T3[11])) +
                                   P2[2] * (+cI * (T3[6] + T3[3]))) +
                          P1[3] * (P2[0] * -1. * (+cI * (T3[16] + T3[13])) +
                                   P2[2] * (+cI * (T3[14] + T3[5])))))) +
               (P3[2] * (P1[0] * (P2[0] * -2. * (+cI * (T3[3] + T3[6])) +
                                  (P2[1] * 2. * (+cI * (T3[2] + T3[7])) +
                                   (P2[2] * (+cI * (T3[11] + T3[8])) +
                                    P2[3] * (+cI * (T3[15] + T3[9]))))) +
                         (P1[1] * (P2[0] * 2. * (+cI * (T3[7] + T3[2])) +
                                   (P2[1] * -2. * (+cI * (T3[6] + T3[3])) +
                                    (P2[2] * -1. * (+cI * (T3[10] + T3[4])) -
                                     P2[3] * (+cI * (T3[14] + T3[5]))))) +
                          (P1[2] * (P2[0] * (+cI * (T3[11] + T3[8])) -
                                    P2[1] * (+cI * (T3[10] + T3[4]))) +
                           P1[3] * (P2[0] * (+cI * (T3[15] + T3[9])) -
                                    P2[1] * (+cI * (T3[14] + T3[5])))))) +
                OM1 * P1[3] * (+cI * (TMP66 + TMP67))))) +
         (OM1 * P1[3] * TMP1 * (+cI * (TMP57 + TMP59 + TMP61 + TMP63)) -
          P3[3] * (+cI * (TMP57 + TMP59 + TMP61 + TMP63))));
}

void VVT12_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
             double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    complex<double> TMP22;
    complex<double> TMP10;
    double P2[4];
    complex<double> TMP7;
    complex<double> TMP21;
    complex<double> denom;
    double OM1;
    complex<double> TMP28;
    complex<double> TMP27;
    complex<double> TMP65;
    complex<double> TMP68;
    complex<double> TMP69;
    OM1 = 0.;
    if (M1 != 0.)
        OM1 = 1. / pow(M1, 2);
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    V1[0] = +V2[0] + T3[0];
    V1[1] = +V2[1] + T3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP68 =
        (P1[0] * -1. *
             (V2[3] * T3[6] + V2[4] * T3[10] + V2[5] * T3[14] - V2[2] * T3[2]) +
         (P1[1] * (V2[3] * T3[7] + V2[4] * T3[11] + V2[5] * T3[15] -
                   V2[2] * T3[3]) +
          (P1[2] * (V2[3] * T3[8] + V2[4] * T3[12] + V2[5] * T3[16] -
                    V2[2] * T3[4]) +
           P1[3] * (V2[3] * T3[9] + V2[4] * T3[13] + V2[5] * T3[17] -
                    V2[2] * T3[5]))));
    TMP69 =
        (P1[0] * -1. *
             (V2[3] * T3[3] + V2[4] * T3[4] + V2[5] * T3[5] - V2[2] * T3[2]) +
         (P1[1] *
              (V2[3] * T3[7] + V2[4] * T3[8] + V2[5] * T3[9] - V2[2] * T3[6]) +
          (P1[2] * (V2[3] * T3[11] + V2[4] * T3[12] + V2[5] * T3[13] -
                    V2[2] * T3[10]) +
           P1[3] * (V2[3] * T3[15] + V2[4] * T3[16] + V2[5] * T3[17] -
                    V2[2] * T3[14]))));
    TMP27 =
        (P1[0] * -1. *
             (V2[3] * T3[6] + V2[4] * T3[10] + V2[5] * T3[14] - V2[2] * T3[2]) +
         (P1[1] * (V2[3] * T3[7] + V2[4] * T3[11] + V2[5] * T3[15] -
                   V2[2] * T3[3]) +
          (P1[2] * (V2[3] * T3[8] + V2[4] * T3[12] + V2[5] * T3[16] -
                    V2[2] * T3[4]) +
           P1[3] * (V2[3] * T3[9] + V2[4] * T3[13] + V2[5] * T3[17] -
                    V2[2] * T3[5]))));
    TMP21 =
        (P1[0] * -1. *
             (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] - P2[0] * T3[2]) +
         (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] * T3[15] -
                   P2[0] * T3[3]) +
          (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] + P2[3] * T3[16] -
                    P2[0] * T3[4]) +
           P1[3] * (P2[1] * T3[9] + P2[2] * T3[13] + P2[3] * T3[17] -
                    P2[0] * T3[5]))));
    TMP22 =
        (P1[0] * -1. *
             (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] - P2[0] * T3[2]) +
         (P1[1] *
              (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9] - P2[0] * T3[6]) +
          (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] * T3[13] -
                    P2[0] * T3[10]) +
           P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] + P2[3] * T3[17] -
                    P2[0] * T3[14]))));
    TMP28 =
        (P1[0] * -1. *
             (V2[3] * T3[3] + V2[4] * T3[4] + V2[5] * T3[5] - V2[2] * T3[2]) +
         (P1[1] *
              (V2[3] * T3[7] + V2[4] * T3[8] + V2[5] * T3[9] - V2[2] * T3[6]) +
          (P1[2] * (V2[3] * T3[11] + V2[4] * T3[12] + V2[5] * T3[13] -
                    V2[2] * T3[10]) +
           P1[3] * (V2[3] * T3[15] + V2[4] * T3[16] + V2[5] * T3[17] -
                    V2[2] * T3[14]))));
    TMP65 =
        (P1[0] * -1. *
             (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] - P2[0] * T3[2]) +
         (P1[1] *
              (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9] - P2[0] * T3[6]) +
          (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] * T3[13] -
                    P2[0] * T3[10]) +
           P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] + P2[3] * T3[17] -
                    P2[0] * T3[14]))));
    TMP7 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    TMP10 = (P1[0] * P2[0] - P1[1] * P2[1] - P1[2] * P2[2] - P1[3] * P2[3]);
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] =
        denom *
        (TMP10 * (OM1 * P1[0] * (-cI * (TMP27 + TMP28) + cI * (TMP68 + TMP69)) +
                  (V2[3] * (+cI * (T3[6] + T3[3])) +
                   (V2[4] * (+cI * (T3[10] + T3[4])) +
                    (V2[5] * (+cI * (T3[14] + T3[5])) -
                     2. * cI * (V2[2] * T3[2]))))) +
         (TMP7 * (OM1 * P1[0] * (-cI * (TMP65) + cI * (TMP22)) +
                  (P2[1] * -1. * (+cI * (T3[3] + T3[6])) +
                   (P2[2] * -1. * (+cI * (T3[4] + T3[10])) +
                    (P2[3] * -1. * (+cI * (T3[5] + T3[14])) +
                     2. * cI * (P2[0] * T3[2]))))) +
          (P2[0] * (+cI * (TMP27 + TMP28)) - V2[2] * (+cI * (TMP21 + TMP22)))));
    V1[3] =
        denom *
        (TMP10 * (OM1 * P1[1] * (-cI * (TMP27 + TMP28) + cI * (TMP68 + TMP69)) +
                  (V2[2] * -1. * (+cI * (T3[3] + T3[6])) +
                   (V2[4] * (+cI * (T3[11] + T3[8])) +
                    (V2[5] * (+cI * (T3[15] + T3[9])) +
                     2. * cI * (V2[3] * T3[7]))))) +
         (TMP7 * (OM1 * P1[1] * (-cI * (TMP65) + cI * (TMP22)) +
                  (P2[0] * (+cI * (T3[6] + T3[3])) +
                   (P2[2] * -1. * (+cI * (T3[8] + T3[11])) +
                    (P2[3] * -1. * (+cI * (T3[9] + T3[15])) -
                     2. * cI * (P2[1] * T3[7]))))) +
          (P2[1] * (+cI * (TMP27 + TMP28)) - V2[3] * (+cI * (TMP21 + TMP22)))));
    V1[4] =
        denom *
        (TMP10 * (OM1 * P1[2] * (-cI * (TMP27 + TMP28) + cI * (TMP68 + TMP69)) +
                  (V2[2] * -1. * (+cI * (T3[4] + T3[10])) +
                   (V2[3] * (+cI * (T3[8] + T3[11])) +
                    (V2[5] * (+cI * (T3[16] + T3[13])) +
                     2. * cI * (V2[4] * T3[12]))))) +
         (TMP7 * (OM1 * P1[2] * (-cI * (TMP65) + cI * (TMP22)) +
                  (P2[0] * (+cI * (T3[10] + T3[4])) +
                   (P2[1] * -1. * (+cI * (T3[11] + T3[8])) +
                    (P2[3] * -1. * (+cI * (T3[13] + T3[16])) -
                     2. * cI * (P2[2] * T3[12]))))) +
          (P2[2] * (+cI * (TMP27 + TMP28)) - V2[4] * (+cI * (TMP21 + TMP22)))));
    V1[5] =
        denom *
        (TMP10 * (OM1 * P1[3] * (-cI * (TMP27 + TMP28) + cI * (TMP68 + TMP69)) +
                  (V2[2] * -1. * (+cI * (T3[5] + T3[14])) +
                   (V2[3] * (+cI * (T3[9] + T3[15])) +
                    (V2[4] * (+cI * (T3[13] + T3[16])) +
                     2. * cI * (V2[5] * T3[17]))))) +
         (TMP7 * (OM1 * P1[3] * (-cI * (TMP65) + cI * (TMP22)) +
                  (P2[0] * (+cI * (T3[14] + T3[5])) +
                   (P2[1] * -1. * (+cI * (T3[15] + T3[9])) +
                    (P2[2] * -1. * (+cI * (T3[16] + T3[13])) -
                     2. * cI * (P2[3] * T3[17]))))) +
          (P2[3] * (+cI * (TMP27 + TMP28)) - V2[5] * (+cI * (TMP21 + TMP22)))));
}

void VVT11_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
             double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    complex<double> denom;
    double OM1;
    complex<double> TMP68;
    complex<double> TMP69;
    OM1 = 0.;
    if (M1 != 0.)
        OM1 = 1. / pow(M1, 2);
    V1[0] = +V2[0] + T3[0];
    V1[1] = +V2[1] + T3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP68 =
        (P1[0] * -1. *
             (V2[3] * T3[6] + V2[4] * T3[10] + V2[5] * T3[14] - V2[2] * T3[2]) +
         (P1[1] * (V2[3] * T3[7] + V2[4] * T3[11] + V2[5] * T3[15] -
                   V2[2] * T3[3]) +
          (P1[2] * (V2[3] * T3[8] + V2[4] * T3[12] + V2[5] * T3[16] -
                    V2[2] * T3[4]) +
           P1[3] * (V2[3] * T3[9] + V2[4] * T3[13] + V2[5] * T3[17] -
                    V2[2] * T3[5]))));
    TMP69 =
        (P1[0] * -1. *
             (V2[3] * T3[3] + V2[4] * T3[4] + V2[5] * T3[5] - V2[2] * T3[2]) +
         (P1[1] *
              (V2[3] * T3[7] + V2[4] * T3[8] + V2[5] * T3[9] - V2[2] * T3[6]) +
          (P1[2] * (V2[3] * T3[11] + V2[4] * T3[12] + V2[5] * T3[13] -
                    V2[2] * T3[10]) +
           P1[3] * (V2[3] * T3[15] + V2[4] * T3[16] + V2[5] * T3[17] -
                    V2[2] * T3[14]))));
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] = denom * -cI *
            (OM1 * -P1[0] * (TMP68 + TMP69) +
             (V2[3] * -1. * (T3[6] + T3[3]) +
              (V2[4] * -1. * (T3[10] + T3[4]) +
               (V2[5] * -1. * (T3[14] + T3[5]) + 2. * (V2[2] * T3[2])))));
    V1[3] = denom * cI *
            (OM1 * P1[1] * (TMP68 + TMP69) +
             (V2[2] * -1. * (T3[3] + T3[6]) +
              (V2[4] * (T3[11] + T3[8]) +
               (V2[5] * (T3[15] + T3[9]) + 2. * (V2[3] * T3[7])))));
    V1[4] = denom * cI *
            (OM1 * P1[2] * (TMP68 + TMP69) +
             (V2[2] * -1. * (T3[4] + T3[10]) +
              (V2[3] * (T3[8] + T3[11]) +
               (V2[5] * (T3[16] + T3[13]) + 2. * (V2[4] * T3[12])))));
    V1[5] = denom * cI *
            (OM1 * P1[3] * (TMP68 + TMP69) +
             (V2[2] * -1. * (T3[5] + T3[14]) +
              (V2[3] * (T3[9] + T3[15]) +
               (V2[4] * (T3[13] + T3[16]) + 2. * (V2[5] * T3[17])))));
}

void VVT3_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
            double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    double P2[4];
    double P3[4];
    complex<double> TMP71;
    complex<double> denom;
    complex<double> TMP70;
    complex<double> TMP73;
    complex<double> TMP72;
    double OM1;
    OM1 = 0.;
    if (M1 != 0.)
        OM1 = 1. / pow(M1, 2);
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    P3[0] = T3[0].real();
    P3[1] = T3[1].real();
    P3[2] = T3[1].imag();
    P3[3] = T3[0].imag();
    V1[0] = +V2[0] + T3[0];
    V1[1] = +V2[1] + T3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP73 =
        -1. *
        (P2[0] * (P1[0] * (P3[1] * (V2[5] * T3[10] - V2[4] * T3[14]) +
                           (P3[2] * (V2[3] * T3[14] - V2[5] * T3[6]) +
                            P3[3] * (V2[4] * T3[6] - V2[3] * T3[10]))) +
                  (P1[1] * (P3[0] * (V2[4] * T3[14] - V2[5] * T3[10]) +
                            (P3[2] * (V2[5] * T3[2] - V2[2] * T3[14]) +
                             P3[3] * (V2[2] * T3[10] - V2[4] * T3[2]))) +
                   (P1[2] * (P3[0] * (V2[5] * T3[6] - V2[3] * T3[14]) +
                             (P3[1] * (V2[2] * T3[14] - V2[5] * T3[2]) +
                              P3[3] * (V2[3] * T3[2] - V2[2] * T3[6]))) +
                    P1[3] * (P3[0] * (V2[3] * T3[10] - V2[4] * T3[6]) +
                             (P3[1] * (V2[4] * T3[2] - V2[2] * T3[10]) +
                              P3[2] * (V2[2] * T3[6] - V2[3] * T3[2])))))) +
         (P2[1] * (P1[0] * (P3[1] * (V2[4] * T3[15] - V2[5] * T3[11]) +
                            (P3[2] * (V2[5] * T3[7] - V2[3] * T3[15]) +
                             P3[3] * (V2[3] * T3[11] - V2[4] * T3[7]))) +
                   (P1[1] * (P3[0] * (V2[5] * T3[11] - V2[4] * T3[15]) +
                             (P3[2] * (V2[2] * T3[15] - V2[5] * T3[3]) +
                              P3[3] * (V2[4] * T3[3] - V2[2] * T3[11]))) +
                    (P1[2] * (P3[0] * (V2[3] * T3[15] - V2[5] * T3[7]) +
                              (P3[1] * (V2[5] * T3[3] - V2[2] * T3[15]) +
                               P3[3] * (V2[2] * T3[7] - V2[3] * T3[3]))) +
                     P1[3] * (P3[0] * (V2[4] * T3[7] - V2[3] * T3[11]) +
                              (P3[1] * (V2[2] * T3[11] - V2[4] * T3[3]) +
                               P3[2] * (V2[3] * T3[3] - V2[2] * T3[7])))))) +
          (P2[2] * (P1[0] * (P3[1] * (V2[4] * T3[16] - V2[5] * T3[12]) +
                             (P3[2] * (V2[5] * T3[8] - V2[3] * T3[16]) +
                              P3[3] * (V2[3] * T3[12] - V2[4] * T3[8]))) +
                    (P1[1] * (P3[0] * (V2[5] * T3[12] - V2[4] * T3[16]) +
                              (P3[2] * (V2[2] * T3[16] - V2[5] * T3[4]) +
                               P3[3] * (V2[4] * T3[4] - V2[2] * T3[12]))) +
                     (P1[2] * (P3[0] * (V2[3] * T3[16] - V2[5] * T3[8]) +
                               (P3[1] * (V2[5] * T3[4] - V2[2] * T3[16]) +
                                P3[3] * (V2[2] * T3[8] - V2[3] * T3[4]))) +
                      P1[3] * (P3[0] * (V2[4] * T3[8] - V2[3] * T3[12]) +
                               (P3[1] * (V2[2] * T3[12] - V2[4] * T3[4]) +
                                P3[2] * (V2[3] * T3[4] - V2[2] * T3[8])))))) +
           P2[3] * (P1[0] * (P3[1] * (V2[4] * T3[17] - V2[5] * T3[13]) +
                             (P3[2] * (V2[5] * T3[9] - V2[3] * T3[17]) +
                              P3[3] * (V2[3] * T3[13] - V2[4] * T3[9]))) +
                    (P1[1] * (P3[0] * (V2[5] * T3[13] - V2[4] * T3[17]) +
                              (P3[2] * (V2[2] * T3[17] - V2[5] * T3[5]) +
                               P3[3] * (V2[4] * T3[5] - V2[2] * T3[13]))) +
                     (P1[2] * (P3[0] * (V2[3] * T3[17] - V2[5] * T3[9]) +
                               (P3[1] * (V2[5] * T3[5] - V2[2] * T3[17]) +
                                P3[3] * (V2[2] * T3[9] - V2[3] * T3[5]))) +
                      P1[3] * (P3[0] * (V2[4] * T3[9] - V2[3] * T3[13]) +
                               (P3[1] * (V2[2] * T3[13] - V2[4] * T3[5]) +
                                P3[2] * (V2[3] * T3[5] - V2[2] * T3[9])))))))));
    TMP72 =
        -1. *
        (P1[0] * (P1[1] * (P3[2] * (V2[5] * (T3[2] + T3[7]) +
                                    (-V2[2] * T3[14] - V2[3] * T3[15])) +
                           (P3[3] * (V2[4] * -1. * (T3[2] + T3[7]) +
                                     (V2[2] * T3[10] + V2[3] * T3[11])) +
                            (P3[0] * (V2[4] * T3[14] - V2[5] * T3[10]) +
                             P3[1] * (V2[4] * T3[15] - V2[5] * T3[11])))) +
                  (P1[2] * (P3[1] * (V2[5] * -1. * (T3[2] + T3[12]) +
                                     (V2[2] * T3[14] + V2[4] * T3[16])) +
                            (P3[3] * (V2[3] * (T3[2] + T3[12]) +
                                      (-V2[2] * T3[6] - V2[4] * T3[8])) +
                             (P3[0] * (V2[5] * T3[6] - V2[3] * T3[14]) +
                              P3[2] * (V2[5] * T3[8] - V2[3] * T3[16])))) +
                   (P1[3] * (P3[1] * (V2[4] * (T3[2] + T3[17]) +
                                      (-V2[2] * T3[10] - V2[5] * T3[13])) +
                             (P3[2] * (V2[3] * -1. * (T3[2] + T3[17]) +
                                       (V2[2] * T3[6] + V2[5] * T3[9])) +
                              (P3[0] * (V2[3] * T3[10] - V2[4] * T3[6]) +
                               P3[3] * (V2[3] * T3[13] - V2[4] * T3[9])))) +
                    P1[0] * (P3[1] * (V2[5] * T3[10] - V2[4] * T3[14]) +
                             (P3[2] * (V2[3] * T3[14] - V2[5] * T3[6]) +
                              P3[3] * (V2[4] * T3[6] - V2[3] * T3[10])))))) +
         (P1[1] * (P1[2] * (P3[0] * (V2[5] * (T3[12] - T3[7]) +
                                     (V2[3] * T3[15] - V2[4] * T3[16])) +
                            (P3[3] * (V2[2] * (T3[7] - T3[12]) +
                                      (V2[4] * T3[4] - V2[3] * T3[3])) +
                             (P3[1] * (V2[5] * T3[3] - V2[2] * T3[15]) +
                              P3[2] * (V2[2] * T3[16] - V2[5] * T3[4])))) +
                   (P1[3] * (P3[0] * (V2[4] * (T3[7] - T3[17]) +
                                      (V2[5] * T3[13] - V2[3] * T3[11])) +
                             (P3[2] * (V2[2] * (T3[17] - T3[7]) +
                                       (V2[3] * T3[3] - V2[5] * T3[5])) +
                              (P3[1] * (V2[2] * T3[11] - V2[4] * T3[3]) +
                               P3[3] * (V2[4] * T3[5] - V2[2] * T3[13])))) +
                    P1[1] * (P3[0] * (V2[5] * T3[11] - V2[4] * T3[15]) +
                             (P3[2] * (V2[2] * T3[15] - V2[5] * T3[3]) +
                              P3[3] * (V2[4] * T3[3] - V2[2] * T3[11]))))) +
          (P1[2] * (P1[3] * (P3[0] * (V2[3] * (T3[17] - T3[12]) +
                                      (V2[4] * T3[8] - V2[5] * T3[9])) +
                             (P3[1] * (V2[2] * (T3[12] - T3[17]) +
                                       (V2[5] * T3[5] - V2[4] * T3[4])) +
                              (P3[2] * (V2[3] * T3[4] - V2[2] * T3[8]) +
                               P3[3] * (V2[2] * T3[9] - V2[3] * T3[5])))) +
                    P1[2] * (P3[0] * (V2[3] * T3[16] - V2[5] * T3[8]) +
                             (P3[1] * (V2[5] * T3[4] - V2[2] * T3[16]) +
                              P3[3] * (V2[2] * T3[8] - V2[3] * T3[4])))) +
           P1[3] * P1[3] *
               (P3[0] * (V2[4] * T3[9] - V2[3] * T3[13]) +
                (P3[1] * (V2[2] * T3[13] - V2[4] * T3[5]) +
                 P3[2] * (V2[3] * T3[5] - V2[2] * T3[9]))))));
    TMP71 =
        -1. *
        (P2[0] * (P1[0] * (P3[1] * (V2[5] * T3[4] - V2[4] * T3[5]) +
                           (P3[2] * (V2[3] * T3[5] - V2[5] * T3[3]) +
                            P3[3] * (V2[4] * T3[3] - V2[3] * T3[4]))) +
                  (P1[1] * (P3[0] * (V2[4] * T3[5] - V2[5] * T3[4]) +
                            (P3[2] * (V2[5] * T3[2] - V2[2] * T3[5]) +
                             P3[3] * (V2[2] * T3[4] - V2[4] * T3[2]))) +
                   (P1[2] * (P3[0] * (V2[5] * T3[3] - V2[3] * T3[5]) +
                             (P3[1] * (V2[2] * T3[5] - V2[5] * T3[2]) +
                              P3[3] * (V2[3] * T3[2] - V2[2] * T3[3]))) +
                    P1[3] * (P3[0] * (V2[3] * T3[4] - V2[4] * T3[3]) +
                             (P3[1] * (V2[4] * T3[2] - V2[2] * T3[4]) +
                              P3[2] * (V2[2] * T3[3] - V2[3] * T3[2])))))) +
         (P2[1] * (P1[0] * (P3[1] * (V2[4] * T3[9] - V2[5] * T3[8]) +
                            (P3[2] * (V2[5] * T3[7] - V2[3] * T3[9]) +
                             P3[3] * (V2[3] * T3[8] - V2[4] * T3[7]))) +
                   (P1[1] * (P3[0] * (V2[5] * T3[8] - V2[4] * T3[9]) +
                             (P3[2] * (V2[2] * T3[9] - V2[5] * T3[6]) +
                              P3[3] * (V2[4] * T3[6] - V2[2] * T3[8]))) +
                    (P1[2] * (P3[0] * (V2[3] * T3[9] - V2[5] * T3[7]) +
                              (P3[1] * (V2[5] * T3[6] - V2[2] * T3[9]) +
                               P3[3] * (V2[2] * T3[7] - V2[3] * T3[6]))) +
                     P1[3] * (P3[0] * (V2[4] * T3[7] - V2[3] * T3[8]) +
                              (P3[1] * (V2[2] * T3[8] - V2[4] * T3[6]) +
                               P3[2] * (V2[3] * T3[6] - V2[2] * T3[7])))))) +
          (P2[2] * (P1[0] * (P3[1] * (V2[4] * T3[13] - V2[5] * T3[12]) +
                             (P3[2] * (V2[5] * T3[11] - V2[3] * T3[13]) +
                              P3[3] * (V2[3] * T3[12] - V2[4] * T3[11]))) +
                    (P1[1] * (P3[0] * (V2[5] * T3[12] - V2[4] * T3[13]) +
                              (P3[2] * (V2[2] * T3[13] - V2[5] * T3[10]) +
                               P3[3] * (V2[4] * T3[10] - V2[2] * T3[12]))) +
                     (P1[2] * (P3[0] * (V2[3] * T3[13] - V2[5] * T3[11]) +
                               (P3[1] * (V2[5] * T3[10] - V2[2] * T3[13]) +
                                P3[3] * (V2[2] * T3[11] - V2[3] * T3[10]))) +
                      P1[3] * (P3[0] * (V2[4] * T3[11] - V2[3] * T3[12]) +
                               (P3[1] * (V2[2] * T3[12] - V2[4] * T3[10]) +
                                P3[2] * (V2[3] * T3[10] - V2[2] * T3[11])))))) +
           P2[3] *
               (P1[0] * (P3[1] * (V2[4] * T3[17] - V2[5] * T3[16]) +
                         (P3[2] * (V2[5] * T3[15] - V2[3] * T3[17]) +
                          P3[3] * (V2[3] * T3[16] - V2[4] * T3[15]))) +
                (P1[1] * (P3[0] * (V2[5] * T3[16] - V2[4] * T3[17]) +
                          (P3[2] * (V2[2] * T3[17] - V2[5] * T3[14]) +
                           P3[3] * (V2[4] * T3[14] - V2[2] * T3[16]))) +
                 (P1[2] * (P3[0] * (V2[3] * T3[17] - V2[5] * T3[15]) +
                           (P3[1] * (V2[5] * T3[14] - V2[2] * T3[17]) +
                            P3[3] * (V2[2] * T3[15] - V2[3] * T3[14]))) +
                  P1[3] * (P3[0] * (V2[4] * T3[15] - V2[3] * T3[16]) +
                           (P3[1] * (V2[2] * T3[16] - V2[4] * T3[14]) +
                            P3[2] * (V2[3] * T3[14] - V2[2] * T3[15])))))))));
    TMP70 =
        -1. *
        (P1[0] * (P1[1] * (P3[2] * (V2[5] * (T3[2] + T3[7]) +
                                    (-V2[2] * T3[5] - V2[3] * T3[9])) +
                           (P3[3] * (V2[4] * -1. * (T3[2] + T3[7]) +
                                     (V2[2] * T3[4] + V2[3] * T3[8])) +
                            (P3[0] * (V2[4] * T3[5] - V2[5] * T3[4]) +
                             P3[1] * (V2[4] * T3[9] - V2[5] * T3[8])))) +
                  (P1[2] * (P3[1] * (V2[5] * -1. * (T3[2] + T3[12]) +
                                     (V2[2] * T3[5] + V2[4] * T3[13])) +
                            (P3[3] * (V2[3] * (T3[2] + T3[12]) +
                                      (-V2[2] * T3[3] - V2[4] * T3[11])) +
                             (P3[0] * (V2[5] * T3[3] - V2[3] * T3[5]) +
                              P3[2] * (V2[5] * T3[11] - V2[3] * T3[13])))) +
                   (P1[3] * (P3[1] * (V2[4] * (T3[2] + T3[17]) +
                                      (-V2[2] * T3[4] - V2[5] * T3[16])) +
                             (P3[2] * (V2[3] * -1. * (T3[2] + T3[17]) +
                                       (V2[2] * T3[3] + V2[5] * T3[15])) +
                              (P3[0] * (V2[3] * T3[4] - V2[4] * T3[3]) +
                               P3[3] * (V2[3] * T3[16] - V2[4] * T3[15])))) +
                    P1[0] * (P3[1] * (V2[5] * T3[4] - V2[4] * T3[5]) +
                             (P3[2] * (V2[3] * T3[5] - V2[5] * T3[3]) +
                              P3[3] * (V2[4] * T3[3] - V2[3] * T3[4])))))) +
         (P1[1] * (P1[2] * (P3[0] * (V2[5] * (T3[12] - T3[7]) +
                                     (V2[3] * T3[9] - V2[4] * T3[13])) +
                            (P3[3] * (V2[2] * (T3[7] - T3[12]) +
                                      (V2[4] * T3[10] - V2[3] * T3[6])) +
                             (P3[1] * (V2[5] * T3[6] - V2[2] * T3[9]) +
                              P3[2] * (V2[2] * T3[13] - V2[5] * T3[10])))) +
                   (P1[3] * (P3[0] * (V2[4] * (T3[7] - T3[17]) +
                                      (V2[5] * T3[16] - V2[3] * T3[8])) +
                             (P3[2] * (V2[2] * (T3[17] - T3[7]) +
                                       (V2[3] * T3[6] - V2[5] * T3[14])) +
                              (P3[1] * (V2[2] * T3[8] - V2[4] * T3[6]) +
                               P3[3] * (V2[4] * T3[14] - V2[2] * T3[16])))) +
                    P1[1] * (P3[0] * (V2[5] * T3[8] - V2[4] * T3[9]) +
                             (P3[2] * (V2[2] * T3[9] - V2[5] * T3[6]) +
                              P3[3] * (V2[4] * T3[6] - V2[2] * T3[8]))))) +
          (P1[2] * (P1[3] * (P3[0] * (V2[3] * (T3[17] - T3[12]) +
                                      (V2[4] * T3[11] - V2[5] * T3[15])) +
                             (P3[1] * (V2[2] * (T3[12] - T3[17]) +
                                       (V2[5] * T3[14] - V2[4] * T3[10])) +
                              (P3[2] * (V2[3] * T3[10] - V2[2] * T3[11]) +
                               P3[3] * (V2[2] * T3[15] - V2[3] * T3[14])))) +
                    P1[2] * (P3[0] * (V2[3] * T3[13] - V2[5] * T3[11]) +
                             (P3[1] * (V2[5] * T3[10] - V2[2] * T3[13]) +
                              P3[3] * (V2[2] * T3[11] - V2[3] * T3[10])))) +
           P1[3] * P1[3] *
               (P3[0] * (V2[4] * T3[15] - V2[3] * T3[16]) +
                (P3[1] * (V2[2] * T3[16] - V2[4] * T3[14]) +
                 P3[2] * (V2[3] * T3[14] - V2[2] * T3[15]))))));
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] = denom * 2. * cI *
            (P3[1] * (V2[4] * (P1[0] * -0.500000000 * (T3[5] + T3[14]) +
                               (P1[1] * 0.500000000 * (T3[9] + T3[15]) +
                                (P1[2] * 0.500000000 * (T3[13] + T3[16]) +
                                 (P2[0] * 0.500000000 * (T3[5] + T3[14]) +
                                  (P2[1] * -0.500000000 * (T3[9] + T3[15]) +
                                   (P2[2] * -0.500000000 * (T3[13] + T3[16]) +
                                    T3[17] * (P1[3] - P2[3]))))))) +
                      V2[5] * (P1[0] * 0.500000000 * (T3[4] + T3[10]) +
                               (P1[1] * -0.500000000 * (T3[8] + T3[11]) +
                                (P1[3] * -0.500000000 * (T3[16] + T3[13]) +
                                 (P2[0] * -0.500000000 * (T3[4] + T3[10]) +
                                  (P2[1] * 0.500000000 * (T3[8] + T3[11]) +
                                   (P2[3] * 0.500000000 * (T3[16] + T3[13]) +
                                    T3[12] * (P2[2] - P1[2])))))))) +
             (P3[2] * (V2[3] * (P1[0] * 0.500000000 * (T3[5] + T3[14]) +
                                (P1[1] * -0.500000000 * (T3[9] + T3[15]) +
                                 (P1[2] * -0.500000000 * (T3[13] + T3[16]) +
                                  (P2[0] * -0.500000000 * (T3[5] + T3[14]) +
                                   (P2[1] * 0.500000000 * (T3[9] + T3[15]) +
                                    (P2[2] * 0.500000000 * (T3[13] + T3[16]) +
                                     T3[17] * (P2[3] - P1[3]))))))) +
                       V2[5] * (P1[0] * -0.500000000 * (T3[3] + T3[6]) +
                                (P1[2] * 0.500000000 * (T3[11] + T3[8]) +
                                 (P1[3] * 0.500000000 * (T3[15] + T3[9]) +
                                  (P2[0] * 0.500000000 * (T3[3] + T3[6]) +
                                   (P2[2] * -0.500000000 * (T3[11] + T3[8]) +
                                    (P2[3] * -0.500000000 * (T3[15] + T3[9]) +
                                     T3[7] * (P1[1] - P2[1])))))))) +
              (+0.500000000 * (OM1 * P1[0] * (TMP70 + TMP72 - TMP71 - TMP73)) +
               P3[3] * (V2[3] * (P1[0] * -0.500000000 * (T3[4] + T3[10]) +
                                 (P1[1] * 0.500000000 * (T3[8] + T3[11]) +
                                  (P1[3] * 0.500000000 * (T3[16] + T3[13]) +
                                   (P2[0] * 0.500000000 * (T3[4] + T3[10]) +
                                    (P2[1] * -0.500000000 * (T3[8] + T3[11]) +
                                     (P2[3] * -0.500000000 * (T3[16] + T3[13]) +
                                      T3[12] * (P1[2] - P2[2]))))))) +
                        V2[4] * (P1[0] * 0.500000000 * (T3[3] + T3[6]) +
                                 (P1[2] * -0.500000000 * (T3[11] + T3[8]) +
                                  (P1[3] * -0.500000000 * (T3[15] + T3[9]) +
                                   (P2[0] * -0.500000000 * (T3[3] + T3[6]) +
                                    (P2[2] * 0.500000000 * (T3[11] + T3[8]) +
                                     (P2[3] * 0.500000000 * (T3[15] + T3[9]) +
                                      T3[7] * (P2[1] - P1[1])))))))))));
    V1[3] = denom * -2. * cI *
            (P3[0] * (V2[4] * (P1[0] * 0.500000000 * (T3[5] + T3[14]) +
                               (P1[1] * -0.500000000 * (T3[9] + T3[15]) +
                                (P1[2] * -0.500000000 * (T3[13] + T3[16]) +
                                 (P2[0] * -0.500000000 * (T3[5] + T3[14]) +
                                  (P2[1] * 0.500000000 * (T3[9] + T3[15]) +
                                   (P2[2] * 0.500000000 * (T3[13] + T3[16]) +
                                    T3[17] * (P2[3] - P1[3]))))))) +
                      V2[5] * (P1[0] * -0.500000000 * (T3[4] + T3[10]) +
                               (P1[1] * 0.500000000 * (T3[8] + T3[11]) +
                                (P1[3] * 0.500000000 * (T3[16] + T3[13]) +
                                 (P2[0] * 0.500000000 * (T3[4] + T3[10]) +
                                  (P2[1] * -0.500000000 * (T3[8] + T3[11]) +
                                   (P2[3] * -0.500000000 * (T3[16] + T3[13]) +
                                    T3[12] * (P1[2] - P2[2])))))))) +
             (P3[2] * (V2[2] * (P1[0] * -0.500000000 * (T3[5] + T3[14]) +
                                (P1[1] * 0.500000000 * (T3[9] + T3[15]) +
                                 (P1[2] * 0.500000000 * (T3[13] + T3[16]) +
                                  (P2[0] * 0.500000000 * (T3[5] + T3[14]) +
                                   (P2[1] * -0.500000000 * (T3[9] + T3[15]) +
                                    (P2[2] * -0.500000000 * (T3[13] + T3[16]) +
                                     T3[17] * (P1[3] - P2[3]))))))) +
                       V2[5] * (P1[1] * -0.500000000 * (T3[6] + T3[3]) +
                                (P1[2] * -0.500000000 * (T3[10] + T3[4]) +
                                 (P1[3] * -0.500000000 * (T3[14] + T3[5]) +
                                  (P2[1] * 0.500000000 * (T3[6] + T3[3]) +
                                   (P2[2] * 0.500000000 * (T3[10] + T3[4]) +
                                    (P2[3] * 0.500000000 * (T3[14] + T3[5]) +
                                     T3[2] * (P1[0] - P2[0])))))))) +
              (+0.500000000 * (OM1 * P1[1] * (TMP71 + TMP73 - TMP70 - TMP72)) +
               P3[3] * (V2[2] * (P1[0] * 0.500000000 * (T3[4] + T3[10]) +
                                 (P1[1] * -0.500000000 * (T3[8] + T3[11]) +
                                  (P1[3] * -0.500000000 * (T3[16] + T3[13]) +
                                   (P2[0] * -0.500000000 * (T3[4] + T3[10]) +
                                    (P2[1] * 0.500000000 * (T3[8] + T3[11]) +
                                     (P2[3] * 0.500000000 * (T3[16] + T3[13]) +
                                      T3[12] * (P2[2] - P1[2]))))))) +
                        V2[4] * (P1[1] * 0.500000000 * (T3[6] + T3[3]) +
                                 (P1[2] * 0.500000000 * (T3[10] + T3[4]) +
                                  (P1[3] * 0.500000000 * (T3[14] + T3[5]) +
                                   (P2[1] * -0.500000000 * (T3[6] + T3[3]) +
                                    (P2[2] * -0.500000000 * (T3[10] + T3[4]) +
                                     (P2[3] * -0.500000000 * (T3[14] + T3[5]) +
                                      T3[2] * (P2[0] - P1[0])))))))))));
    V1[4] = denom * -2. * cI *
            (P3[0] * (V2[3] * (P1[0] * -0.500000000 * (T3[5] + T3[14]) +
                               (P1[1] * 0.500000000 * (T3[9] + T3[15]) +
                                (P1[2] * 0.500000000 * (T3[13] + T3[16]) +
                                 (P2[0] * 0.500000000 * (T3[5] + T3[14]) +
                                  (P2[1] * -0.500000000 * (T3[9] + T3[15]) +
                                   (P2[2] * -0.500000000 * (T3[13] + T3[16]) +
                                    T3[17] * (P1[3] - P2[3]))))))) +
                      V2[5] * (P1[0] * 0.500000000 * (T3[3] + T3[6]) +
                               (P1[2] * -0.500000000 * (T3[11] + T3[8]) +
                                (P1[3] * -0.500000000 * (T3[15] + T3[9]) +
                                 (P2[0] * -0.500000000 * (T3[3] + T3[6]) +
                                  (P2[2] * 0.500000000 * (T3[11] + T3[8]) +
                                   (P2[3] * 0.500000000 * (T3[15] + T3[9]) +
                                    T3[7] * (P2[1] - P1[1])))))))) +
             (P3[1] * (V2[2] * (P1[0] * 0.500000000 * (T3[5] + T3[14]) +
                                (P1[1] * -0.500000000 * (T3[9] + T3[15]) +
                                 (P1[2] * -0.500000000 * (T3[13] + T3[16]) +
                                  (P2[0] * -0.500000000 * (T3[5] + T3[14]) +
                                   (P2[1] * 0.500000000 * (T3[9] + T3[15]) +
                                    (P2[2] * 0.500000000 * (T3[13] + T3[16]) +
                                     T3[17] * (P2[3] - P1[3]))))))) +
                       V2[5] * (P1[1] * 0.500000000 * (T3[6] + T3[3]) +
                                (P1[2] * 0.500000000 * (T3[10] + T3[4]) +
                                 (P1[3] * 0.500000000 * (T3[14] + T3[5]) +
                                  (P2[1] * -0.500000000 * (T3[6] + T3[3]) +
                                   (P2[2] * -0.500000000 * (T3[10] + T3[4]) +
                                    (P2[3] * -0.500000000 * (T3[14] + T3[5]) +
                                     T3[2] * (P2[0] - P1[0])))))))) +
              (+0.500000000 * (OM1 * P1[2] * (TMP71 + TMP73 - TMP70 - TMP72)) +
               P3[3] * (V2[2] * (P1[0] * -0.500000000 * (T3[3] + T3[6]) +
                                 (P1[2] * 0.500000000 * (T3[11] + T3[8]) +
                                  (P1[3] * 0.500000000 * (T3[15] + T3[9]) +
                                   (P2[0] * 0.500000000 * (T3[3] + T3[6]) +
                                    (P2[2] * -0.500000000 * (T3[11] + T3[8]) +
                                     (P2[3] * -0.500000000 * (T3[15] + T3[9]) +
                                      T3[7] * (P1[1] - P2[1]))))))) +
                        V2[3] * (P1[1] * -0.500000000 * (T3[6] + T3[3]) +
                                 (P1[2] * -0.500000000 * (T3[10] + T3[4]) +
                                  (P1[3] * -0.500000000 * (T3[14] + T3[5]) +
                                   (P2[1] * 0.500000000 * (T3[6] + T3[3]) +
                                    (P2[2] * 0.500000000 * (T3[10] + T3[4]) +
                                     (P2[3] * 0.500000000 * (T3[14] + T3[5]) +
                                      T3[2] * (P1[0] - P2[0])))))))))));
    V1[5] = denom * -2. * cI *
            (P3[0] * (V2[3] * (P1[0] * 0.500000000 * (T3[4] + T3[10]) +
                               (P1[1] * -0.500000000 * (T3[8] + T3[11]) +
                                (P1[3] * -0.500000000 * (T3[16] + T3[13]) +
                                 (P2[0] * -0.500000000 * (T3[4] + T3[10]) +
                                  (P2[1] * 0.500000000 * (T3[8] + T3[11]) +
                                   (P2[3] * 0.500000000 * (T3[16] + T3[13]) +
                                    T3[12] * (P2[2] - P1[2]))))))) +
                      V2[4] * (P1[0] * -0.500000000 * (T3[3] + T3[6]) +
                               (P1[2] * 0.500000000 * (T3[11] + T3[8]) +
                                (P1[3] * 0.500000000 * (T3[15] + T3[9]) +
                                 (P2[0] * 0.500000000 * (T3[3] + T3[6]) +
                                  (P2[2] * -0.500000000 * (T3[11] + T3[8]) +
                                   (P2[3] * -0.500000000 * (T3[15] + T3[9]) +
                                    T3[7] * (P1[1] - P2[1])))))))) +
             (P3[1] * (V2[2] * (P1[0] * -0.500000000 * (T3[4] + T3[10]) +
                                (P1[1] * 0.500000000 * (T3[8] + T3[11]) +
                                 (P1[3] * 0.500000000 * (T3[16] + T3[13]) +
                                  (P2[0] * 0.500000000 * (T3[4] + T3[10]) +
                                   (P2[1] * -0.500000000 * (T3[8] + T3[11]) +
                                    (P2[3] * -0.500000000 * (T3[16] + T3[13]) +
                                     T3[12] * (P1[2] - P2[2]))))))) +
                       V2[4] * (P1[1] * -0.500000000 * (T3[6] + T3[3]) +
                                (P1[2] * -0.500000000 * (T3[10] + T3[4]) +
                                 (P1[3] * -0.500000000 * (T3[14] + T3[5]) +
                                  (P2[1] * 0.500000000 * (T3[6] + T3[3]) +
                                   (P2[2] * 0.500000000 * (T3[10] + T3[4]) +
                                    (P2[3] * 0.500000000 * (T3[14] + T3[5]) +
                                     T3[2] * (P1[0] - P2[0])))))))) +
              (+0.500000000 * (OM1 * P1[3] * (TMP71 + TMP73 - TMP70 - TMP72)) +
               P3[2] * (V2[2] * (P1[0] * 0.500000000 * (T3[3] + T3[6]) +
                                 (P1[2] * -0.500000000 * (T3[11] + T3[8]) +
                                  (P1[3] * -0.500000000 * (T3[15] + T3[9]) +
                                   (P2[0] * -0.500000000 * (T3[3] + T3[6]) +
                                    (P2[2] * 0.500000000 * (T3[11] + T3[8]) +
                                     (P2[3] * 0.500000000 * (T3[15] + T3[9]) +
                                      T3[7] * (P2[1] - P1[1]))))))) +
                        V2[3] * (P1[1] * 0.500000000 * (T3[6] + T3[3]) +
                                 (P1[2] * 0.500000000 * (T3[10] + T3[4]) +
                                  (P1[3] * 0.500000000 * (T3[14] + T3[5]) +
                                   (P2[1] * -0.500000000 * (T3[6] + T3[3]) +
                                    (P2[2] * -0.500000000 * (T3[10] + T3[4]) +
                                     (P2[3] * -0.500000000 * (T3[14] + T3[5]) +
                                      T3[2] * (P2[0] - P1[0])))))))))));
}

void VVT10_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
             double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP1;
    complex<double> TMP10;
    double P3[4];
    complex<double> TMP21;
    complex<double> TMP2;
    double P2[4];
    complex<double> TMP46;
    complex<double> TMP45;
    complex<double> TMP42;
    double P1[4];
    complex<double> TMP23;
    complex<double> TMP7;
    complex<double> denom;
    complex<double> TMP41;
    complex<double> TMP22;
    double OM1;
    complex<double> TMP74;
    OM1 = 0.;
    if (M1 != 0.)
        OM1 = 1. / pow(M1, 2);
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    P3[0] = T3[0].real();
    P3[1] = T3[1].real();
    P3[2] = T3[1].imag();
    P3[3] = T3[0].imag();
    V1[0] = +V2[0] + T3[0];
    V1[1] = +V2[1] + T3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP42 = (P2[0] * (P2[1] * -1. * (T3[3] + T3[6]) +
                      (P2[2] * -1. * (T3[4] + T3[10]) +
                       (P2[3] * -1. * (T3[5] + T3[14]) + P2[0] * T3[2]))) +
             (P2[1] * (P2[2] * (T3[8] + T3[11]) +
                       (P2[3] * (T3[9] + T3[15]) + P2[1] * T3[7])) +
              (P2[2] * (P2[3] * (T3[13] + T3[16]) + P2[2] * T3[12]) +
               P2[3] * P2[3] * T3[17])));
    TMP41 = (P1[0] * (P1[1] * -1. * (T3[6] + T3[3]) +
                      (P1[2] * -1. * (T3[10] + T3[4]) +
                       (P1[3] * -1. * (T3[14] + T3[5]) + P1[0] * T3[2]))) +
             (P1[1] * (P1[2] * (T3[11] + T3[8]) +
                       (P1[3] * (T3[15] + T3[9]) + P1[1] * T3[7])) +
              (P1[2] * (P1[3] * (T3[16] + T3[13]) + P1[2] * T3[12]) +
               P1[3] * P1[3] * T3[17])));
    TMP46 =
        (P2[0] * -1. *
             (V2[3] * T3[3] + V2[4] * T3[4] + V2[5] * T3[5] - V2[2] * T3[2]) +
         (P2[1] *
              (V2[3] * T3[7] + V2[4] * T3[8] + V2[5] * T3[9] - V2[2] * T3[6]) +
          (P2[2] * (V2[3] * T3[11] + V2[4] * T3[12] + V2[5] * T3[13] -
                    V2[2] * T3[10]) +
           P2[3] * (V2[3] * T3[15] + V2[4] * T3[16] + V2[5] * T3[17] -
                    V2[2] * T3[14]))));
    TMP21 =
        (P1[0] * -1. *
             (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] - P2[0] * T3[2]) +
         (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] * T3[15] -
                   P2[0] * T3[3]) +
          (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] + P2[3] * T3[16] -
                    P2[0] * T3[4]) +
           P1[3] * (P2[1] * T3[9] + P2[2] * T3[13] + P2[3] * T3[17] -
                    P2[0] * T3[5]))));
    TMP22 =
        (P1[0] * -1. *
             (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] - P2[0] * T3[2]) +
         (P1[1] *
              (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9] - P2[0] * T3[6]) +
          (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] * T3[13] -
                    P2[0] * T3[10]) +
           P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] + P2[3] * T3[17] -
                    P2[0] * T3[14]))));
    TMP23 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]);
    TMP74 = (P1[0] * (P1[1] * -1. * (T3[3] + T3[6]) +
                      (P1[2] * -1. * (T3[4] + T3[10]) +
                       (P1[3] * -1. * (T3[5] + T3[14]) + P1[0] * T3[2]))) +
             (P1[1] * (P1[2] * (T3[8] + T3[11]) +
                       (P1[3] * (T3[9] + T3[15]) + P1[1] * T3[7])) +
              (P1[2] * (P1[3] * (T3[13] + T3[16]) + P1[2] * T3[12]) +
               P1[3] * P1[3] * T3[17])));
    TMP45 =
        (P2[0] * -1. *
             (V2[3] * T3[6] + V2[4] * T3[10] + V2[5] * T3[14] - V2[2] * T3[2]) +
         (P2[1] * (V2[3] * T3[7] + V2[4] * T3[11] + V2[5] * T3[15] -
                   V2[2] * T3[3]) +
          (P2[2] * (V2[3] * T3[8] + V2[4] * T3[12] + V2[5] * T3[16] -
                    V2[2] * T3[4]) +
           P2[3] * (V2[3] * T3[9] + V2[4] * T3[13] + V2[5] * T3[17] -
                    V2[2] * T3[5]))));
    TMP7 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    TMP1 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    TMP10 = (P1[0] * P2[0] - P1[1] * P2[1] - P1[2] * P2[2] - P1[3] * P2[3]);
    TMP2 = (P3[0] * P2[0] - P3[1] * P2[1] - P3[2] * P2[2] - P3[3] * P2[3]);
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] =
        denom * 0.500000000 *
        (TMP10 * (TMP23 * (P1[0] * (OM1 * (-cI * (TMP74) + cI * (TMP41)) +
                                    2. * cI * (T3[2])) +
                           (P1[1] * -1. * (+cI * (T3[3] + T3[6])) +
                            (P1[2] * -1. * (+cI * (T3[4] + T3[10])) -
                             P1[3] * (+cI * (T3[5] + T3[14]))))) +
                  (V2[2] * 2. * (-cI * (TMP21 + TMP22) + cI * (TMP41 + TMP42)) +
                   P3[0] * (+cI * (TMP45 + TMP46)))) +
         (TMP7 * (TMP2 * (P1[0] * (OM1 * (-cI * (TMP41) + cI * (TMP74)) -
                                   2. * cI * (T3[2])) +
                          (P1[1] * (+cI * (T3[3] + T3[6])) +
                           (P1[2] * (+cI * (T3[4] + T3[10])) +
                            P1[3] * (+cI * (T3[5] + T3[14]))))) +
                  (P2[0] * 2. * (-cI * (TMP41 + TMP42) + cI * (TMP21 + TMP22)) -
                   2. * cI * (P3[0] * TMP42))) +
          (P2[0] * (TMP1 * -1. * (+cI * (TMP45 + TMP46)) -
                    2. * cI * (TMP23 * TMP41)) +
           2. * (V2[2] * (+cI * (TMP2 * TMP41 + TMP1 * TMP42))))));
    V1[3] =
        denom * 0.500000000 *
        (TMP10 * (TMP23 * (P1[1] * (OM1 * (-cI * (TMP74) + cI * (TMP41)) -
                                    2. * cI * (T3[7])) +
                           (P1[0] * (+cI * (T3[6] + T3[3])) +
                            (P1[2] * -1. * (+cI * (T3[8] + T3[11])) -
                             P1[3] * (+cI * (T3[9] + T3[15]))))) +
                  (V2[3] * 2. * (-cI * (TMP21 + TMP22) + cI * (TMP41 + TMP42)) +
                   P3[1] * (+cI * (TMP45 + TMP46)))) +
         (TMP7 * (TMP2 * (P1[1] * (OM1 * (-cI * (TMP41) + cI * (TMP74)) +
                                   2. * cI * (T3[7])) +
                          (P1[0] * -1. * (+cI * (T3[6] + T3[3])) +
                           (P1[2] * (+cI * (T3[8] + T3[11])) +
                            P1[3] * (+cI * (T3[9] + T3[15]))))) +
                  (P2[1] * 2. * (-cI * (TMP41 + TMP42) + cI * (TMP21 + TMP22)) -
                   2. * cI * (P3[1] * TMP42))) +
          (P2[1] * (TMP1 * -1. * (+cI * (TMP45 + TMP46)) -
                    2. * cI * (TMP23 * TMP41)) +
           2. * (V2[3] * (+cI * (TMP2 * TMP41 + TMP1 * TMP42))))));
    V1[4] =
        denom * 0.500000000 *
        (TMP10 * (TMP23 * (P1[2] * (OM1 * (-cI * (TMP74) + cI * (TMP41)) -
                                    2. * cI * (T3[12])) +
                           (P1[0] * (+cI * (T3[10] + T3[4])) +
                            (P1[1] * -1. * (+cI * (T3[11] + T3[8])) -
                             P1[3] * (+cI * (T3[13] + T3[16]))))) +
                  (V2[4] * 2. * (-cI * (TMP21 + TMP22) + cI * (TMP41 + TMP42)) +
                   P3[2] * (+cI * (TMP45 + TMP46)))) +
         (TMP7 * (TMP2 * (P1[2] * (OM1 * (-cI * (TMP41) + cI * (TMP74)) +
                                   2. * cI * (T3[12])) +
                          (P1[0] * -1. * (+cI * (T3[10] + T3[4])) +
                           (P1[1] * (+cI * (T3[11] + T3[8])) +
                            P1[3] * (+cI * (T3[13] + T3[16]))))) +
                  (P2[2] * 2. * (-cI * (TMP41 + TMP42) + cI * (TMP21 + TMP22)) -
                   2. * cI * (P3[2] * TMP42))) +
          (P2[2] * (TMP1 * -1. * (+cI * (TMP45 + TMP46)) -
                    2. * cI * (TMP23 * TMP41)) +
           2. * (V2[4] * (+cI * (TMP2 * TMP41 + TMP1 * TMP42))))));
    V1[5] =
        denom * 0.500000000 *
        (TMP10 * (TMP23 * (P1[3] * (OM1 * (-cI * (TMP74) + cI * (TMP41)) -
                                    2. * cI * (T3[17])) +
                           (P1[0] * (+cI * (T3[14] + T3[5])) +
                            (P1[1] * -1. * (+cI * (T3[15] + T3[9])) -
                             P1[2] * (+cI * (T3[16] + T3[13]))))) +
                  (V2[5] * 2. * (-cI * (TMP21 + TMP22) + cI * (TMP41 + TMP42)) +
                   P3[3] * (+cI * (TMP45 + TMP46)))) +
         (TMP7 * (TMP2 * (P1[3] * (OM1 * (-cI * (TMP41) + cI * (TMP74)) +
                                   2. * cI * (T3[17])) +
                          (P1[0] * -1. * (+cI * (T3[14] + T3[5])) +
                           (P1[1] * (+cI * (T3[15] + T3[9])) +
                            P1[2] * (+cI * (T3[16] + T3[13]))))) +
                  (P2[3] * 2. * (-cI * (TMP41 + TMP42) + cI * (TMP21 + TMP22)) -
                   2. * cI * (P3[3] * TMP42))) +
          (P2[3] * (TMP1 * -1. * (+cI * (TMP45 + TMP46)) -
                    2. * cI * (TMP23 * TMP41)) +
           2. * (V2[5] * (+cI * (TMP2 * TMP41 + TMP1 * TMP42))))));
}

void VVT10_11_12_13_2_3_6_7_8_9_1(complex<double> V2[], complex<double> T3[],
                                  complex<double> COUP1, complex<double> COUP2,
                                  complex<double> COUP3, complex<double> COUP4,
                                  complex<double> COUP5, complex<double> COUP6,
                                  complex<double> COUP7, complex<double> COUP8,
                                  complex<double> COUP9, complex<double> COUP10,
                                  double M1, double W1, complex<double> V1[])
{
    //   complex<double> cI = complex<double> (0., 1.);
    //   double P3[4];
    complex<double> Vtmp[6];
    //   double P2[4];
    //   double P1[4];
    complex<double> denom;
    int i;
    //   double OM1;
    VVT10_1(V2, T3, COUP1, M1, W1, V1);
    VVT11_1(V2, T3, COUP2, M1, W1, Vtmp);
    i = 2;
    while (i < 6) {
        V1[i] = V1[i] + Vtmp[i];
        i++;
    }
    VVT12_1(V2, T3, COUP3, M1, W1, Vtmp);
    i = 2;
    while (i < 6) {
        V1[i] = V1[i] + Vtmp[i];
        i++;
    }
    VVT13_1(V2, T3, COUP4, M1, W1, Vtmp);
    i = 2;
    while (i < 6) {
        V1[i] = V1[i] + Vtmp[i];
        i++;
    }
    VVT2_1(V2, T3, COUP5, M1, W1, Vtmp);
    i = 2;
    while (i < 6) {
        V1[i] = V1[i] + Vtmp[i];
        i++;
    }
    VVT3_1(V2, T3, COUP6, M1, W1, Vtmp);
    i = 2;
    while (i < 6) {
        V1[i] = V1[i] + Vtmp[i];
        i++;
    }
    VVT6_1(V2, T3, COUP7, M1, W1, Vtmp);
    i = 2;
    while (i < 6) {
        V1[i] = V1[i] + Vtmp[i];
        i++;
    }
    VVT7_1(V2, T3, COUP8, M1, W1, Vtmp);
    i = 2;
    while (i < 6) {
        V1[i] = V1[i] + Vtmp[i];
        i++;
    }
    VVT8_1(V2, T3, COUP9, M1, W1, Vtmp);
    i = 2;
    while (i < 6) {
        V1[i] = V1[i] + Vtmp[i];
        i++;
    }
    VVT9_1(V2, T3, COUP10, M1, W1, Vtmp);
    i = 2;
    while (i < 6) {
        V1[i] = V1[i] + Vtmp[i];
        i++;
    }
}

void VVT9_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
            double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP1;
    double P1[4];
    double P2[4];
    complex<double> TMP23;
    double P3[4];
    complex<double> TMP21;
    complex<double> denom;
    complex<double> TMP28;
    complex<double> TMP27;
    complex<double> TMP65;
    double OM1;
    OM1 = 0.;
    if (M1 != 0.)
        OM1 = 1. / pow(M1, 2);
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    P3[0] = T3[0].real();
    P3[1] = T3[1].real();
    P3[2] = T3[1].imag();
    P3[3] = T3[0].imag();
    V1[0] = +V2[0] + T3[0];
    V1[1] = +V2[1] + T3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP27 =
        (P1[0] * -1. *
             (V2[3] * T3[6] + V2[4] * T3[10] + V2[5] * T3[14] - V2[2] * T3[2]) +
         (P1[1] * (V2[3] * T3[7] + V2[4] * T3[11] + V2[5] * T3[15] -
                   V2[2] * T3[3]) +
          (P1[2] * (V2[3] * T3[8] + V2[4] * T3[12] + V2[5] * T3[16] -
                    V2[2] * T3[4]) +
           P1[3] * (V2[3] * T3[9] + V2[4] * T3[13] + V2[5] * T3[17] -
                    V2[2] * T3[5]))));
    TMP21 =
        (P1[0] * -1. *
             (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] - P2[0] * T3[2]) +
         (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] * T3[15] -
                   P2[0] * T3[3]) +
          (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] + P2[3] * T3[16] -
                    P2[0] * T3[4]) +
           P1[3] * (P2[1] * T3[9] + P2[2] * T3[13] + P2[3] * T3[17] -
                    P2[0] * T3[5]))));
    TMP23 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]);
    TMP28 =
        (P1[0] * -1. *
             (V2[3] * T3[3] + V2[4] * T3[4] + V2[5] * T3[5] - V2[2] * T3[2]) +
         (P1[1] *
              (V2[3] * T3[7] + V2[4] * T3[8] + V2[5] * T3[9] - V2[2] * T3[6]) +
          (P1[2] * (V2[3] * T3[11] + V2[4] * T3[12] + V2[5] * T3[13] -
                    V2[2] * T3[10]) +
           P1[3] * (V2[3] * T3[15] + V2[4] * T3[16] + V2[5] * T3[17] -
                    V2[2] * T3[14]))));
    TMP65 =
        (P1[0] * -1. *
             (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] - P2[0] * T3[2]) +
         (P1[1] *
              (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9] - P2[0] * T3[6]) +
          (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] * T3[13] -
                    P2[0] * T3[10]) +
           P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] + P2[3] * T3[17] -
                    P2[0] * T3[14]))));
    TMP1 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] =
        denom * -cI *
        (TMP23 * (OM1 * -P1[0] * (TMP65 + TMP21) +
                  (P2[1] * -1. * (T3[3] + T3[6]) +
                   (P2[2] * -1. * (T3[4] + T3[10]) +
                    (P2[3] * -1. * (T3[5] + T3[14]) + 2. * (P2[0] * T3[2]))))) +
         (OM1 * -P1[0] * TMP1 * (TMP27 + TMP28) + P3[0] * (TMP27 + TMP28)));
    V1[3] = denom * cI *
            (TMP23 * (OM1 * P1[1] * (TMP65 + TMP21) +
                      (P2[0] * -1. * (T3[6] + T3[3]) +
                       (P2[2] * (T3[8] + T3[11]) +
                        (P2[3] * (T3[9] + T3[15]) + 2. * (P2[1] * T3[7]))))) +
             (OM1 * P1[1] * TMP1 * (TMP27 + TMP28) - P3[1] * (TMP27 + TMP28)));
    V1[4] = denom * cI *
            (TMP23 * (OM1 * P1[2] * (TMP65 + TMP21) +
                      (P2[0] * -1. * (T3[10] + T3[4]) +
                       (P2[1] * (T3[11] + T3[8]) +
                        (P2[3] * (T3[13] + T3[16]) + 2. * (P2[2] * T3[12]))))) +
             (OM1 * P1[2] * TMP1 * (TMP27 + TMP28) - P3[2] * (TMP27 + TMP28)));
    V1[5] = denom * cI *
            (TMP23 * (OM1 * P1[3] * (TMP65 + TMP21) +
                      (P2[0] * -1. * (T3[14] + T3[5]) +
                       (P2[1] * (T3[15] + T3[9]) +
                        (P2[2] * (T3[16] + T3[13]) + 2. * (P2[3] * T3[17]))))) +
             (OM1 * P1[3] * TMP1 * (TMP27 + TMP28) - P3[3] * (TMP27 + TMP28)));
}

void VVT2_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
            double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    complex<double> TMP22;
    double P2[4];
    complex<double> TMP21;
    complex<double> denom;
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    V1[0] = +V2[0] + T3[0];
    V1[1] = +V2[1] + T3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP21 =
        (P1[0] * -1. *
             (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] - P2[0] * T3[2]) +
         (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] * T3[15] -
                   P2[0] * T3[3]) +
          (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] + P2[3] * T3[16] -
                    P2[0] * T3[4]) +
           P1[3] * (P2[1] * T3[9] + P2[2] * T3[13] + P2[3] * T3[17] -
                    P2[0] * T3[5]))));
    TMP22 =
        (P1[0] * -1. *
             (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] - P2[0] * T3[2]) +
         (P1[1] *
              (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9] - P2[0] * T3[6]) +
          (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] * T3[13] -
                    P2[0] * T3[10]) +
           P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] + P2[3] * T3[17] -
                    P2[0] * T3[14]))));
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] = denom * -2. * cI *
            (TMP21 * (P1[1] * (P2[3] * V2[4] - P2[2] * V2[5]) +
                      (P1[2] * (P2[1] * V2[5] - P2[3] * V2[3]) +
                       P1[3] * (P2[2] * V2[3] - P2[1] * V2[4]))) +
             TMP22 * (P1[1] * (P2[3] * V2[4] - P2[2] * V2[5]) +
                      (P1[2] * (P2[1] * V2[5] - P2[3] * V2[3]) +
                       P1[3] * (P2[2] * V2[3] - P2[1] * V2[4]))));
    V1[3] = denom * 2. * cI *
            (TMP21 * (P1[0] * (P2[2] * V2[5] - P2[3] * V2[4]) +
                      (P1[2] * (P2[3] * V2[2] - P2[0] * V2[5]) +
                       P1[3] * (P2[0] * V2[4] - P2[2] * V2[2]))) +
             TMP22 * (P1[0] * (P2[2] * V2[5] - P2[3] * V2[4]) +
                      (P1[2] * (P2[3] * V2[2] - P2[0] * V2[5]) +
                       P1[3] * (P2[0] * V2[4] - P2[2] * V2[2]))));
    V1[4] = denom * 2. * cI *
            (TMP21 * (P1[0] * (P2[3] * V2[3] - P2[1] * V2[5]) +
                      (P1[1] * (P2[0] * V2[5] - P2[3] * V2[2]) +
                       P1[3] * (P2[1] * V2[2] - P2[0] * V2[3]))) +
             TMP22 * (P1[0] * (P2[3] * V2[3] - P2[1] * V2[5]) +
                      (P1[1] * (P2[0] * V2[5] - P2[3] * V2[2]) +
                       P1[3] * (P2[1] * V2[2] - P2[0] * V2[3]))));
    V1[5] = denom * 2. * cI *
            (TMP21 * (P1[0] * (P2[1] * V2[4] - P2[2] * V2[3]) +
                      (P1[1] * (P2[2] * V2[2] - P2[0] * V2[4]) +
                       P1[2] * (P2[0] * V2[3] - P2[1] * V2[2]))) +
             TMP22 * (P1[0] * (P2[1] * V2[4] - P2[2] * V2[3]) +
                      (P1[1] * (P2[2] * V2[2] - P2[0] * V2[4]) +
                       P1[2] * (P2[0] * V2[3] - P2[1] * V2[2]))));
}

void VVT7_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
            double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    complex<double> TMP22;
    double P2[4];
    complex<double> TMP7;
    complex<double> TMP21;
    complex<double> denom;
    double OM1;
    OM1 = 0.;
    if (M1 != 0.)
        OM1 = 1. / pow(M1, 2);
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    V1[0] = +V2[0] + T3[0];
    V1[1] = +V2[1] + T3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP7 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    TMP21 =
        (P1[0] * -1. *
             (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] - P2[0] * T3[2]) +
         (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] * T3[15] -
                   P2[0] * T3[3]) +
          (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] + P2[3] * T3[16] -
                    P2[0] * T3[4]) +
           P1[3] * (P2[1] * T3[9] + P2[2] * T3[13] + P2[3] * T3[17] -
                    P2[0] * T3[5]))));
    TMP22 =
        (P1[0] * -1. *
             (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] - P2[0] * T3[2]) +
         (P1[1] *
              (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9] - P2[0] * T3[6]) +
          (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] * T3[13] -
                    P2[0] * T3[10]) +
           P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] + P2[3] * T3[17] -
                    P2[0] * T3[14]))));
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] = denom * (OM1 * P1[0] * TMP7 * (+cI * (TMP21 + TMP22)) -
                     V2[2] * (+cI * (TMP21 + TMP22)));
    V1[3] = denom * (OM1 * P1[1] * TMP7 * (+cI * (TMP21 + TMP22)) -
                     V2[3] * (+cI * (TMP21 + TMP22)));
    V1[4] = denom * (OM1 * P1[2] * TMP7 * (+cI * (TMP21 + TMP22)) -
                     V2[4] * (+cI * (TMP21 + TMP22)));
    V1[5] = denom * (OM1 * P1[3] * TMP7 * (+cI * (TMP21 + TMP22)) -
                     V2[5] * (+cI * (TMP21 + TMP22)));
}

void FFT2_3(complex<double> F1[], complex<double> F2[], complex<double> COUP,
            double M3, double W3, complex<double> T3[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP2;
    complex<double> TMP37;
    double P1[4];
    double P2[4];
    double P3[4];
    complex<double> TMP20;
    double OM3;
    complex<double> denom;
    complex<double> TMP1;
    complex<double> TMP38;
    P1[0] = F1[0].real();
    P1[1] = F1[1].real();
    P1[2] = F1[1].imag();
    P1[3] = F1[0].imag();
    P2[0] = F2[0].real();
    P2[1] = F2[1].real();
    P2[2] = F2[1].imag();
    P2[3] = F2[0].imag();
    OM3 = 0.;
    if (M3 != 0.)
        OM3 = 1. / pow(M3, 2);
    T3[0] = +F1[0] + F2[0];
    T3[1] = +F1[1] + F2[1];
    P3[0] = -T3[0].real();
    P3[1] = -T3[1].real();
    P3[2] = -T3[1].imag();
    P3[3] = -T3[0].imag();
    TMP37 =
        (F1[2] * (F2[4] * (P1[0] + P1[3]) + F2[5] * (P1[1] + cI * (P1[2]))) +
         (F1[3] * (F2[4] * (P1[1] - cI * (P1[2])) + F2[5] * (P1[0] - P1[3])) +
          (F1[4] * (F2[2] * (P1[0] - P1[3]) - F2[3] * (P1[1] + cI * (P1[2]))) +
           F1[5] *
               (F2[2] * (+cI * (P1[2]) - P1[1]) + F2[3] * (P1[0] + P1[3])))));
    TMP20 =
        (F1[2] * (F2[4] * (P3[0] + P3[3]) + F2[5] * (P3[1] + cI * (P3[2]))) +
         (F1[3] * (F2[4] * (P3[1] - cI * (P3[2])) + F2[5] * (P3[0] - P3[3])) +
          (F1[4] * (F2[2] * (P3[0] - P3[3]) - F2[3] * (P3[1] + cI * (P3[2]))) +
           F1[5] *
               (F2[2] * (+cI * (P3[2]) - P3[1]) + F2[3] * (P3[0] + P3[3])))));
    TMP38 =
        (F1[2] * (F2[4] * (P2[0] + P2[3]) + F2[5] * (P2[1] + cI * (P2[2]))) +
         (F1[3] * (F2[4] * (P2[1] - cI * (P2[2])) + F2[5] * (P2[0] - P2[3])) +
          (F1[4] * (F2[2] * (P2[0] - P2[3]) - F2[3] * (P2[1] + cI * (P2[2]))) +
           F1[5] *
               (F2[2] * (+cI * (P2[2]) - P2[1]) + F2[3] * (P2[0] + P2[3])))));
    TMP1 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    TMP2 = (P3[0] * P2[0] - P3[1] * P2[1] - P3[2] * P2[2] - P3[3] * P2[3]);
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    T3[2] =
        denom * 2. * cI *
        (OM3 * (P3[0] *
                    (TMP1 * -1. *
                         (F2[4] * F1[2] + F2[5] * F1[3] + F2[2] * F1[4] +
                          F2[3] * F1[5] - 0.666666667 * (P3[0] * OM3 * TMP20)) +
                     (TMP2 * (F2[4] * F1[2] + F2[5] * F1[3] + F2[2] * F1[4] +
                              F2[3] * F1[5] -
                              0.666666667 * (P3[0] * OM3 * TMP20)) +
                      (P3[0] * 0.333333333 * (TMP37 - TMP38) +
                       TMP20 * (P2[0] - P1[0])))) +
                0.333333333 * (TMP20 * (TMP1 - TMP2))) +
         (P1[0] *
              (F2[4] * F1[2] + F2[5] * F1[3] + F2[2] * F1[4] + F2[3] * F1[5]) +
          (P2[0] * -1. *
               (F2[4] * F1[2] + F2[5] * F1[3] + F2[2] * F1[4] + F2[3] * F1[5]) +
           (-0.333333333 * (TMP37) + 0.333333333 * (TMP38)))));
    T3[6] = denom * cI *
            (OM3 * (P3[0] * (TMP1 * (F2[5] * F1[2] + F2[4] * F1[3] +
                                     1.333333333 * (P3[1] * OM3 * TMP20) -
                                     F2[3] * F1[4] - F2[2] * F1[5]) +
                             (TMP2 * -1. *
                                  (F2[5] * F1[2] + F2[4] * F1[3] +
                                   1.333333333 * (P3[1] * OM3 * TMP20) -
                                   F2[3] * F1[4] - F2[2] * F1[5]) +
                              (P3[1] * 0.666666667 * (TMP37 - TMP38) +
                               TMP20 * (P2[1] - P1[1])))) +
                    P3[1] * (TMP1 * -1. *
                                 (F2[4] * F1[2] + F2[5] * F1[3] +
                                  F2[2] * F1[4] + F2[3] * F1[5]) +
                             (TMP2 * (F2[4] * F1[2] + F2[5] * F1[3] +
                                      F2[2] * F1[4] + F2[3] * F1[5]) +
                              TMP20 * (P2[0] - P1[0])))) +
             (F1[2] * (F2[4] * (P1[1] - P2[1]) + F2[5] * (P2[0] - P1[0])) +
              (F1[3] * (F2[4] * (P2[0] - P1[0]) + F2[5] * (P1[1] - P2[1])) +
               (F1[4] * (F2[2] * (P1[1] - P2[1]) + F2[3] * (P1[0] - P2[0])) +
                F1[5] * (F2[2] * (P1[0] - P2[0]) + F2[3] * (P1[1] - P2[1]))))));
    T3[10] = denom * cI *
             (OM3 * (P3[0] * (TMP1 * (-cI * (F2[4] * F1[3] + F2[3] * F1[4]) +
                                      cI * (F2[5] * F1[2] + F2[2] * F1[5]) +
                                      1.333333333 * (P3[2] * OM3 * TMP20)) +
                              (TMP2 * -1. *
                                   (-cI * (F2[4] * F1[3] + F2[3] * F1[4]) +
                                    cI * (F2[5] * F1[2] + F2[2] * F1[5]) +
                                    1.333333333 * (P3[2] * OM3 * TMP20)) +
                               (P3[2] * 0.666666667 * (TMP37 - TMP38) +
                                TMP20 * (P2[2] - P1[2])))) +
                     P3[2] * (TMP1 * -1. *
                                  (F2[4] * F1[2] + F2[5] * F1[3] +
                                   F2[2] * F1[4] + F2[3] * F1[5]) +
                              (TMP2 * (F2[4] * F1[2] + F2[5] * F1[3] +
                                       F2[2] * F1[4] + F2[3] * F1[5]) +
                               TMP20 * (P2[0] - P1[0])))) +
              (F1[2] * (F2[4] * (P1[2] - P2[2]) +
                        F2[5] * (-cI * (P1[0]) + cI * (P2[0]))) +
               (F1[3] * (F2[4] * (-cI * (P2[0]) + cI * (P1[0])) +
                         F2[5] * (P1[2] - P2[2])) +
                (F1[4] * (F2[2] * (P1[2] - P2[2]) +
                          F2[3] * (-cI * (P2[0]) + cI * (P1[0]))) +
                 F1[5] * (F2[2] * (-cI * (P1[0]) + cI * (P2[0])) +
                          F2[3] * (P1[2] - P2[2]))))));
    T3[14] = denom * cI *
             (OM3 * (P3[0] * (TMP1 * (F2[4] * F1[2] + F2[3] * F1[5] +
                                      1.333333333 * (P3[3] * OM3 * TMP20) -
                                      F2[5] * F1[3] - F2[2] * F1[4]) +
                              (TMP2 * -1. *
                                   (F2[4] * F1[2] + F2[3] * F1[5] +
                                    1.333333333 * (P3[3] * OM3 * TMP20) -
                                    F2[5] * F1[3] - F2[2] * F1[4]) +
                               (P3[3] * 0.666666667 * (TMP37 - TMP38) +
                                TMP20 * (P2[3] - P1[3])))) +
                     P3[3] * (TMP1 * -1. *
                                  (F2[4] * F1[2] + F2[5] * F1[3] +
                                   F2[2] * F1[4] + F2[3] * F1[5]) +
                              (TMP2 * (F2[4] * F1[2] + F2[5] * F1[3] +
                                       F2[2] * F1[4] + F2[3] * F1[5]) +
                               TMP20 * (P2[0] - P1[0])))) +
              (F1[2] * F2[4] * (P1[3] + P2[0] - P1[0] - P2[3]) +
               (F1[3] * F2[5] * (P1[0] + P1[3] - P2[0] - P2[3]) +
                (F1[4] * F2[2] * (P1[0] + P1[3] - P2[0] - P2[3]) +
                 F1[5] * F2[3] * (P1[3] + P2[0] - P1[0] - P2[3])))));
    T3[3] = denom * cI *
            (OM3 * (P3[0] * (TMP1 * (F2[5] * F1[2] + F2[4] * F1[3] +
                                     1.333333333 * (P3[1] * OM3 * TMP20) -
                                     F2[3] * F1[4] - F2[2] * F1[5]) +
                             (TMP2 * -1. *
                                  (F2[5] * F1[2] + F2[4] * F1[3] +
                                   1.333333333 * (P3[1] * OM3 * TMP20) -
                                   F2[3] * F1[4] - F2[2] * F1[5]) +
                              (P3[1] * 0.666666667 * (TMP37 - TMP38) +
                               TMP20 * (P2[1] - P1[1])))) +
                    P3[1] * (TMP1 * -1. *
                                 (F2[4] * F1[2] + F2[5] * F1[3] +
                                  F2[2] * F1[4] + F2[3] * F1[5]) +
                             (TMP2 * (F2[4] * F1[2] + F2[5] * F1[3] +
                                      F2[2] * F1[4] + F2[3] * F1[5]) +
                              TMP20 * (P2[0] - P1[0])))) +
             (F1[2] * (F2[4] * (P1[1] - P2[1]) + F2[5] * (P2[0] - P1[0])) +
              (F1[3] * (F2[4] * (P2[0] - P1[0]) + F2[5] * (P1[1] - P2[1])) +
               (F1[4] * (F2[2] * (P1[1] - P2[1]) + F2[3] * (P1[0] - P2[0])) +
                F1[5] * (F2[2] * (P1[0] - P2[0]) + F2[3] * (P1[1] - P2[1]))))));
    T3[7] =
        denom * 2. * cI *
        (OM3 * (P3[1] * (TMP1 * (F2[5] * F1[2] + F2[4] * F1[3] +
                                 0.666666667 * (P3[1] * OM3 * TMP20) -
                                 F2[3] * F1[4] - F2[2] * F1[5]) +
                         (TMP2 * -1. *
                              (F2[5] * F1[2] + F2[4] * F1[3] +
                               0.666666667 * (P3[1] * OM3 * TMP20) -
                               F2[3] * F1[4] - F2[2] * F1[5]) +
                          (P3[1] * 0.333333333 * (TMP37 - TMP38) +
                           TMP20 * (P2[1] - P1[1])))) +
                0.333333333 * (TMP20 * (TMP2 - TMP1))) +
         (P1[1] *
              (F2[3] * F1[4] + F2[2] * F1[5] - F2[5] * F1[2] - F2[4] * F1[3]) +
          (P2[1] *
               (F2[5] * F1[2] + F2[4] * F1[3] - F2[3] * F1[4] - F2[2] * F1[5]) +
           (-0.333333333 * (TMP38) + 0.333333333 * (TMP37)))));
    T3[11] =
        denom * cI *
        (OM3 * (P3[1] * (TMP1 * (-cI * (F2[4] * F1[3] + F2[3] * F1[4]) +
                                 cI * (F2[5] * F1[2] + F2[2] * F1[5]) +
                                 1.333333333 * (P3[2] * OM3 * TMP20)) +
                         (TMP2 * -1. *
                              (-cI * (F2[4] * F1[3] + F2[3] * F1[4]) +
                               cI * (F2[5] * F1[2] + F2[2] * F1[5]) +
                               1.333333333 * (P3[2] * OM3 * TMP20)) +
                          (P3[2] * 0.666666667 * (TMP37 - TMP38) +
                           TMP20 * (P2[2] - P1[2])))) +
                P3[2] * (TMP1 * (F2[5] * F1[2] + F2[4] * F1[3] - F2[3] * F1[4] -
                                 F2[2] * F1[5]) +
                         (TMP2 * (F2[3] * F1[4] + F2[2] * F1[5] -
                                  F2[5] * F1[2] - F2[4] * F1[3]) +
                          TMP20 * (P2[1] - P1[1])))) +
         (F1[2] * F2[5] * (P2[2] - cI * (P1[1]) + cI * (P2[1]) - P1[2]) +
          (F1[3] * F2[4] * (P2[2] - cI * (P2[1]) + cI * (P1[1]) - P1[2]) +
           (F1[4] * F2[3] * (P1[2] - cI * (P2[1]) + cI * (P1[1]) - P2[2]) +
            F1[5] * F2[2] * (P1[2] - cI * (P1[1]) + cI * (P2[1]) - P2[2])))));
    T3[15] =
        denom * cI *
        (OM3 * (P3[1] * (TMP1 * (F2[4] * F1[2] + F2[3] * F1[5] +
                                 1.333333333 * (P3[3] * OM3 * TMP20) -
                                 F2[5] * F1[3] - F2[2] * F1[4]) +
                         (TMP2 * -1. *
                              (F2[4] * F1[2] + F2[3] * F1[5] +
                               1.333333333 * (P3[3] * OM3 * TMP20) -
                               F2[5] * F1[3] - F2[2] * F1[4]) +
                          (P3[3] * 0.666666667 * (TMP37 - TMP38) +
                           TMP20 * (P2[3] - P1[3])))) +
                P3[3] * (TMP1 * (F2[5] * F1[2] + F2[4] * F1[3] - F2[3] * F1[4] -
                                 F2[2] * F1[5]) +
                         (TMP2 * (F2[3] * F1[4] + F2[2] * F1[5] -
                                  F2[5] * F1[2] - F2[4] * F1[3]) +
                          TMP20 * (P2[1] - P1[1])))) +
         (F1[2] * (F2[4] * (P2[1] - P1[1]) + F2[5] * (P2[3] - P1[3])) +
          (F1[3] * (F2[4] * (P2[3] - P1[3]) + F2[5] * (P1[1] - P2[1])) +
           (F1[4] * (F2[2] * (P1[1] - P2[1]) + F2[3] * (P1[3] - P2[3])) +
            F1[5] * (F2[2] * (P1[3] - P2[3]) + F2[3] * (P2[1] - P1[1]))))));
    T3[4] = denom * cI *
            (OM3 * (P3[0] * (TMP1 * (-cI * (F2[4] * F1[3] + F2[3] * F1[4]) +
                                     cI * (F2[5] * F1[2] + F2[2] * F1[5]) +
                                     1.333333333 * (P3[2] * OM3 * TMP20)) +
                             (TMP2 * -1. *
                                  (-cI * (F2[4] * F1[3] + F2[3] * F1[4]) +
                                   cI * (F2[5] * F1[2] + F2[2] * F1[5]) +
                                   1.333333333 * (P3[2] * OM3 * TMP20)) +
                              (P3[2] * 0.666666667 * (TMP37 - TMP38) +
                               TMP20 * (P2[2] - P1[2])))) +
                    P3[2] * (TMP1 * -1. *
                                 (F2[4] * F1[2] + F2[5] * F1[3] +
                                  F2[2] * F1[4] + F2[3] * F1[5]) +
                             (TMP2 * (F2[4] * F1[2] + F2[5] * F1[3] +
                                      F2[2] * F1[4] + F2[3] * F1[5]) +
                              TMP20 * (P2[0] - P1[0])))) +
             (F1[2] * (F2[4] * (P1[2] - P2[2]) +
                       F2[5] * (-cI * (P1[0]) + cI * (P2[0]))) +
              (F1[3] * (F2[4] * (-cI * (P2[0]) + cI * (P1[0])) +
                        F2[5] * (P1[2] - P2[2])) +
               (F1[4] * (F2[2] * (P1[2] - P2[2]) +
                         F2[3] * (-cI * (P2[0]) + cI * (P1[0]))) +
                F1[5] * (F2[2] * (-cI * (P1[0]) + cI * (P2[0])) +
                         F2[3] * (P1[2] - P2[2]))))));
    T3[8] =
        denom * cI *
        (OM3 * (P3[1] * (TMP1 * (-cI * (F2[4] * F1[3] + F2[3] * F1[4]) +
                                 cI * (F2[5] * F1[2] + F2[2] * F1[5]) +
                                 1.333333333 * (P3[2] * OM3 * TMP20)) +
                         (TMP2 * -1. *
                              (-cI * (F2[4] * F1[3] + F2[3] * F1[4]) +
                               cI * (F2[5] * F1[2] + F2[2] * F1[5]) +
                               1.333333333 * (P3[2] * OM3 * TMP20)) +
                          (P3[2] * 0.666666667 * (TMP37 - TMP38) +
                           TMP20 * (P2[2] - P1[2])))) +
                P3[2] * (TMP1 * (F2[5] * F1[2] + F2[4] * F1[3] - F2[3] * F1[4] -
                                 F2[2] * F1[5]) +
                         (TMP2 * (F2[3] * F1[4] + F2[2] * F1[5] -
                                  F2[5] * F1[2] - F2[4] * F1[3]) +
                          TMP20 * (P2[1] - P1[1])))) +
         (F1[2] * F2[5] * (P2[2] - cI * (P1[1]) + cI * (P2[1]) - P1[2]) +
          (F1[3] * F2[4] * (P2[2] - cI * (P2[1]) + cI * (P1[1]) - P1[2]) +
           (F1[4] * F2[3] * (P1[2] - cI * (P2[1]) + cI * (P1[1]) - P2[2]) +
            F1[5] * F2[2] * (P1[2] - cI * (P1[1]) + cI * (P2[1]) - P2[2])))));
    T3[12] = denom * 2. * cI *
             (OM3 * (P3[2] * (TMP1 * (-cI * (F2[4] * F1[3] + F2[3] * F1[4]) +
                                      cI * (F2[5] * F1[2] + F2[2] * F1[5]) +
                                      0.666666667 * (P3[2] * OM3 * TMP20)) +
                              (TMP2 * -1. *
                                   (-cI * (F2[4] * F1[3] + F2[3] * F1[4]) +
                                    cI * (F2[5] * F1[2] + F2[2] * F1[5]) +
                                    0.666666667 * (P3[2] * OM3 * TMP20)) +
                               (P3[2] * 0.333333333 * (TMP37 - TMP38) +
                                TMP20 * (P2[2] - P1[2])))) +
                     0.333333333 * (TMP20 * (TMP2 - TMP1))) +
              (P1[2] * (-cI * (F2[5] * F1[2] + F2[2] * F1[5]) +
                        cI * (F2[4] * F1[3] + F2[3] * F1[4])) +
               (P2[2] * (-cI * (F2[4] * F1[3] + F2[3] * F1[4]) +
                         cI * (F2[5] * F1[2] + F2[2] * F1[5])) +
                (-0.333333333 * (TMP38) + 0.333333333 * (TMP37)))));
    T3[16] = denom * cI *
             (OM3 * (P3[2] * (TMP1 * (F2[4] * F1[2] + F2[3] * F1[5] +
                                      1.333333333 * (P3[3] * OM3 * TMP20) -
                                      F2[5] * F1[3] - F2[2] * F1[4]) +
                              (TMP2 * -1. *
                                   (F2[4] * F1[2] + F2[3] * F1[5] +
                                    1.333333333 * (P3[3] * OM3 * TMP20) -
                                    F2[5] * F1[3] - F2[2] * F1[4]) +
                               (P3[3] * 0.666666667 * (TMP37 - TMP38) +
                                TMP20 * (P2[3] - P1[3])))) +
                     P3[3] * (TMP1 * (-cI * (F2[4] * F1[3] + F2[3] * F1[4]) +
                                      cI * (F2[5] * F1[2] + F2[2] * F1[5])) +
                              (TMP2 * (-cI * (F2[5] * F1[2] + F2[2] * F1[5]) +
                                       cI * (F2[4] * F1[3] + F2[3] * F1[4])) +
                               TMP20 * (P2[2] - P1[2])))) +
              (F1[2] * (F2[4] * (P2[2] - P1[2]) +
                        F2[5] * (-cI * (P1[3]) + cI * (P2[3]))) +
               (F1[3] * (F2[4] * (-cI * (P2[3]) + cI * (P1[3])) +
                         F2[5] * (P1[2] - P2[2])) +
                (F1[4] * (F2[2] * (P1[2] - P2[2]) +
                          F2[3] * (-cI * (P2[3]) + cI * (P1[3]))) +
                 F1[5] * (F2[2] * (-cI * (P1[3]) + cI * (P2[3])) +
                          F2[3] * (P2[2] - P1[2]))))));
    T3[5] = denom * cI *
            (OM3 * (P3[0] * (TMP1 * (F2[4] * F1[2] + F2[3] * F1[5] +
                                     1.333333333 * (P3[3] * OM3 * TMP20) -
                                     F2[5] * F1[3] - F2[2] * F1[4]) +
                             (TMP2 * -1. *
                                  (F2[4] * F1[2] + F2[3] * F1[5] +
                                   1.333333333 * (P3[3] * OM3 * TMP20) -
                                   F2[5] * F1[3] - F2[2] * F1[4]) +
                              (P3[3] * 0.666666667 * (TMP37 - TMP38) +
                               TMP20 * (P2[3] - P1[3])))) +
                    P3[3] * (TMP1 * -1. *
                                 (F2[4] * F1[2] + F2[5] * F1[3] +
                                  F2[2] * F1[4] + F2[3] * F1[5]) +
                             (TMP2 * (F2[4] * F1[2] + F2[5] * F1[3] +
                                      F2[2] * F1[4] + F2[3] * F1[5]) +
                              TMP20 * (P2[0] - P1[0])))) +
             (F1[2] * F2[4] * (P1[3] + P2[0] - P1[0] - P2[3]) +
              (F1[3] * F2[5] * (P1[3] + P1[0] - P2[3] - P2[0]) +
               (F1[4] * F2[2] * (P1[3] + P1[0] - P2[3] - P2[0]) +
                F1[5] * F2[3] * (P1[3] + P2[0] - P1[0] - P2[3])))));
    T3[9] = denom * cI *
            (OM3 * (P3[1] * (TMP1 * (F2[4] * F1[2] + F2[3] * F1[5] +
                                     1.333333333 * (P3[3] * OM3 * TMP20) -
                                     F2[5] * F1[3] - F2[2] * F1[4]) +
                             (TMP2 * -1. *
                                  (F2[4] * F1[2] + F2[3] * F1[5] +
                                   1.333333333 * (P3[3] * OM3 * TMP20) -
                                   F2[5] * F1[3] - F2[2] * F1[4]) +
                              (P3[3] * 0.666666667 * (TMP37 - TMP38) +
                               TMP20 * (P2[3] - P1[3])))) +
                    P3[3] * (TMP1 * (F2[5] * F1[2] + F2[4] * F1[3] -
                                     F2[3] * F1[4] - F2[2] * F1[5]) +
                             (TMP2 * (F2[3] * F1[4] + F2[2] * F1[5] -
                                      F2[5] * F1[2] - F2[4] * F1[3]) +
                              TMP20 * (P2[1] - P1[1])))) +
             (F1[2] * (F2[4] * (P2[1] - P1[1]) + F2[5] * (P2[3] - P1[3])) +
              (F1[3] * (F2[4] * (P2[3] - P1[3]) + F2[5] * (P1[1] - P2[1])) +
               (F1[4] * (F2[2] * (P1[1] - P2[1]) + F2[3] * (P1[3] - P2[3])) +
                F1[5] * (F2[2] * (P1[3] - P2[3]) + F2[3] * (P2[1] - P1[1]))))));
    T3[13] = denom * cI *
             (OM3 * (P3[2] * (TMP1 * (F2[4] * F1[2] + F2[3] * F1[5] +
                                      1.333333333 * (P3[3] * OM3 * TMP20) -
                                      F2[5] * F1[3] - F2[2] * F1[4]) +
                              (TMP2 * -1. *
                                   (F2[4] * F1[2] + F2[3] * F1[5] +
                                    1.333333333 * (P3[3] * OM3 * TMP20) -
                                    F2[5] * F1[3] - F2[2] * F1[4]) +
                               (P3[3] * 0.666666667 * (TMP37 - TMP38) +
                                TMP20 * (P2[3] - P1[3])))) +
                     P3[3] * (TMP1 * (-cI * (F2[4] * F1[3] + F2[3] * F1[4]) +
                                      cI * (F2[5] * F1[2] + F2[2] * F1[5])) +
                              (TMP2 * (-cI * (F2[5] * F1[2] + F2[2] * F1[5]) +
                                       cI * (F2[4] * F1[3] + F2[3] * F1[4])) +
                               TMP20 * (P2[2] - P1[2])))) +
              (F1[2] * (F2[4] * (P2[2] - P1[2]) +
                        F2[5] * (-cI * (P1[3]) + cI * (P2[3]))) +
               (F1[3] * (F2[4] * (-cI * (P2[3]) + cI * (P1[3])) +
                         F2[5] * (P1[2] - P2[2])) +
                (F1[4] * (F2[2] * (P1[2] - P2[2]) +
                          F2[3] * (-cI * (P2[3]) + cI * (P1[3]))) +
                 F1[5] * (F2[2] * (-cI * (P1[3]) + cI * (P2[3])) +
                          F2[3] * (P2[2] - P1[2]))))));
    T3[17] =
        denom * 2. * cI *
        (OM3 * (P3[3] * (TMP1 * (F2[4] * F1[2] + F2[3] * F1[5] +
                                 0.666666667 * (P3[3] * OM3 * TMP20) -
                                 F2[5] * F1[3] - F2[2] * F1[4]) +
                         (TMP2 * -1. *
                              (F2[4] * F1[2] + F2[3] * F1[5] +
                               0.666666667 * (P3[3] * OM3 * TMP20) -
                               F2[5] * F1[3] - F2[2] * F1[4]) +
                          (P3[3] * 0.333333333 * (TMP37 - TMP38) +
                           TMP20 * (P2[3] - P1[3])))) +
                0.333333333 * (TMP20 * (TMP2 - TMP1))) +
         (P1[3] *
              (F2[5] * F1[3] + F2[2] * F1[4] - F2[4] * F1[2] - F2[3] * F1[5]) +
          (P2[3] *
               (F2[4] * F1[2] + F2[3] * F1[5] - F2[5] * F1[3] - F2[2] * F1[4]) +
           (-0.333333333 * (TMP38) + 0.333333333 * (TMP37)))));
}

void VVT6_0(complex<double> V1[], complex<double> V2[], complex<double> T3[],
            complex<double> COUP, complex<double> &vertex)
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP59;
    complex<double> TMP58;
    double P1[4];
    complex<double> TMP57;
    double P2[4];
    complex<double> TMP23;
    double P3[4];
    complex<double> TMP63;
    complex<double> TMP60;
    complex<double> TMP26;
    complex<double> TMP61;
    complex<double> TMP64;
    complex<double> TMP62;
    P1[0] = V1[0].real();
    P1[1] = V1[1].real();
    P1[2] = V1[1].imag();
    P1[3] = V1[0].imag();
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    P3[0] = T3[0].real();
    P3[1] = T3[1].real();
    P3[2] = T3[1].imag();
    P3[3] = T3[0].imag();
    TMP26 = (P3[0] * V1[2] - P3[1] * V1[3] - P3[2] * V1[4] - P3[3] * V1[5]);
    TMP57 =
        -1. *
        (P1[0] * (P2[0] * (P3[1] * (V2[4] * T3[5] - V2[5] * T3[4]) +
                           (P3[2] * (V2[5] * T3[3] - V2[3] * T3[5]) +
                            P3[3] * (V2[3] * T3[4] - V2[4] * T3[3]))) +
                  (P2[1] * (P3[0] * (V2[5] * T3[4] - V2[4] * T3[5]) +
                            (P3[2] * (V2[2] * T3[5] - V2[5] * T3[2]) +
                             P3[3] * (V2[4] * T3[2] - V2[2] * T3[4]))) +
                   (P2[2] * (P3[0] * (V2[3] * T3[5] - V2[5] * T3[3]) +
                             (P3[1] * (V2[5] * T3[2] - V2[2] * T3[5]) +
                              P3[3] * (V2[2] * T3[3] - V2[3] * T3[2]))) +
                    P2[3] * (P3[0] * (V2[4] * T3[3] - V2[3] * T3[4]) +
                             (P3[1] * (V2[2] * T3[4] - V2[4] * T3[2]) +
                              P3[2] * (V2[3] * T3[2] - V2[2] * T3[3])))))) +
         (P1[1] * (P2[0] * (P3[1] * (V2[5] * T3[8] - V2[4] * T3[9]) +
                            (P3[2] * (V2[3] * T3[9] - V2[5] * T3[7]) +
                             P3[3] * (V2[4] * T3[7] - V2[3] * T3[8]))) +
                   (P2[1] * (P3[0] * (V2[4] * T3[9] - V2[5] * T3[8]) +
                             (P3[2] * (V2[5] * T3[6] - V2[2] * T3[9]) +
                              P3[3] * (V2[2] * T3[8] - V2[4] * T3[6]))) +
                    (P2[2] * (P3[0] * (V2[5] * T3[7] - V2[3] * T3[9]) +
                              (P3[1] * (V2[2] * T3[9] - V2[5] * T3[6]) +
                               P3[3] * (V2[3] * T3[6] - V2[2] * T3[7]))) +
                     P2[3] * (P3[0] * (V2[3] * T3[8] - V2[4] * T3[7]) +
                              (P3[1] * (V2[4] * T3[6] - V2[2] * T3[8]) +
                               P3[2] * (V2[2] * T3[7] - V2[3] * T3[6])))))) +
          (P1[2] * (P2[0] * (P3[1] * (V2[5] * T3[12] - V2[4] * T3[13]) +
                             (P3[2] * (V2[3] * T3[13] - V2[5] * T3[11]) +
                              P3[3] * (V2[4] * T3[11] - V2[3] * T3[12]))) +
                    (P2[1] * (P3[0] * (V2[4] * T3[13] - V2[5] * T3[12]) +
                              (P3[2] * (V2[5] * T3[10] - V2[2] * T3[13]) +
                               P3[3] * (V2[2] * T3[12] - V2[4] * T3[10]))) +
                     (P2[2] * (P3[0] * (V2[5] * T3[11] - V2[3] * T3[13]) +
                               (P3[1] * (V2[2] * T3[13] - V2[5] * T3[10]) +
                                P3[3] * (V2[3] * T3[10] - V2[2] * T3[11]))) +
                      P2[3] * (P3[0] * (V2[3] * T3[12] - V2[4] * T3[11]) +
                               (P3[1] * (V2[4] * T3[10] - V2[2] * T3[12]) +
                                P3[2] * (V2[2] * T3[11] - V2[3] * T3[10])))))) +
           P1[3] *
               (P2[0] * (P3[1] * (V2[5] * T3[16] - V2[4] * T3[17]) +
                         (P3[2] * (V2[3] * T3[17] - V2[5] * T3[15]) +
                          P3[3] * (V2[4] * T3[15] - V2[3] * T3[16]))) +
                (P2[1] * (P3[0] * (V2[4] * T3[17] - V2[5] * T3[16]) +
                          (P3[2] * (V2[5] * T3[14] - V2[2] * T3[17]) +
                           P3[3] * (V2[2] * T3[16] - V2[4] * T3[14]))) +
                 (P2[2] * (P3[0] * (V2[5] * T3[15] - V2[3] * T3[17]) +
                           (P3[1] * (V2[2] * T3[17] - V2[5] * T3[14]) +
                            P3[3] * (V2[3] * T3[14] - V2[2] * T3[15]))) +
                  P2[3] * (P3[0] * (V2[3] * T3[16] - V2[4] * T3[15]) +
                           (P3[1] * (V2[4] * T3[14] - V2[2] * T3[16]) +
                            P3[2] * (V2[2] * T3[15] - V2[3] * T3[14])))))))));
    TMP23 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]);
    TMP59 =
        -1. *
        (P2[0] * (P1[0] * (P3[1] * (V2[4] * T3[5] - V2[5] * T3[4]) +
                           (P3[2] * (V2[5] * T3[3] - V2[3] * T3[5]) +
                            P3[3] * (V2[3] * T3[4] - V2[4] * T3[3]))) +
                  (P1[1] * (P3[0] * (V2[5] * T3[4] - V2[4] * T3[5]) +
                            (P3[2] * (V2[2] * T3[5] - V2[5] * T3[2]) +
                             P3[3] * (V2[4] * T3[2] - V2[2] * T3[4]))) +
                   (P1[2] * (P3[0] * (V2[3] * T3[5] - V2[5] * T3[3]) +
                             (P3[1] * (V2[5] * T3[2] - V2[2] * T3[5]) +
                              P3[3] * (V2[2] * T3[3] - V2[3] * T3[2]))) +
                    P1[3] * (P3[0] * (V2[4] * T3[3] - V2[3] * T3[4]) +
                             (P3[1] * (V2[2] * T3[4] - V2[4] * T3[2]) +
                              P3[2] * (V2[3] * T3[2] - V2[2] * T3[3])))))) +
         (P2[1] * (P1[0] * (P3[1] * (V2[5] * T3[8] - V2[4] * T3[9]) +
                            (P3[2] * (V2[3] * T3[9] - V2[5] * T3[7]) +
                             P3[3] * (V2[4] * T3[7] - V2[3] * T3[8]))) +
                   (P1[1] * (P3[0] * (V2[4] * T3[9] - V2[5] * T3[8]) +
                             (P3[2] * (V2[5] * T3[6] - V2[2] * T3[9]) +
                              P3[3] * (V2[2] * T3[8] - V2[4] * T3[6]))) +
                    (P1[2] * (P3[0] * (V2[5] * T3[7] - V2[3] * T3[9]) +
                              (P3[1] * (V2[2] * T3[9] - V2[5] * T3[6]) +
                               P3[3] * (V2[3] * T3[6] - V2[2] * T3[7]))) +
                     P1[3] * (P3[0] * (V2[3] * T3[8] - V2[4] * T3[7]) +
                              (P3[1] * (V2[4] * T3[6] - V2[2] * T3[8]) +
                               P3[2] * (V2[2] * T3[7] - V2[3] * T3[6])))))) +
          (P2[2] * (P1[0] * (P3[1] * (V2[5] * T3[12] - V2[4] * T3[13]) +
                             (P3[2] * (V2[3] * T3[13] - V2[5] * T3[11]) +
                              P3[3] * (V2[4] * T3[11] - V2[3] * T3[12]))) +
                    (P1[1] * (P3[0] * (V2[4] * T3[13] - V2[5] * T3[12]) +
                              (P3[2] * (V2[5] * T3[10] - V2[2] * T3[13]) +
                               P3[3] * (V2[2] * T3[12] - V2[4] * T3[10]))) +
                     (P1[2] * (P3[0] * (V2[5] * T3[11] - V2[3] * T3[13]) +
                               (P3[1] * (V2[2] * T3[13] - V2[5] * T3[10]) +
                                P3[3] * (V2[3] * T3[10] - V2[2] * T3[11]))) +
                      P1[3] * (P3[0] * (V2[3] * T3[12] - V2[4] * T3[11]) +
                               (P3[1] * (V2[4] * T3[10] - V2[2] * T3[12]) +
                                P3[2] * (V2[2] * T3[11] - V2[3] * T3[10])))))) +
           P2[3] *
               (P1[0] * (P3[1] * (V2[5] * T3[16] - V2[4] * T3[17]) +
                         (P3[2] * (V2[3] * T3[17] - V2[5] * T3[15]) +
                          P3[3] * (V2[4] * T3[15] - V2[3] * T3[16]))) +
                (P1[1] * (P3[0] * (V2[4] * T3[17] - V2[5] * T3[16]) +
                          (P3[2] * (V2[5] * T3[14] - V2[2] * T3[17]) +
                           P3[3] * (V2[2] * T3[16] - V2[4] * T3[14]))) +
                 (P1[2] * (P3[0] * (V2[5] * T3[15] - V2[3] * T3[17]) +
                           (P3[1] * (V2[2] * T3[17] - V2[5] * T3[14]) +
                            P3[3] * (V2[3] * T3[14] - V2[2] * T3[15]))) +
                  P1[3] * (P3[0] * (V2[3] * T3[16] - V2[4] * T3[15]) +
                           (P3[1] * (V2[4] * T3[14] - V2[2] * T3[16]) +
                            P3[2] * (V2[2] * T3[15] - V2[3] * T3[14])))))))));
    TMP58 =
        -1. *
        (P1[0] * (P2[0] * (P3[1] * (V1[4] * T3[5] - V1[5] * T3[4]) +
                           (P3[2] * (V1[5] * T3[3] - V1[3] * T3[5]) +
                            P3[3] * (V1[3] * T3[4] - V1[4] * T3[3]))) +
                  (P2[1] * (P3[0] * (V1[5] * T3[4] - V1[4] * T3[5]) +
                            (P3[2] * (V1[2] * T3[5] - V1[5] * T3[2]) +
                             P3[3] * (V1[4] * T3[2] - V1[2] * T3[4]))) +
                   (P2[2] * (P3[0] * (V1[3] * T3[5] - V1[5] * T3[3]) +
                             (P3[1] * (V1[5] * T3[2] - V1[2] * T3[5]) +
                              P3[3] * (V1[2] * T3[3] - V1[3] * T3[2]))) +
                    P2[3] * (P3[0] * (V1[4] * T3[3] - V1[3] * T3[4]) +
                             (P3[1] * (V1[2] * T3[4] - V1[4] * T3[2]) +
                              P3[2] * (V1[3] * T3[2] - V1[2] * T3[3])))))) +
         (P1[1] * (P2[0] * (P3[1] * (V1[5] * T3[8] - V1[4] * T3[9]) +
                            (P3[2] * (V1[3] * T3[9] - V1[5] * T3[7]) +
                             P3[3] * (V1[4] * T3[7] - V1[3] * T3[8]))) +
                   (P2[1] * (P3[0] * (V1[4] * T3[9] - V1[5] * T3[8]) +
                             (P3[2] * (V1[5] * T3[6] - V1[2] * T3[9]) +
                              P3[3] * (V1[2] * T3[8] - V1[4] * T3[6]))) +
                    (P2[2] * (P3[0] * (V1[5] * T3[7] - V1[3] * T3[9]) +
                              (P3[1] * (V1[2] * T3[9] - V1[5] * T3[6]) +
                               P3[3] * (V1[3] * T3[6] - V1[2] * T3[7]))) +
                     P2[3] * (P3[0] * (V1[3] * T3[8] - V1[4] * T3[7]) +
                              (P3[1] * (V1[4] * T3[6] - V1[2] * T3[8]) +
                               P3[2] * (V1[2] * T3[7] - V1[3] * T3[6])))))) +
          (P1[2] * (P2[0] * (P3[1] * (V1[5] * T3[12] - V1[4] * T3[13]) +
                             (P3[2] * (V1[3] * T3[13] - V1[5] * T3[11]) +
                              P3[3] * (V1[4] * T3[11] - V1[3] * T3[12]))) +
                    (P2[1] * (P3[0] * (V1[4] * T3[13] - V1[5] * T3[12]) +
                              (P3[2] * (V1[5] * T3[10] - V1[2] * T3[13]) +
                               P3[3] * (V1[2] * T3[12] - V1[4] * T3[10]))) +
                     (P2[2] * (P3[0] * (V1[5] * T3[11] - V1[3] * T3[13]) +
                               (P3[1] * (V1[2] * T3[13] - V1[5] * T3[10]) +
                                P3[3] * (V1[3] * T3[10] - V1[2] * T3[11]))) +
                      P2[3] * (P3[0] * (V1[3] * T3[12] - V1[4] * T3[11]) +
                               (P3[1] * (V1[4] * T3[10] - V1[2] * T3[12]) +
                                P3[2] * (V1[2] * T3[11] - V1[3] * T3[10])))))) +
           P1[3] *
               (P2[0] * (P3[1] * (V1[5] * T3[16] - V1[4] * T3[17]) +
                         (P3[2] * (V1[3] * T3[17] - V1[5] * T3[15]) +
                          P3[3] * (V1[4] * T3[15] - V1[3] * T3[16]))) +
                (P2[1] * (P3[0] * (V1[4] * T3[17] - V1[5] * T3[16]) +
                          (P3[2] * (V1[5] * T3[14] - V1[2] * T3[17]) +
                           P3[3] * (V1[2] * T3[16] - V1[4] * T3[14]))) +
                 (P2[2] * (P3[0] * (V1[5] * T3[15] - V1[3] * T3[17]) +
                           (P3[1] * (V1[2] * T3[17] - V1[5] * T3[14]) +
                            P3[3] * (V1[3] * T3[14] - V1[2] * T3[15]))) +
                  P2[3] * (P3[0] * (V1[3] * T3[16] - V1[4] * T3[15]) +
                           (P3[1] * (V1[4] * T3[14] - V1[2] * T3[16]) +
                            P3[2] * (V1[2] * T3[15] - V1[3] * T3[14])))))))));
    TMP62 =
        -1. *
        (P1[0] * (P2[0] * (P3[1] * (V1[4] * T3[14] - V1[5] * T3[10]) +
                           (P3[2] * (V1[5] * T3[6] - V1[3] * T3[14]) +
                            P3[3] * (V1[3] * T3[10] - V1[4] * T3[6]))) +
                  (P2[1] * (P3[0] * (V1[5] * T3[10] - V1[4] * T3[14]) +
                            (P3[2] * (V1[2] * T3[14] - V1[5] * T3[2]) +
                             P3[3] * (V1[4] * T3[2] - V1[2] * T3[10]))) +
                   (P2[2] * (P3[0] * (V1[3] * T3[14] - V1[5] * T3[6]) +
                             (P3[1] * (V1[5] * T3[2] - V1[2] * T3[14]) +
                              P3[3] * (V1[2] * T3[6] - V1[3] * T3[2]))) +
                    P2[3] * (P3[0] * (V1[4] * T3[6] - V1[3] * T3[10]) +
                             (P3[1] * (V1[2] * T3[10] - V1[4] * T3[2]) +
                              P3[2] * (V1[3] * T3[2] - V1[2] * T3[6])))))) +
         (P1[1] * (P2[0] * (P3[1] * (V1[5] * T3[11] - V1[4] * T3[15]) +
                            (P3[2] * (V1[3] * T3[15] - V1[5] * T3[7]) +
                             P3[3] * (V1[4] * T3[7] - V1[3] * T3[11]))) +
                   (P2[1] * (P3[0] * (V1[4] * T3[15] - V1[5] * T3[11]) +
                             (P3[2] * (V1[5] * T3[3] - V1[2] * T3[15]) +
                              P3[3] * (V1[2] * T3[11] - V1[4] * T3[3]))) +
                    (P2[2] * (P3[0] * (V1[5] * T3[7] - V1[3] * T3[15]) +
                              (P3[1] * (V1[2] * T3[15] - V1[5] * T3[3]) +
                               P3[3] * (V1[3] * T3[3] - V1[2] * T3[7]))) +
                     P2[3] * (P3[0] * (V1[3] * T3[11] - V1[4] * T3[7]) +
                              (P3[1] * (V1[4] * T3[3] - V1[2] * T3[11]) +
                               P3[2] * (V1[2] * T3[7] - V1[3] * T3[3])))))) +
          (P1[2] * (P2[0] * (P3[1] * (V1[5] * T3[12] - V1[4] * T3[16]) +
                             (P3[2] * (V1[3] * T3[16] - V1[5] * T3[8]) +
                              P3[3] * (V1[4] * T3[8] - V1[3] * T3[12]))) +
                    (P2[1] * (P3[0] * (V1[4] * T3[16] - V1[5] * T3[12]) +
                              (P3[2] * (V1[5] * T3[4] - V1[2] * T3[16]) +
                               P3[3] * (V1[2] * T3[12] - V1[4] * T3[4]))) +
                     (P2[2] * (P3[0] * (V1[5] * T3[8] - V1[3] * T3[16]) +
                               (P3[1] * (V1[2] * T3[16] - V1[5] * T3[4]) +
                                P3[3] * (V1[3] * T3[4] - V1[2] * T3[8]))) +
                      P2[3] * (P3[0] * (V1[3] * T3[12] - V1[4] * T3[8]) +
                               (P3[1] * (V1[4] * T3[4] - V1[2] * T3[12]) +
                                P3[2] * (V1[2] * T3[8] - V1[3] * T3[4])))))) +
           P1[3] * (P2[0] * (P3[1] * (V1[5] * T3[13] - V1[4] * T3[17]) +
                             (P3[2] * (V1[3] * T3[17] - V1[5] * T3[9]) +
                              P3[3] * (V1[4] * T3[9] - V1[3] * T3[13]))) +
                    (P2[1] * (P3[0] * (V1[4] * T3[17] - V1[5] * T3[13]) +
                              (P3[2] * (V1[5] * T3[5] - V1[2] * T3[17]) +
                               P3[3] * (V1[2] * T3[13] - V1[4] * T3[5]))) +
                     (P2[2] * (P3[0] * (V1[5] * T3[9] - V1[3] * T3[17]) +
                               (P3[1] * (V1[2] * T3[17] - V1[5] * T3[5]) +
                                P3[3] * (V1[3] * T3[5] - V1[2] * T3[9]))) +
                      P2[3] * (P3[0] * (V1[3] * T3[13] - V1[4] * T3[9]) +
                               (P3[1] * (V1[4] * T3[5] - V1[2] * T3[13]) +
                                P3[2] * (V1[2] * T3[9] - V1[3] * T3[5])))))))));
    TMP63 =
        -1. *
        (P2[0] * (P1[0] * (P3[1] * (V2[4] * T3[14] - V2[5] * T3[10]) +
                           (P3[2] * (V2[5] * T3[6] - V2[3] * T3[14]) +
                            P3[3] * (V2[3] * T3[10] - V2[4] * T3[6]))) +
                  (P1[1] * (P3[0] * (V2[5] * T3[10] - V2[4] * T3[14]) +
                            (P3[2] * (V2[2] * T3[14] - V2[5] * T3[2]) +
                             P3[3] * (V2[4] * T3[2] - V2[2] * T3[10]))) +
                   (P1[2] * (P3[0] * (V2[3] * T3[14] - V2[5] * T3[6]) +
                             (P3[1] * (V2[5] * T3[2] - V2[2] * T3[14]) +
                              P3[3] * (V2[2] * T3[6] - V2[3] * T3[2]))) +
                    P1[3] * (P3[0] * (V2[4] * T3[6] - V2[3] * T3[10]) +
                             (P3[1] * (V2[2] * T3[10] - V2[4] * T3[2]) +
                              P3[2] * (V2[3] * T3[2] - V2[2] * T3[6])))))) +
         (P2[1] * (P1[0] * (P3[1] * (V2[5] * T3[11] - V2[4] * T3[15]) +
                            (P3[2] * (V2[3] * T3[15] - V2[5] * T3[7]) +
                             P3[3] * (V2[4] * T3[7] - V2[3] * T3[11]))) +
                   (P1[1] * (P3[0] * (V2[4] * T3[15] - V2[5] * T3[11]) +
                             (P3[2] * (V2[5] * T3[3] - V2[2] * T3[15]) +
                              P3[3] * (V2[2] * T3[11] - V2[4] * T3[3]))) +
                    (P1[2] * (P3[0] * (V2[5] * T3[7] - V2[3] * T3[15]) +
                              (P3[1] * (V2[2] * T3[15] - V2[5] * T3[3]) +
                               P3[3] * (V2[3] * T3[3] - V2[2] * T3[7]))) +
                     P1[3] * (P3[0] * (V2[3] * T3[11] - V2[4] * T3[7]) +
                              (P3[1] * (V2[4] * T3[3] - V2[2] * T3[11]) +
                               P3[2] * (V2[2] * T3[7] - V2[3] * T3[3])))))) +
          (P2[2] * (P1[0] * (P3[1] * (V2[5] * T3[12] - V2[4] * T3[16]) +
                             (P3[2] * (V2[3] * T3[16] - V2[5] * T3[8]) +
                              P3[3] * (V2[4] * T3[8] - V2[3] * T3[12]))) +
                    (P1[1] * (P3[0] * (V2[4] * T3[16] - V2[5] * T3[12]) +
                              (P3[2] * (V2[5] * T3[4] - V2[2] * T3[16]) +
                               P3[3] * (V2[2] * T3[12] - V2[4] * T3[4]))) +
                     (P1[2] * (P3[0] * (V2[5] * T3[8] - V2[3] * T3[16]) +
                               (P3[1] * (V2[2] * T3[16] - V2[5] * T3[4]) +
                                P3[3] * (V2[3] * T3[4] - V2[2] * T3[8]))) +
                      P1[3] * (P3[0] * (V2[3] * T3[12] - V2[4] * T3[8]) +
                               (P3[1] * (V2[4] * T3[4] - V2[2] * T3[12]) +
                                P3[2] * (V2[2] * T3[8] - V2[3] * T3[4])))))) +
           P2[3] * (P1[0] * (P3[1] * (V2[5] * T3[13] - V2[4] * T3[17]) +
                             (P3[2] * (V2[3] * T3[17] - V2[5] * T3[9]) +
                              P3[3] * (V2[4] * T3[9] - V2[3] * T3[13]))) +
                    (P1[1] * (P3[0] * (V2[4] * T3[17] - V2[5] * T3[13]) +
                              (P3[2] * (V2[5] * T3[5] - V2[2] * T3[17]) +
                               P3[3] * (V2[2] * T3[13] - V2[4] * T3[5]))) +
                     (P1[2] * (P3[0] * (V2[5] * T3[9] - V2[3] * T3[17]) +
                               (P3[1] * (V2[2] * T3[17] - V2[5] * T3[5]) +
                                P3[3] * (V2[3] * T3[5] - V2[2] * T3[9]))) +
                      P1[3] * (P3[0] * (V2[3] * T3[13] - V2[4] * T3[9]) +
                               (P3[1] * (V2[4] * T3[5] - V2[2] * T3[13]) +
                                P3[2] * (V2[2] * T3[9] - V2[3] * T3[5])))))))));
    TMP64 =
        -1. *
        (P2[0] * (P1[0] * (P3[1] * (V1[4] * T3[14] - V1[5] * T3[10]) +
                           (P3[2] * (V1[5] * T3[6] - V1[3] * T3[14]) +
                            P3[3] * (V1[3] * T3[10] - V1[4] * T3[6]))) +
                  (P1[1] * (P3[0] * (V1[5] * T3[10] - V1[4] * T3[14]) +
                            (P3[2] * (V1[2] * T3[14] - V1[5] * T3[2]) +
                             P3[3] * (V1[4] * T3[2] - V1[2] * T3[10]))) +
                   (P1[2] * (P3[0] * (V1[3] * T3[14] - V1[5] * T3[6]) +
                             (P3[1] * (V1[5] * T3[2] - V1[2] * T3[14]) +
                              P3[3] * (V1[2] * T3[6] - V1[3] * T3[2]))) +
                    P1[3] * (P3[0] * (V1[4] * T3[6] - V1[3] * T3[10]) +
                             (P3[1] * (V1[2] * T3[10] - V1[4] * T3[2]) +
                              P3[2] * (V1[3] * T3[2] - V1[2] * T3[6])))))) +
         (P2[1] * (P1[0] * (P3[1] * (V1[5] * T3[11] - V1[4] * T3[15]) +
                            (P3[2] * (V1[3] * T3[15] - V1[5] * T3[7]) +
                             P3[3] * (V1[4] * T3[7] - V1[3] * T3[11]))) +
                   (P1[1] * (P3[0] * (V1[4] * T3[15] - V1[5] * T3[11]) +
                             (P3[2] * (V1[5] * T3[3] - V1[2] * T3[15]) +
                              P3[3] * (V1[2] * T3[11] - V1[4] * T3[3]))) +
                    (P1[2] * (P3[0] * (V1[5] * T3[7] - V1[3] * T3[15]) +
                              (P3[1] * (V1[2] * T3[15] - V1[5] * T3[3]) +
                               P3[3] * (V1[3] * T3[3] - V1[2] * T3[7]))) +
                     P1[3] * (P3[0] * (V1[3] * T3[11] - V1[4] * T3[7]) +
                              (P3[1] * (V1[4] * T3[3] - V1[2] * T3[11]) +
                               P3[2] * (V1[2] * T3[7] - V1[3] * T3[3])))))) +
          (P2[2] * (P1[0] * (P3[1] * (V1[5] * T3[12] - V1[4] * T3[16]) +
                             (P3[2] * (V1[3] * T3[16] - V1[5] * T3[8]) +
                              P3[3] * (V1[4] * T3[8] - V1[3] * T3[12]))) +
                    (P1[1] * (P3[0] * (V1[4] * T3[16] - V1[5] * T3[12]) +
                              (P3[2] * (V1[5] * T3[4] - V1[2] * T3[16]) +
                               P3[3] * (V1[2] * T3[12] - V1[4] * T3[4]))) +
                     (P1[2] * (P3[0] * (V1[5] * T3[8] - V1[3] * T3[16]) +
                               (P3[1] * (V1[2] * T3[16] - V1[5] * T3[4]) +
                                P3[3] * (V1[3] * T3[4] - V1[2] * T3[8]))) +
                      P1[3] * (P3[0] * (V1[3] * T3[12] - V1[4] * T3[8]) +
                               (P3[1] * (V1[4] * T3[4] - V1[2] * T3[12]) +
                                P3[2] * (V1[2] * T3[8] - V1[3] * T3[4])))))) +
           P2[3] * (P1[0] * (P3[1] * (V1[5] * T3[13] - V1[4] * T3[17]) +
                             (P3[2] * (V1[3] * T3[17] - V1[5] * T3[9]) +
                              P3[3] * (V1[4] * T3[9] - V1[3] * T3[13]))) +
                    (P1[1] * (P3[0] * (V1[4] * T3[17] - V1[5] * T3[13]) +
                              (P3[2] * (V1[5] * T3[5] - V1[2] * T3[17]) +
                               P3[3] * (V1[2] * T3[13] - V1[4] * T3[5]))) +
                     (P1[2] * (P3[0] * (V1[5] * T3[9] - V1[3] * T3[17]) +
                               (P3[1] * (V1[2] * T3[17] - V1[5] * T3[5]) +
                                P3[3] * (V1[3] * T3[5] - V1[2] * T3[9]))) +
                      P1[3] * (P3[0] * (V1[3] * T3[13] - V1[4] * T3[9]) +
                               (P3[1] * (V1[4] * T3[5] - V1[2] * T3[13]) +
                                P3[2] * (V1[2] * T3[9] - V1[3] * T3[5])))))))));
    TMP60 =
        -1. *
        (P2[0] * (P1[0] * (P3[1] * (V1[4] * T3[5] - V1[5] * T3[4]) +
                           (P3[2] * (V1[5] * T3[3] - V1[3] * T3[5]) +
                            P3[3] * (V1[3] * T3[4] - V1[4] * T3[3]))) +
                  (P1[1] * (P3[0] * (V1[5] * T3[4] - V1[4] * T3[5]) +
                            (P3[2] * (V1[2] * T3[5] - V1[5] * T3[2]) +
                             P3[3] * (V1[4] * T3[2] - V1[2] * T3[4]))) +
                   (P1[2] * (P3[0] * (V1[3] * T3[5] - V1[5] * T3[3]) +
                             (P3[1] * (V1[5] * T3[2] - V1[2] * T3[5]) +
                              P3[3] * (V1[2] * T3[3] - V1[3] * T3[2]))) +
                    P1[3] * (P3[0] * (V1[4] * T3[3] - V1[3] * T3[4]) +
                             (P3[1] * (V1[2] * T3[4] - V1[4] * T3[2]) +
                              P3[2] * (V1[3] * T3[2] - V1[2] * T3[3])))))) +
         (P2[1] * (P1[0] * (P3[1] * (V1[5] * T3[8] - V1[4] * T3[9]) +
                            (P3[2] * (V1[3] * T3[9] - V1[5] * T3[7]) +
                             P3[3] * (V1[4] * T3[7] - V1[3] * T3[8]))) +
                   (P1[1] * (P3[0] * (V1[4] * T3[9] - V1[5] * T3[8]) +
                             (P3[2] * (V1[5] * T3[6] - V1[2] * T3[9]) +
                              P3[3] * (V1[2] * T3[8] - V1[4] * T3[6]))) +
                    (P1[2] * (P3[0] * (V1[5] * T3[7] - V1[3] * T3[9]) +
                              (P3[1] * (V1[2] * T3[9] - V1[5] * T3[6]) +
                               P3[3] * (V1[3] * T3[6] - V1[2] * T3[7]))) +
                     P1[3] * (P3[0] * (V1[3] * T3[8] - V1[4] * T3[7]) +
                              (P3[1] * (V1[4] * T3[6] - V1[2] * T3[8]) +
                               P3[2] * (V1[2] * T3[7] - V1[3] * T3[6])))))) +
          (P2[2] * (P1[0] * (P3[1] * (V1[5] * T3[12] - V1[4] * T3[13]) +
                             (P3[2] * (V1[3] * T3[13] - V1[5] * T3[11]) +
                              P3[3] * (V1[4] * T3[11] - V1[3] * T3[12]))) +
                    (P1[1] * (P3[0] * (V1[4] * T3[13] - V1[5] * T3[12]) +
                              (P3[2] * (V1[5] * T3[10] - V1[2] * T3[13]) +
                               P3[3] * (V1[2] * T3[12] - V1[4] * T3[10]))) +
                     (P1[2] * (P3[0] * (V1[5] * T3[11] - V1[3] * T3[13]) +
                               (P3[1] * (V1[2] * T3[13] - V1[5] * T3[10]) +
                                P3[3] * (V1[3] * T3[10] - V1[2] * T3[11]))) +
                      P1[3] * (P3[0] * (V1[3] * T3[12] - V1[4] * T3[11]) +
                               (P3[1] * (V1[4] * T3[10] - V1[2] * T3[12]) +
                                P3[2] * (V1[2] * T3[11] - V1[3] * T3[10])))))) +
           P2[3] *
               (P1[0] * (P3[1] * (V1[5] * T3[16] - V1[4] * T3[17]) +
                         (P3[2] * (V1[3] * T3[17] - V1[5] * T3[15]) +
                          P3[3] * (V1[4] * T3[15] - V1[3] * T3[16]))) +
                (P1[1] * (P3[0] * (V1[4] * T3[17] - V1[5] * T3[16]) +
                          (P3[2] * (V1[5] * T3[14] - V1[2] * T3[17]) +
                           P3[3] * (V1[2] * T3[16] - V1[4] * T3[14]))) +
                 (P1[2] * (P3[0] * (V1[5] * T3[15] - V1[3] * T3[17]) +
                           (P3[1] * (V1[2] * T3[17] - V1[5] * T3[14]) +
                            P3[3] * (V1[3] * T3[14] - V1[2] * T3[15]))) +
                  P1[3] * (P3[0] * (V1[3] * T3[16] - V1[4] * T3[15]) +
                           (P3[1] * (V1[4] * T3[14] - V1[2] * T3[16]) +
                            P3[2] * (V1[2] * T3[15] - V1[3] * T3[14])))))))));
    TMP61 =
        -1. *
        (P1[0] * (P2[0] * (P3[1] * (V2[4] * T3[14] - V2[5] * T3[10]) +
                           (P3[2] * (V2[5] * T3[6] - V2[3] * T3[14]) +
                            P3[3] * (V2[3] * T3[10] - V2[4] * T3[6]))) +
                  (P2[1] * (P3[0] * (V2[5] * T3[10] - V2[4] * T3[14]) +
                            (P3[2] * (V2[2] * T3[14] - V2[5] * T3[2]) +
                             P3[3] * (V2[4] * T3[2] - V2[2] * T3[10]))) +
                   (P2[2] * (P3[0] * (V2[3] * T3[14] - V2[5] * T3[6]) +
                             (P3[1] * (V2[5] * T3[2] - V2[2] * T3[14]) +
                              P3[3] * (V2[2] * T3[6] - V2[3] * T3[2]))) +
                    P2[3] * (P3[0] * (V2[4] * T3[6] - V2[3] * T3[10]) +
                             (P3[1] * (V2[2] * T3[10] - V2[4] * T3[2]) +
                              P3[2] * (V2[3] * T3[2] - V2[2] * T3[6])))))) +
         (P1[1] * (P2[0] * (P3[1] * (V2[5] * T3[11] - V2[4] * T3[15]) +
                            (P3[2] * (V2[3] * T3[15] - V2[5] * T3[7]) +
                             P3[3] * (V2[4] * T3[7] - V2[3] * T3[11]))) +
                   (P2[1] * (P3[0] * (V2[4] * T3[15] - V2[5] * T3[11]) +
                             (P3[2] * (V2[5] * T3[3] - V2[2] * T3[15]) +
                              P3[3] * (V2[2] * T3[11] - V2[4] * T3[3]))) +
                    (P2[2] * (P3[0] * (V2[5] * T3[7] - V2[3] * T3[15]) +
                              (P3[1] * (V2[2] * T3[15] - V2[5] * T3[3]) +
                               P3[3] * (V2[3] * T3[3] - V2[2] * T3[7]))) +
                     P2[3] * (P3[0] * (V2[3] * T3[11] - V2[4] * T3[7]) +
                              (P3[1] * (V2[4] * T3[3] - V2[2] * T3[11]) +
                               P3[2] * (V2[2] * T3[7] - V2[3] * T3[3])))))) +
          (P1[2] * (P2[0] * (P3[1] * (V2[5] * T3[12] - V2[4] * T3[16]) +
                             (P3[2] * (V2[3] * T3[16] - V2[5] * T3[8]) +
                              P3[3] * (V2[4] * T3[8] - V2[3] * T3[12]))) +
                    (P2[1] * (P3[0] * (V2[4] * T3[16] - V2[5] * T3[12]) +
                              (P3[2] * (V2[5] * T3[4] - V2[2] * T3[16]) +
                               P3[3] * (V2[2] * T3[12] - V2[4] * T3[4]))) +
                     (P2[2] * (P3[0] * (V2[5] * T3[8] - V2[3] * T3[16]) +
                               (P3[1] * (V2[2] * T3[16] - V2[5] * T3[4]) +
                                P3[3] * (V2[3] * T3[4] - V2[2] * T3[8]))) +
                      P2[3] * (P3[0] * (V2[3] * T3[12] - V2[4] * T3[8]) +
                               (P3[1] * (V2[4] * T3[4] - V2[2] * T3[12]) +
                                P3[2] * (V2[2] * T3[8] - V2[3] * T3[4])))))) +
           P1[3] * (P2[0] * (P3[1] * (V2[5] * T3[13] - V2[4] * T3[17]) +
                             (P3[2] * (V2[3] * T3[17] - V2[5] * T3[9]) +
                              P3[3] * (V2[4] * T3[9] - V2[3] * T3[13]))) +
                    (P2[1] * (P3[0] * (V2[4] * T3[17] - V2[5] * T3[13]) +
                              (P3[2] * (V2[5] * T3[5] - V2[2] * T3[17]) +
                               P3[3] * (V2[2] * T3[13] - V2[4] * T3[5]))) +
                     (P2[2] * (P3[0] * (V2[5] * T3[9] - V2[3] * T3[17]) +
                               (P3[1] * (V2[2] * T3[17] - V2[5] * T3[5]) +
                                P3[3] * (V2[3] * T3[5] - V2[2] * T3[9]))) +
                      P2[3] * (P3[0] * (V2[3] * T3[13] - V2[4] * T3[9]) +
                               (P3[1] * (V2[4] * T3[5] - V2[2] * T3[13]) +
                                P3[2] * (V2[2] * T3[9] - V2[3] * T3[5])))))))));
    vertex = COUP * -1. *
             (TMP23 * (+cI * (TMP58 + TMP60 + TMP62 + TMP64)) +
              TMP26 * (+cI * (TMP57 + TMP59 + TMP61 + TMP63)));
}

void VVT8_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
            double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    complex<double> TMP22;
    complex<double> TMP10;
    double P2[4];
    complex<double> TMP7;
    complex<double> TMP21;
    complex<double> denom;
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    V1[0] = +V2[0] + T3[0];
    V1[1] = +V2[1] + T3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP7 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    TMP21 =
        (P1[0] * -1. *
             (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] - P2[0] * T3[2]) +
         (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] * T3[15] -
                   P2[0] * T3[3]) +
          (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] + P2[3] * T3[16] -
                    P2[0] * T3[4]) +
           P1[3] * (P2[1] * T3[9] + P2[2] * T3[13] + P2[3] * T3[17] -
                    P2[0] * T3[5]))));
    TMP22 =
        (P1[0] * -1. *
             (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] - P2[0] * T3[2]) +
         (P1[1] *
              (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9] - P2[0] * T3[6]) +
          (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] * T3[13] -
                    P2[0] * T3[10]) +
           P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] + P2[3] * T3[17] -
                    P2[0] * T3[14]))));
    TMP10 = (P1[0] * P2[0] - P1[1] * P2[1] - P1[2] * P2[2] - P1[3] * P2[3]);
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] = denom * (P2[0] * -TMP7 * (+cI * (TMP21 + TMP22)) +
                     TMP10 * V2[2] * (+cI * (TMP21 + TMP22)));
    V1[3] = denom * (P2[1] * -TMP7 * (+cI * (TMP21 + TMP22)) +
                     TMP10 * V2[3] * (+cI * (TMP21 + TMP22)));
    V1[4] = denom * (P2[2] * -TMP7 * (+cI * (TMP21 + TMP22)) +
                     TMP10 * V2[4] * (+cI * (TMP21 + TMP22)));
    V1[5] = denom * (P2[3] * -TMP7 * (+cI * (TMP21 + TMP22)) +
                     TMP10 * V2[5] * (+cI * (TMP21 + TMP22)));
}

} // namespace MG5_HEF_MEKD
