//==========================================================================
// This file has been automatically generated for C++ Standalone by
// MadGraph5_aMC@NLO v. 2.0.2, 2014-02-07
// By the MadGraph5_aMC@NLO Development Team
// Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
//==========================================================================

#include "HelAmps_HEF_MEKD2_1.h"
#include <cmath>
#include <complex>
#include <cstdlib>
#include <iostream>

using namespace std;

namespace MG5_HEF_MEKD2_1
{

void FFV6_3(complex<double> F1[], complex<double> F2[], complex<double> COUP,
            double M3, double W3, complex<double> V3[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP2;
    double P3[4];
    double OM3;
    complex<double> denom;
    complex<double> TMP3;
    OM3 = 0.;
    if (M3 != 0.)
        OM3 = 1. / pow(M3, 2);
    V3[0] = +F1[0] + F2[0];
    V3[1] = +F1[1] + F2[1];
    P3[0] = -V3[0].real();
    P3[1] = -V3[1].real();
    P3[2] = -V3[1].imag();
    P3[3] = -V3[0].imag();
    TMP3 =
        (F1[4] * (F2[2] * (P3[0] - P3[3]) - F2[3] * (P3[1] + cI * (P3[2]))) +
         F1[5] * (F2[2] * (+cI * (P3[2]) - P3[1]) + F2[3] * (P3[0] + P3[3])));
    TMP2 = (F1[2] * (F2[4] * (P3[0] + P3[3]) + F2[5] * (P3[1] + cI * (P3[2]))) +
            F1[3] * (F2[4] * (P3[1] - cI * (P3[2])) + F2[5] * (P3[0] - P3[3])));
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    V3[2] = denom * 2. * cI *
            (OM3 * 1. / 2. * P3[0] * (TMP2 - 2. * (TMP3)) +
             (-1. / 2. * (F1[2] * F2[4] + F1[3] * F2[5]) + F1[4] * F2[2] +
              F1[5] * F2[3]));
    V3[3] = denom * 2. * cI *
            (OM3 * 1. / 2. * P3[1] * (TMP2 - 2. * (TMP3)) +
             (+1. / 2. * (F1[2] * F2[5] + F1[3] * F2[4]) + F1[4] * F2[3] +
              F1[5] * F2[2]));
    V3[4] = denom * -2. * cI *
            (OM3 * 1. / 2. * P3[2] * (+2. * (TMP3)-TMP2) +
             (-1. / 2. * cI * (F1[2] * F2[5]) + 1. / 2. * cI * (F1[3] * F2[4]) -
              cI * (F1[4] * F2[3]) + cI * (F1[5] * F2[2])));
    V3[5] = denom * -2. * cI *
            (OM3 * 1. / 2. * P3[3] * (+2. * (TMP3)-TMP2) +
             (-1. / 2. * (F1[2] * F2[4]) + 1. / 2. * (F1[3] * F2[5]) -
              F1[4] * F2[2] + F1[5] * F2[3]));
}

void VVT13_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
             double M3, double W3, complex<double> T3[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP12;
    complex<double> TMP37;
    double P1[4];
    double OM3;
    double P2[4];
    double P3[4];
    complex<double> TMP30;
    complex<double> TMP16;
    complex<double> denom;
    complex<double> TMP26;
    complex<double> TMP25;
    complex<double> TMP9;
    complex<double> TMP38;
    P1[0] = V1[0].real();
    P1[1] = V1[1].real();
    P1[2] = V1[1].imag();
    P1[3] = V1[0].imag();
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    OM3 = 0.;
    if (M3 != 0.)
        OM3 = 1. / pow(M3, 2);
    T3[0] = +V1[0] + V2[0];
    T3[1] = +V1[1] + V2[1];
    P3[0] = -T3[0].real();
    P3[1] = -T3[1].real();
    P3[2] = -T3[1].imag();
    P3[3] = -T3[0].imag();
    TMP25 = (V2[2] * V1[2] - V2[3] * V1[3] - V2[4] * V1[4] - V2[5] * V1[5]);
    TMP26 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    TMP30 = (P2[0] * V1[2] - P2[1] * V1[3] - P2[2] * V1[4] - P2[3] * V1[5]);
    TMP38 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]);
    TMP9 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    TMP16 = (P1[0] * P2[0] - P1[1] * P2[1] - P1[2] * P2[2] - P1[3] * P2[3]);
    TMP37 = (P3[0] * V1[2] - P3[1] * V1[3] - P3[2] * V1[4] - P3[3] * V1[5]);
    TMP12 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]);
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    T3[2] =
        denom * 2. *
        (TMP12 * (TMP37 * (TMP26 * -1. / 3. *
                               (+cI * (P3[0] * P3[0] * OM3) + -1. / 1. * cI) -
                           cI * (P1[0] * V2[2])) +
                  TMP9 * (TMP25 * 1. / 3. *
                              (+cI * (P3[0] * P3[0] * OM3) + -1. / 1. * cI) +
                          cI * (V2[2] * V1[2]))) +
         TMP38 * (TMP37 * (TMP16 * 1. / 3. *
                               (+cI * (P3[0] * P3[0] * OM3) + -1. / 1. * cI) +
                           cI * (P1[0] * P2[0])) +
                  TMP9 * (TMP30 * -1. / 3. *
                              (+cI * (P3[0] * P3[0] * OM3) + -1. / 1. * cI) -
                          cI * (P2[0] * V1[2]))));
    T3[6] = denom *
            (TMP12 * (TMP37 * -1. *
                          (+cI * (P1[0] * V2[3] + P1[1] * V2[2]) +
                           2. / 3. * cI * (P3[0] * P3[1] * OM3 * TMP26)) +
                      TMP9 * (+cI * (V2[3] * V1[2] + V2[2] * V1[3]) +
                              2. / 3. * cI * (P3[0] * P3[1] * OM3 * TMP25))) +
             TMP38 * (TMP37 * (+cI * (P1[0] * P2[1] + P1[1] * P2[0]) +
                               2. / 3. * cI * (P3[0] * P3[1] * OM3 * TMP16)) -
                      TMP9 * (+cI * (P2[0] * V1[3] + P2[1] * V1[2]) +
                              2. / 3. * cI * (P3[0] * P3[1] * OM3 * TMP30))));
    T3[10] = denom *
             (TMP12 * (TMP37 * -1. *
                           (+cI * (P1[0] * V2[4] + P1[2] * V2[2]) +
                            2. / 3. * cI * (P3[0] * P3[2] * OM3 * TMP26)) +
                       TMP9 * (+cI * (V2[4] * V1[2] + V2[2] * V1[4]) +
                               2. / 3. * cI * (P3[0] * P3[2] * OM3 * TMP25))) +
              TMP38 * (TMP37 * (+cI * (P1[0] * P2[2] + P1[2] * P2[0]) +
                                2. / 3. * cI * (P3[0] * P3[2] * OM3 * TMP16)) -
                       TMP9 * (+cI * (P2[0] * V1[4] + P2[2] * V1[2]) +
                               2. / 3. * cI * (P3[0] * P3[2] * OM3 * TMP30))));
    T3[14] = denom *
             (TMP12 * (TMP37 * -1. *
                           (+cI * (P1[0] * V2[5] + P1[3] * V2[2]) +
                            2. / 3. * cI * (P3[0] * P3[3] * OM3 * TMP26)) +
                       TMP9 * (+cI * (V2[5] * V1[2] + V2[2] * V1[5]) +
                               2. / 3. * cI * (P3[0] * P3[3] * OM3 * TMP25))) +
              TMP38 * (TMP37 * (+cI * (P1[0] * P2[3] + P1[3] * P2[0]) +
                                2. / 3. * cI * (P3[0] * P3[3] * OM3 * TMP16)) -
                       TMP9 * (+cI * (P2[0] * V1[5] + P2[3] * V1[2]) +
                               2. / 3. * cI * (P3[0] * P3[3] * OM3 * TMP30))));
    T3[3] = denom *
            (TMP12 * (TMP37 * -1. *
                          (+cI * (P1[1] * V2[2] + P1[0] * V2[3]) +
                           2. / 3. * cI * (P3[0] * P3[1] * OM3 * TMP26)) +
                      TMP9 * (+cI * (V2[2] * V1[3] + V2[3] * V1[2]) +
                              2. / 3. * cI * (P3[0] * P3[1] * OM3 * TMP25))) +
             TMP38 * (TMP37 * (+cI * (P1[1] * P2[0] + P1[0] * P2[1]) +
                               2. / 3. * cI * (P3[0] * P3[1] * OM3 * TMP16)) -
                      TMP9 * (+cI * (P2[1] * V1[2] + P2[0] * V1[3]) +
                              2. / 3. * cI * (P3[0] * P3[1] * OM3 * TMP30))));
    T3[7] =
        denom * 2. *
        (TMP12 * (TMP37 * (TMP26 * -1. / 3. *
                               (+cI * (P3[1] * P3[1] * OM3) + 1. / 1. * cI) -
                           cI * (P1[1] * V2[3])) +
                  TMP9 * (TMP25 * 1. / 3. *
                              (+cI * (P3[1] * P3[1] * OM3) + 1. / 1. * cI) +
                          cI * (V2[3] * V1[3]))) +
         TMP38 * (TMP37 * (TMP16 * 1. / 3. *
                               (+cI * (P3[1] * P3[1] * OM3) + 1. / 1. * cI) +
                           cI * (P1[1] * P2[1])) +
                  TMP9 * (TMP30 * -1. / 3. *
                              (+cI * (P3[1] * P3[1] * OM3) + 1. / 1. * cI) -
                          cI * (P2[1] * V1[3]))));
    T3[11] = denom *
             (TMP12 * (TMP37 * -1. *
                           (+cI * (P1[1] * V2[4] + P1[2] * V2[3]) +
                            2. / 3. * cI * (P3[1] * P3[2] * OM3 * TMP26)) +
                       TMP9 * (+cI * (V2[4] * V1[3] + V2[3] * V1[4]) +
                               2. / 3. * cI * (P3[1] * P3[2] * OM3 * TMP25))) +
              TMP38 * (TMP37 * (+cI * (P1[1] * P2[2] + P1[2] * P2[1]) +
                                2. / 3. * cI * (P3[1] * P3[2] * OM3 * TMP16)) -
                       TMP9 * (+cI * (P2[1] * V1[4] + P2[2] * V1[3]) +
                               2. / 3. * cI * (P3[1] * P3[2] * OM3 * TMP30))));
    T3[15] = denom *
             (TMP12 * (TMP37 * -1. *
                           (+cI * (P1[1] * V2[5] + P1[3] * V2[3]) +
                            2. / 3. * cI * (P3[1] * P3[3] * OM3 * TMP26)) +
                       TMP9 * (+cI * (V2[5] * V1[3] + V2[3] * V1[5]) +
                               2. / 3. * cI * (P3[1] * P3[3] * OM3 * TMP25))) +
              TMP38 * (TMP37 * (+cI * (P1[1] * P2[3] + P1[3] * P2[1]) +
                                2. / 3. * cI * (P3[1] * P3[3] * OM3 * TMP16)) -
                       TMP9 * (+cI * (P2[1] * V1[5] + P2[3] * V1[3]) +
                               2. / 3. * cI * (P3[1] * P3[3] * OM3 * TMP30))));
    T3[4] = denom *
            (TMP12 * (TMP37 * -1. *
                          (+cI * (P1[2] * V2[2] + P1[0] * V2[4]) +
                           2. / 3. * cI * (P3[0] * P3[2] * OM3 * TMP26)) +
                      TMP9 * (+cI * (V2[2] * V1[4] + V2[4] * V1[2]) +
                              2. / 3. * cI * (P3[0] * P3[2] * OM3 * TMP25))) +
             TMP38 * (TMP37 * (+cI * (P1[2] * P2[0] + P1[0] * P2[2]) +
                               2. / 3. * cI * (P3[0] * P3[2] * OM3 * TMP16)) -
                      TMP9 * (+cI * (P2[2] * V1[2] + P2[0] * V1[4]) +
                              2. / 3. * cI * (P3[0] * P3[2] * OM3 * TMP30))));
    T3[8] = denom *
            (TMP12 * (TMP37 * -1. *
                          (+cI * (P1[2] * V2[3] + P1[1] * V2[4]) +
                           2. / 3. * cI * (P3[1] * P3[2] * OM3 * TMP26)) +
                      TMP9 * (+cI * (V2[3] * V1[4] + V2[4] * V1[3]) +
                              2. / 3. * cI * (P3[1] * P3[2] * OM3 * TMP25))) +
             TMP38 * (TMP37 * (+cI * (P1[2] * P2[1] + P1[1] * P2[2]) +
                               2. / 3. * cI * (P3[1] * P3[2] * OM3 * TMP16)) -
                      TMP9 * (+cI * (P2[2] * V1[3] + P2[1] * V1[4]) +
                              2. / 3. * cI * (P3[1] * P3[2] * OM3 * TMP30))));
    T3[12] =
        denom * 2. *
        (TMP12 * (TMP37 * (TMP26 * -1. / 3. *
                               (+cI * (P3[2] * P3[2] * OM3) + 1. / 1. * cI) -
                           cI * (P1[2] * V2[4])) +
                  TMP9 * (TMP25 * 1. / 3. *
                              (+cI * (P3[2] * P3[2] * OM3) + 1. / 1. * cI) +
                          cI * (V2[4] * V1[4]))) +
         TMP38 * (TMP37 * (TMP16 * 1. / 3. *
                               (+cI * (P3[2] * P3[2] * OM3) + 1. / 1. * cI) +
                           cI * (P1[2] * P2[2])) +
                  TMP9 * (TMP30 * -1. / 3. *
                              (+cI * (P3[2] * P3[2] * OM3) + 1. / 1. * cI) -
                          cI * (P2[2] * V1[4]))));
    T3[16] = denom *
             (TMP12 * (TMP37 * -1. *
                           (+cI * (P1[2] * V2[5] + P1[3] * V2[4]) +
                            2. / 3. * cI * (P3[2] * P3[3] * OM3 * TMP26)) +
                       TMP9 * (+cI * (V2[5] * V1[4] + V2[4] * V1[5]) +
                               2. / 3. * cI * (P3[2] * P3[3] * OM3 * TMP25))) +
              TMP38 * (TMP37 * (+cI * (P1[2] * P2[3] + P1[3] * P2[2]) +
                                2. / 3. * cI * (P3[2] * P3[3] * OM3 * TMP16)) -
                       TMP9 * (+cI * (P2[2] * V1[5] + P2[3] * V1[4]) +
                               2. / 3. * cI * (P3[2] * P3[3] * OM3 * TMP30))));
    T3[5] = denom *
            (TMP12 * (TMP37 * -1. *
                          (+cI * (P1[3] * V2[2] + P1[0] * V2[5]) +
                           2. / 3. * cI * (P3[0] * P3[3] * OM3 * TMP26)) +
                      TMP9 * (+cI * (V2[2] * V1[5] + V2[5] * V1[2]) +
                              2. / 3. * cI * (P3[0] * P3[3] * OM3 * TMP25))) +
             TMP38 * (TMP37 * (+cI * (P1[3] * P2[0] + P1[0] * P2[3]) +
                               2. / 3. * cI * (P3[0] * P3[3] * OM3 * TMP16)) -
                      TMP9 * (+cI * (P2[3] * V1[2] + P2[0] * V1[5]) +
                              2. / 3. * cI * (P3[0] * P3[3] * OM3 * TMP30))));
    T3[9] = denom *
            (TMP12 * (TMP37 * -1. *
                          (+cI * (P1[3] * V2[3] + P1[1] * V2[5]) +
                           2. / 3. * cI * (P3[1] * P3[3] * OM3 * TMP26)) +
                      TMP9 * (+cI * (V2[3] * V1[5] + V2[5] * V1[3]) +
                              2. / 3. * cI * (P3[1] * P3[3] * OM3 * TMP25))) +
             TMP38 * (TMP37 * (+cI * (P1[3] * P2[1] + P1[1] * P2[3]) +
                               2. / 3. * cI * (P3[1] * P3[3] * OM3 * TMP16)) -
                      TMP9 * (+cI * (P2[3] * V1[3] + P2[1] * V1[5]) +
                              2. / 3. * cI * (P3[1] * P3[3] * OM3 * TMP30))));
    T3[13] = denom *
             (TMP12 * (TMP37 * -1. *
                           (+cI * (P1[3] * V2[4] + P1[2] * V2[5]) +
                            2. / 3. * cI * (P3[2] * P3[3] * OM3 * TMP26)) +
                       TMP9 * (+cI * (V2[4] * V1[5] + V2[5] * V1[4]) +
                               2. / 3. * cI * (P3[2] * P3[3] * OM3 * TMP25))) +
              TMP38 * (TMP37 * (+cI * (P1[3] * P2[2] + P1[2] * P2[3]) +
                                2. / 3. * cI * (P3[2] * P3[3] * OM3 * TMP16)) -
                       TMP9 * (+cI * (P2[3] * V1[4] + P2[2] * V1[5]) +
                               2. / 3. * cI * (P3[2] * P3[3] * OM3 * TMP30))));
    T3[17] =
        denom * 2. *
        (TMP12 * (TMP37 * (TMP26 * -1. / 3. *
                               (+cI * (P3[3] * P3[3] * OM3) + 1. / 1. * cI) -
                           cI * (P1[3] * V2[5])) +
                  TMP9 * (TMP25 * 1. / 3. *
                              (+cI * (P3[3] * P3[3] * OM3) + 1. / 1. * cI) +
                          cI * (V2[5] * V1[5]))) +
         TMP38 * (TMP37 * (TMP16 * 1. / 3. *
                               (+cI * (P3[3] * P3[3] * OM3) + 1. / 1. * cI) +
                           cI * (P1[3] * P2[3])) +
                  TMP9 * (TMP30 * -1. / 3. *
                              (+cI * (P3[3] * P3[3] * OM3) + 1. / 1. * cI) -
                          cI * (P2[3] * V1[5]))));
}

void FFV5_6_3(complex<double> F1[], complex<double> F2[], complex<double> COUP1,
              complex<double> COUP2, double M3, double W3, complex<double> V3[])
{
    //   complex<double> cI = complex<double> (0., 1.);
    //   double P3[4];
    //   double OM3;
    int i;
    complex<double> denom;
    complex<double> Vtmp[6];
    FFV5_3(F1, F2, COUP1, M3, W3, V3);
    FFV6_3(F1, F2, COUP2, M3, W3, Vtmp);
    i = 2;
    while (i < 6) {
        V3[i] = V3[i] + Vtmp[i];
        i++;
    }
}
void FFV5_8_3(complex<double> F1[], complex<double> F2[], complex<double> COUP1,
              complex<double> COUP2, double M3, double W3, complex<double> V3[])
{
    //   complex<double> cI = complex<double> (0., 1.);
    //   double P3[4];
    //   double OM3;
    int i;
    complex<double> denom;
    complex<double> Vtmp[6];
    FFV5_3(F1, F2, COUP1, M3, W3, V3);
    FFV8_3(F1, F2, COUP2, M3, W3, Vtmp);
    i = 2;
    while (i < 6) {
        V3[i] = V3[i] + Vtmp[i];
        i++;
    }
}

void VVT4_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
            double M3, double W3, complex<double> T3[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP12;
    complex<double> TMP37;
    double P1[4];
    double P2[4];
    double P3[4];
    complex<double> denom;
    double OM3;
    complex<double> TMP52;
    complex<double> TMP51;
    complex<double> TMP9;
    complex<double> TMP38;
    P1[0] = V1[0].real();
    P1[1] = V1[1].real();
    P1[2] = V1[1].imag();
    P1[3] = V1[0].imag();
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    OM3 = 0.;
    if (M3 != 0.)
        OM3 = 1. / pow(M3, 2);
    T3[0] = +V1[0] + V2[0];
    T3[1] = +V1[1] + V2[1];
    P3[0] = -T3[0].real();
    P3[1] = -T3[1].real();
    P3[2] = -T3[1].imag();
    P3[3] = -T3[0].imag();
    TMP51 = -1. * (P1[0] * (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                            (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                             P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                   (P1[1] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                             (P2[2] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                              P2[3] * (P3[0] * V2[4] - P3[2] * V2[2]))) +
                    (P1[2] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                              (P2[1] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                               P2[3] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                     P1[3] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                              (P2[1] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                               P2[2] * (P3[0] * V2[3] - P3[1] * V2[2]))))));
    TMP52 = -1. * (P1[0] * (P2[1] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P2[2] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                             P2[3] * (P3[1] * V1[4] - P3[2] * V1[3]))) +
                   (P1[1] * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                             (P2[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                              P2[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) +
                    (P1[2] * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                              (P2[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                               P2[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                     P1[3] * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                              (P2[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                               P2[2] * (P3[1] * V1[2] - P3[0] * V1[3]))))));
    TMP38 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]);
    TMP9 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    TMP37 = (P3[0] * V1[2] - P3[1] * V1[3] - P3[2] * V1[4] - P3[3] * V1[5]);
    TMP12 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]);
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    T3[2] = denom * -2. * cI *
            (TMP37 * (OM3 * P3[0] *
                          (TMP9 * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                                   (P2[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                                    P2[3] * (P3[1] * V2[4] - P3[2] * V2[3]))) -
                           1. / 3. * (P3[0] * TMP51)) +
                      (P1[0] * (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                 P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                       1. / 3. * (TMP51))) +
             TMP38 * (OM3 * P3[0] *
                          (TMP12 * (P1[1] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                                    (P1[2] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                                     P1[3] * (P3[1] * V1[4] - P3[2] * V1[3]))) -
                           1. / 3. * (P3[0] * TMP52)) +
                      (P2[0] * (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                (P1[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 P1[3] * (P3[2] * V1[3] - P3[1] * V1[4]))) +
                       1. / 3. * (TMP52))));
    T3[3] =
        denom * cI *
        (OM3 *
             (P3[0] *
                  (TMP37 * (TMP9 * (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                    (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                     P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                            2. / 3. * (P3[1] * TMP51)) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P1[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                  P1[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) +
                        2. / 3. * (P3[1] * TMP52))) +
              P3[1] * (TMP12 * TMP38 *
                           (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                            (P1[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                             P1[3] * (P3[2] * V1[3] - P3[1] * V1[4]))) +
                       TMP37 * TMP9 *
                           (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                            (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                             P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))))) +
         (TMP37 * (P1[0] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                            (P2[2] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                             P2[3] * (P3[0] * V2[4] - P3[2] * V2[2]))) +
                   P1[1] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                            (P2[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                             P2[3] * (P3[1] * V2[4] - P3[2] * V2[3])))) +
          TMP38 * (P2[0] * (P1[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P1[2] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                             P1[3] * (P3[0] * V1[4] - P3[2] * V1[2]))) +
                   P2[1] * (P1[1] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P1[2] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                             P1[3] * (P3[1] * V1[4] - P3[2] * V1[3]))))));
    T3[4] =
        denom * cI *
        (OM3 *
             (P3[0] *
                  (TMP37 * (TMP9 * (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                    (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                     P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                            2. / 3. * (P3[2] * TMP51)) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P1[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P1[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                        2. / 3. * (P3[2] * TMP52))) +
              P3[2] * (TMP12 * TMP38 *
                           (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                            (P1[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                             P1[3] * (P3[2] * V1[3] - P3[1] * V1[4]))) +
                       TMP37 * TMP9 *
                           (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                            (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                             P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))))) +
         (TMP37 * (P1[0] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                            (P2[1] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                   P1[2] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                            (P2[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                             P2[3] * (P3[1] * V2[4] - P3[2] * V2[3])))) +
          TMP38 * (P2[0] * (P1[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                            (P1[1] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P1[3] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                   P2[2] * (P1[1] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P1[2] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                             P1[3] * (P3[1] * V1[4] - P3[2] * V1[3]))))));
    T3[5] =
        denom * cI *
        (OM3 *
             (P3[0] *
                  (TMP37 * (TMP9 * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                    (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                     P2[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                            2. / 3. * (P3[3] * TMP51)) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P1[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P1[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                        2. / 3. * (P3[3] * TMP52))) +
              P3[3] * (TMP12 * TMP38 *
                           (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                            (P1[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                             P1[3] * (P3[2] * V1[3] - P3[1] * V1[4]))) +
                       TMP37 * TMP9 *
                           (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                            (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                             P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))))) +
         (TMP37 * (P1[0] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                            (P2[1] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                             P2[2] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                   P1[3] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                            (P2[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                             P2[3] * (P3[1] * V2[4] - P3[2] * V2[3])))) +
          TMP38 * (P2[0] * (P1[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                            (P1[1] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                             P1[2] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                   P2[3] * (P1[1] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P1[2] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                             P1[3] * (P3[1] * V1[4] - P3[2] * V1[3]))))));
    T3[6] =
        denom * cI *
        (OM3 *
             (P3[0] *
                  (TMP37 * (TMP9 * (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                    (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                     P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                            2. / 3. * (P3[1] * TMP51)) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P1[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                  P1[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) +
                        2. / 3. * (P3[1] * TMP52))) +
              P3[1] * (TMP12 * TMP38 *
                           (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                            (P1[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                             P1[3] * (P3[2] * V1[3] - P3[1] * V1[4]))) +
                       TMP37 * TMP9 *
                           (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                            (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                             P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))))) +
         (TMP37 * (P1[0] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                            (P2[2] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                             P2[3] * (P3[0] * V2[4] - P3[2] * V2[2]))) +
                   P1[1] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                            (P2[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                             P2[3] * (P3[1] * V2[4] - P3[2] * V2[3])))) +
          TMP38 * (P2[0] * (P1[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P1[2] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                             P1[3] * (P3[0] * V1[4] - P3[2] * V1[2]))) +
                   P2[1] * (P1[1] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P1[2] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                             P1[3] * (P3[1] * V1[4] - P3[2] * V1[3]))))));
    T3[7] = denom * 2. * cI *
            (TMP37 * (OM3 * P3[1] *
                          (TMP9 * (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                   (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                    P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                           1. / 3. * (P3[1] * TMP51)) +
                      (P1[1] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                                (P2[2] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                 P2[3] * (P3[0] * V2[4] - P3[2] * V2[2]))) +
                       1. / 3. * (TMP51))) +
             TMP38 * (OM3 * P3[1] *
                          (TMP12 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                    (P1[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                     P1[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) +
                           1. / 3. * (P3[1] * TMP52)) +
                      (P2[1] * (P1[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                                (P1[2] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                 P1[3] * (P3[0] * V1[4] - P3[2] * V1[2]))) +
                       1. / 3. * (TMP52))));
    T3[8] =
        denom * cI *
        (OM3 *
             (P3[1] *
                  (TMP37 * (TMP9 * (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                    (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                     P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                            2. / 3. * (P3[2] * TMP51)) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P1[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P1[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                        2. / 3. * (P3[2] * TMP52))) +
              P3[2] * (TMP12 * TMP38 *
                           (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                            (P1[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P1[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) +
                       TMP37 * TMP9 *
                           (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                            (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))))) +
         (TMP37 * (P1[1] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                            (P2[1] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                   P1[2] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                            (P2[2] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                             P2[3] * (P3[0] * V2[4] - P3[2] * V2[2])))) +
          TMP38 * (P2[1] * (P1[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                            (P1[1] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P1[3] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                   P2[2] * (P1[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P1[2] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                             P1[3] * (P3[0] * V1[4] - P3[2] * V1[2]))))));
    T3[9] =
        denom * cI *
        (OM3 *
             (P3[1] *
                  (TMP37 * (TMP9 * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                    (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                     P2[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                            2. / 3. * (P3[3] * TMP51)) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P1[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P1[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                        2. / 3. * (P3[3] * TMP52))) +
              P3[3] * (TMP12 * TMP38 *
                           (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                            (P1[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P1[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) +
                       TMP37 * TMP9 *
                           (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                            (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))))) +
         (TMP37 * (P1[1] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                            (P2[1] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                             P2[2] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                   P1[3] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                            (P2[2] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                             P2[3] * (P3[0] * V2[4] - P3[2] * V2[2])))) +
          TMP38 * (P2[1] * (P1[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                            (P1[1] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                             P1[2] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                   P2[3] * (P1[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P1[2] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                             P1[3] * (P3[0] * V1[4] - P3[2] * V1[2]))))));
    T3[10] =
        denom * cI *
        (OM3 *
             (P3[0] *
                  (TMP37 * (TMP9 * (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                    (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                     P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                            2. / 3. * (P3[2] * TMP51)) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P1[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P1[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                        2. / 3. * (P3[2] * TMP52))) +
              P3[2] * (TMP12 * TMP38 *
                           (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                            (P1[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                             P1[3] * (P3[2] * V1[3] - P3[1] * V1[4]))) +
                       TMP37 * TMP9 *
                           (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                            (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                             P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))))) +
         (TMP37 * (P1[0] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                            (P2[1] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                   P1[2] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                            (P2[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                             P2[3] * (P3[1] * V2[4] - P3[2] * V2[3])))) +
          TMP38 * (P2[0] * (P1[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                            (P1[1] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P1[3] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                   P2[2] * (P1[1] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P1[2] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                             P1[3] * (P3[1] * V1[4] - P3[2] * V1[3]))))));
    T3[11] =
        denom * cI *
        (OM3 *
             (P3[1] *
                  (TMP37 * (TMP9 * (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                    (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                     P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                            2. / 3. * (P3[2] * TMP51)) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P1[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P1[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                        2. / 3. * (P3[2] * TMP52))) +
              P3[2] * (TMP12 * TMP38 *
                           (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                            (P1[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P1[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) +
                       TMP37 * TMP9 *
                           (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                            (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))))) +
         (TMP37 * (P1[1] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                            (P2[1] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                   P1[2] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                            (P2[2] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                             P2[3] * (P3[0] * V2[4] - P3[2] * V2[2])))) +
          TMP38 * (P2[1] * (P1[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                            (P1[1] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P1[3] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                   P2[2] * (P1[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P1[2] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                             P1[3] * (P3[0] * V1[4] - P3[2] * V1[2]))))));
    T3[12] =
        denom * 2. * cI *
        (TMP37 * (OM3 * P3[2] *
                      (TMP9 * (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                               (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                       1. / 3. * (P3[2] * TMP51)) +
                  (P1[2] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                            (P2[1] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                   1. / 3. * (TMP51))) +
         TMP38 * (OM3 * P3[2] *
                      (TMP12 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                (P1[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                 P1[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                       1. / 3. * (P3[2] * TMP52)) +
                  (P2[2] * (P1[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                            (P1[1] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P1[3] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                   1. / 3. * (TMP52))));
    T3[13] =
        denom * cI *
        (OM3 *
             (P3[2] *
                  (TMP37 * (TMP9 * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                    (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                     P2[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                            2. / 3. * (P3[3] * TMP51)) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P1[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P1[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                        2. / 3. * (P3[3] * TMP52))) +
              P3[3] * (TMP12 * TMP38 *
                           (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                            (P1[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                             P1[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                       TMP37 * TMP9 *
                           (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                            (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                             P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))))) +
         (TMP37 * (P1[2] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                            (P2[1] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                             P2[2] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                   P1[3] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                            (P2[1] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[1] * V2[2] - P3[0] * V2[3])))) +
          TMP38 * (P2[2] * (P1[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                            (P1[1] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                             P1[2] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                   P2[3] * (P1[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                            (P1[1] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P1[3] * (P3[1] * V1[2] - P3[0] * V1[3]))))));
    T3[14] =
        denom * cI *
        (OM3 *
             (P3[0] *
                  (TMP37 * (TMP9 * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                    (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                     P2[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                            2. / 3. * (P3[3] * TMP51)) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P1[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P1[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                        2. / 3. * (P3[3] * TMP52))) +
              P3[3] * (TMP12 * TMP38 *
                           (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                            (P1[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                             P1[3] * (P3[2] * V1[3] - P3[1] * V1[4]))) +
                       TMP37 * TMP9 *
                           (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                            (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                             P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))))) +
         (TMP37 * (P1[0] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                            (P2[1] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                             P2[2] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                   P1[3] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                            (P2[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                             P2[3] * (P3[1] * V2[4] - P3[2] * V2[3])))) +
          TMP38 * (P2[0] * (P1[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                            (P1[1] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                             P1[2] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                   P2[3] * (P1[1] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P1[2] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                             P1[3] * (P3[1] * V1[4] - P3[2] * V1[3]))))));
    T3[15] =
        denom * cI *
        (OM3 *
             (P3[1] *
                  (TMP37 * (TMP9 * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                    (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                     P2[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                            2. / 3. * (P3[3] * TMP51)) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P1[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P1[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                        2. / 3. * (P3[3] * TMP52))) +
              P3[3] * (TMP12 * TMP38 *
                           (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                            (P1[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P1[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) +
                       TMP37 * TMP9 *
                           (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                            (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))))) +
         (TMP37 * (P1[1] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                            (P2[1] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                             P2[2] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                   P1[3] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                            (P2[2] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                             P2[3] * (P3[0] * V2[4] - P3[2] * V2[2])))) +
          TMP38 * (P2[1] * (P1[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                            (P1[1] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                             P1[2] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                   P2[3] * (P1[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P1[2] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                             P1[3] * (P3[0] * V1[4] - P3[2] * V1[2]))))));
    T3[16] =
        denom * cI *
        (OM3 *
             (P3[2] *
                  (TMP37 * (TMP9 * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                    (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                     P2[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                            2. / 3. * (P3[3] * TMP51)) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P1[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P1[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                        2. / 3. * (P3[3] * TMP52))) +
              P3[3] * (TMP12 * TMP38 *
                           (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                            (P1[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                             P1[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                       TMP37 * TMP9 *
                           (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                            (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                             P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))))) +
         (TMP37 * (P1[2] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                            (P2[1] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                             P2[2] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                   P1[3] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                            (P2[1] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[1] * V2[2] - P3[0] * V2[3])))) +
          TMP38 * (P2[2] * (P1[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                            (P1[1] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                             P1[2] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                   P2[3] * (P1[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                            (P1[1] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P1[3] * (P3[1] * V1[2] - P3[0] * V1[3]))))));
    T3[17] =
        denom * 2. * cI *
        (TMP37 * (OM3 * P3[3] *
                      (TMP9 * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                               (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                P2[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                       1. / 3. * (P3[3] * TMP51)) +
                  (P1[3] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                            (P2[1] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                             P2[2] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                   1. / 3. * (TMP51))) +
         TMP38 * (OM3 * P3[3] *
                      (TMP12 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                (P1[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                 P1[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                       1. / 3. * (P3[3] * TMP52)) +
                  (P2[3] * (P1[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                            (P1[1] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                             P1[2] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                   1. / 3. * (TMP52))));
}

void FFV8_3(complex<double> F1[], complex<double> F2[], complex<double> COUP,
            double M3, double W3, complex<double> V3[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP2;
    double P3[4];
    double OM3;
    complex<double> denom;
    complex<double> TMP3;
    OM3 = 0.;
    if (M3 != 0.)
        OM3 = 1. / pow(M3, 2);
    V3[0] = +F1[0] + F2[0];
    V3[1] = +F1[1] + F2[1];
    P3[0] = -V3[0].real();
    P3[1] = -V3[1].real();
    P3[2] = -V3[1].imag();
    P3[3] = -V3[0].imag();
    TMP3 =
        (F1[4] * (F2[2] * (P3[0] - P3[3]) - F2[3] * (P3[1] + cI * (P3[2]))) +
         F1[5] * (F2[2] * (+cI * (P3[2]) - P3[1]) + F2[3] * (P3[0] + P3[3])));
    TMP2 = (F1[2] * (F2[4] * (P3[0] + P3[3]) + F2[5] * (P3[1] + cI * (P3[2]))) +
            F1[3] * (F2[4] * (P3[1] - cI * (P3[2])) + F2[5] * (P3[0] - P3[3])));
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    V3[2] = denom * -4. * cI *
            (OM3 * -1. / 4. * P3[0] * (TMP2 + 4. * (TMP3)) +
             (+1. / 4. * (F1[2] * F2[4] + F1[3] * F2[5]) + F1[4] * F2[2] +
              F1[5] * F2[3]));
    V3[3] = denom * -4. * cI *
            (OM3 * -1. / 4. * P3[1] * (TMP2 + 4. * (TMP3)) +
             (-1. / 4. * (F1[2] * F2[5] + F1[3] * F2[4]) + F1[4] * F2[3] +
              F1[5] * F2[2]));
    V3[4] = denom * 4. * cI *
            (OM3 * 1. / 4. * P3[2] * (TMP2 + 4. * (TMP3)) +
             (+1. / 4. * cI * (F1[2] * F2[5]) - 1. / 4. * cI * (F1[3] * F2[4]) -
              cI * (F1[4] * F2[3]) + cI * (F1[5] * F2[2])));
    V3[5] = denom * 4. * cI *
            (OM3 * 1. / 4. * P3[3] * (TMP2 + 4. * (TMP3)) +
             (+1. / 4. * (F1[2] * F2[4]) - 1. / 4. * (F1[3] * F2[5]) -
              F1[4] * F2[2] + F1[5] * F2[3]));
}

void VVT9_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
            double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP34;
    complex<double> TMP38;
    double P2[4];
    double P3[4];
    complex<double> TMP15;
    complex<double> TMP32;
    complex<double> denom;
    complex<double> TMP29;
    double OM1;
    complex<double> TMP9;
    double P1[4];
    OM1 = 0.;
    if (M1 != 0.)
        OM1 = 1. / pow(M1, 2);
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    P3[0] = T3[0].real();
    P3[1] = T3[1].real();
    P3[2] = T3[1].imag();
    P3[3] = T3[0].imag();
    V1[0] = +V2[0] + T3[0];
    V1[1] = +V2[1] + T3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP29 =
        (P1[0] * -1. *
             (T3[6] * V2[3] + T3[10] * V2[4] + T3[14] * V2[5] - T3[2] * V2[2]) +
         (P1[1] * (T3[7] * V2[3] + T3[11] * V2[4] + T3[15] * V2[5] -
                   T3[3] * V2[2]) +
          (P1[2] * (T3[8] * V2[3] + T3[12] * V2[4] + T3[16] * V2[5] -
                    T3[4] * V2[2]) +
           P1[3] * (T3[9] * V2[3] + T3[13] * V2[4] + T3[17] * V2[5] -
                    T3[5] * V2[2]))));
    TMP38 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]);
    TMP9 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    TMP15 =
        (P1[0] * -1. *
             (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] - P2[0] * T3[2]) +
         (P1[1] *
              (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9] - P2[0] * T3[6]) +
          (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] * T3[13] -
                    P2[0] * T3[10]) +
           P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] + P2[3] * T3[17] -
                    P2[0] * T3[14]))));
    TMP32 =
        (P1[0] * -1. *
             (T3[3] * V2[3] + T3[4] * V2[4] + T3[5] * V2[5] - T3[2] * V2[2]) +
         (P1[1] *
              (T3[7] * V2[3] + T3[8] * V2[4] + T3[9] * V2[5] - T3[6] * V2[2]) +
          (P1[2] * (T3[11] * V2[3] + T3[12] * V2[4] + T3[13] * V2[5] -
                    T3[10] * V2[2]) +
           P1[3] * (T3[15] * V2[3] + T3[16] * V2[4] + T3[17] * V2[5] -
                    T3[14] * V2[2]))));
    TMP34 =
        (P1[0] * -1. *
             (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] - P2[0] * T3[2]) +
         (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] * T3[15] -
                   P2[0] * T3[3]) +
          (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] + P2[3] * T3[16] -
                    P2[0] * T3[4]) +
           P1[3] * (P2[1] * T3[9] + P2[2] * T3[13] + P2[3] * T3[17] -
                    P2[0] * T3[5]))));
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] =
        denom * -cI *
        (TMP38 * (OM1 * -P1[0] * (TMP15 + TMP34) +
                  (P2[1] * -1. * (T3[3] + T3[6]) +
                   (P2[2] * -1. * (T3[4] + T3[10]) +
                    (P2[3] * -1. * (T3[5] + T3[14]) + 2. * (P2[0] * T3[2]))))) +
         (OM1 * -P1[0] * TMP9 * (TMP29 + TMP32) + P3[0] * (TMP29 + TMP32)));
    V1[3] = denom * cI *
            (TMP38 * (OM1 * P1[1] * (TMP15 + TMP34) +
                      (P2[0] * -1. * (T3[6] + T3[3]) +
                       (P2[2] * (T3[8] + T3[11]) +
                        (P2[3] * (T3[9] + T3[15]) + 2. * (P2[1] * T3[7]))))) +
             (OM1 * P1[1] * TMP9 * (TMP29 + TMP32) - P3[1] * (TMP29 + TMP32)));
    V1[4] = denom * cI *
            (TMP38 * (OM1 * P1[2] * (TMP15 + TMP34) +
                      (P2[0] * -1. * (T3[10] + T3[4]) +
                       (P2[1] * (T3[11] + T3[8]) +
                        (P2[3] * (T3[13] + T3[16]) + 2. * (P2[2] * T3[12]))))) +
             (OM1 * P1[2] * TMP9 * (TMP29 + TMP32) - P3[2] * (TMP29 + TMP32)));
    V1[5] = denom * cI *
            (TMP38 * (OM1 * P1[3] * (TMP15 + TMP34) +
                      (P2[0] * -1. * (T3[14] + T3[5]) +
                       (P2[1] * (T3[15] + T3[9]) +
                        (P2[2] * (T3[16] + T3[13]) + 2. * (P2[3] * T3[17]))))) +
             (OM1 * P1[3] * TMP9 * (TMP29 + TMP32) - P3[3] * (TMP29 + TMP32)));
}

void VVT6_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
            double M3, double W3, complex<double> T3[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP12;
    complex<double> TMP37;
    double P1[4];
    double P2[4];
    double P3[4];
    double OM3;
    complex<double> TMP54;
    complex<double> denom;
    complex<double> TMP53;
    complex<double> TMP52;
    complex<double> TMP51;
    complex<double> TMP9;
    complex<double> TMP38;
    P1[0] = V1[0].real();
    P1[1] = V1[1].real();
    P1[2] = V1[1].imag();
    P1[3] = V1[0].imag();
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    OM3 = 0.;
    if (M3 != 0.)
        OM3 = 1. / pow(M3, 2);
    T3[0] = +V1[0] + V2[0];
    T3[1] = +V1[1] + V2[1];
    P3[0] = -T3[0].real();
    P3[1] = -T3[1].real();
    P3[2] = -T3[1].imag();
    P3[3] = -T3[0].imag();
    TMP51 = -1. * (P1[0] * (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                            (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                             P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                   (P1[1] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                             (P2[2] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                              P2[3] * (P3[0] * V2[4] - P3[2] * V2[2]))) +
                    (P1[2] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                              (P2[1] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                               P2[3] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                     P1[3] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                              (P2[1] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                               P2[2] * (P3[0] * V2[3] - P3[1] * V2[2]))))));
    TMP53 = -1. * (P1[0] * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                            (P2[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                             P2[3] * (P3[2] * V1[3] - P3[1] * V1[4]))) +
                   (P1[1] * (P2[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                             (P2[2] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                              P2[3] * (P3[0] * V1[4] - P3[2] * V1[2]))) +
                    (P1[2] * (P2[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                              (P2[1] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                               P2[3] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                     P1[3] * (P2[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                              (P2[1] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                               P2[2] * (P3[0] * V1[3] - P3[1] * V1[2]))))));
    TMP52 = -1. * (P1[0] * (P2[1] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P2[2] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                             P2[3] * (P3[1] * V1[4] - P3[2] * V1[3]))) +
                   (P1[1] * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                             (P2[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                              P2[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) +
                    (P1[2] * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                              (P2[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                               P2[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                     P1[3] * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                              (P2[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                               P2[2] * (P3[1] * V1[2] - P3[0] * V1[3]))))));
    TMP54 = -1. * (P1[0] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                            (P2[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                             P2[3] * (P3[1] * V2[4] - P3[2] * V2[3]))) +
                   (P1[1] * (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                             (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                              P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                    (P1[2] * (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                              (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                               P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                     P1[3] * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                              (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                               P2[2] * (P3[1] * V2[2] - P3[0] * V2[3]))))));
    TMP38 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]);
    TMP9 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    TMP37 = (P3[0] * V1[2] - P3[1] * V1[3] - P3[2] * V1[4] - P3[3] * V1[5]);
    TMP12 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]);
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    T3[2] = denom * -2. * cI *
            (OM3 * P3[0] *
                 (TMP37 * (TMP12 * (P1[1] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                                    (P1[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                                     P1[3] * (P3[1] * V2[4] - P3[2] * V2[3]))) +
                           (TMP9 * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                                    (P2[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                                     P2[3] * (P3[1] * V2[4] - P3[2] * V2[3]))) -
                            1. / 3. * (P3[0] * (TMP51 + TMP54)))) +
                  TMP38 * (TMP12 * (P1[1] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                                    (P1[2] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                                     P1[3] * (P3[1] * V1[4] - P3[2] * V1[3]))) +
                           (TMP9 * (P2[1] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                                    (P2[2] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                                     P2[3] * (P3[1] * V1[4] - P3[2] * V1[3]))) -
                            1. / 3. * (P3[0] * (TMP53 + TMP52))))) +
             (TMP37 * (P1[0] * (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                 P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                       (P2[0] * (P1[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P1[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                  P1[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                        (+1. / 3. * (TMP51 + TMP54)))) +
              TMP38 * (P1[0] * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                (P2[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 P2[3] * (P3[2] * V1[3] - P3[1] * V1[4]))) +
                       (P2[0] * (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P1[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                  P1[3] * (P3[2] * V1[3] - P3[1] * V1[4]))) +
                        (+1. / 3. * (TMP53 + TMP52))))));
    T3[3] =
        denom * cI *
        (OM3 *
             (P3[0] *
                  (TMP37 *
                       (TMP12 * (P1[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P1[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                  P1[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                        (TMP9 * (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                  P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                         2. / 3. * (P3[1] * (TMP51 + TMP54)))) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P1[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                  P1[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) +
                        (TMP9 * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P2[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                  P2[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) +
                         2. / 3. * (P3[1] * (TMP53 + TMP52))))) +
              P3[1] *
                  (TMP12 *
                       (TMP37 * (P1[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P1[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                  P1[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                        TMP38 * (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P1[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                  P1[3] * (P3[2] * V1[3] - P3[1] * V1[4])))) +
                   TMP9 *
                       (TMP37 * (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                  P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                        TMP38 * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P2[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                  P2[3] * (P3[2] * V1[3] - P3[1] * V1[4])))))) +
         (TMP37 * (P1[0] * (P2[0] * 2. * (P3[2] * V2[5] - P3[3] * V2[4]) +
                            (P2[2] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                             P2[3] * (P3[0] * V2[4] - P3[2] * V2[2]))) +
                   (P1[1] * (P2[1] * 2. * (P3[2] * V2[5] - P3[3] * V2[4]) +
                             (P2[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                              P2[3] * (P3[1] * V2[4] - P3[2] * V2[3]))) +
                    (P1[2] * (P2[0] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                              P2[1] * (P3[3] * V2[3] - P3[1] * V2[5])) +
                     P1[3] * (P2[0] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                              P2[1] * (P3[1] * V2[4] - P3[2] * V2[3]))))) +
          TMP38 * (P1[0] * (P2[0] * 2. * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P2[2] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                             P2[3] * (P3[0] * V1[4] - P3[2] * V1[2]))) +
                   (P1[1] * (P2[1] * 2. * (P3[2] * V1[5] - P3[3] * V1[4]) +
                             (P2[2] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                              P2[3] * (P3[1] * V1[4] - P3[2] * V1[3]))) +
                    (P1[2] * (P2[0] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                              P2[1] * (P3[3] * V1[3] - P3[1] * V1[5])) +
                     P1[3] * (P2[0] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                              P2[1] * (P3[1] * V1[4] - P3[2] * V1[3])))))));
    T3[4] =
        denom * cI *
        (OM3 *
             (P3[0] *
                  (TMP37 *
                       (TMP12 * (P1[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                 (P1[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                  P1[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                        (TMP9 * (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                 (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                  P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                         2. / 3. * (P3[2] * (TMP51 + TMP54)))) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P1[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P1[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                        (TMP9 * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P2[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P2[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                         2. / 3. * (P3[2] * (TMP53 + TMP52))))) +
              P3[2] *
                  (TMP12 *
                       (TMP37 * (P1[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P1[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                  P1[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                        TMP38 * (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P1[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                  P1[3] * (P3[2] * V1[3] - P3[1] * V1[4])))) +
                   TMP9 *
                       (TMP37 * (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                  P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                        TMP38 * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P2[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                  P2[3] * (P3[2] * V1[3] - P3[1] * V1[4])))))) +
         (TMP37 * (P1[0] * (P2[0] * 2. * (P3[3] * V2[3] - P3[1] * V2[5]) +
                            (P2[1] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                   (P1[2] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                             (P2[2] * 2. * (P3[3] * V2[3] - P3[1] * V2[5]) +
                              P2[3] * (P3[1] * V2[4] - P3[2] * V2[3]))) +
                    (P1[1] * (P2[0] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                              P2[2] * (P3[2] * V2[5] - P3[3] * V2[4])) +
                     P1[3] * (P2[0] * (P3[1] * V2[2] - P3[0] * V2[3]) +
                              P2[2] * (P3[1] * V2[4] - P3[2] * V2[3]))))) +
          TMP38 * (P1[0] * (P2[0] * 2. * (P3[3] * V1[3] - P3[1] * V1[5]) +
                            (P2[1] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P2[3] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                   (P1[2] * (P2[1] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                             (P2[2] * 2. * (P3[3] * V1[3] - P3[1] * V1[5]) +
                              P2[3] * (P3[1] * V1[4] - P3[2] * V1[3]))) +
                    (P1[1] * (P2[0] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                              P2[2] * (P3[2] * V1[5] - P3[3] * V1[4])) +
                     P1[3] * (P2[0] * (P3[1] * V1[2] - P3[0] * V1[3]) +
                              P2[2] * (P3[1] * V1[4] - P3[2] * V1[3])))))));
    T3[5] =
        denom * cI *
        (OM3 *
             (P3[0] *
                  (TMP37 *
                       (TMP12 * (P1[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                 (P1[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                  P1[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                        (TMP9 * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                 (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                  P2[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                         2. / 3. * (P3[3] * (TMP51 + TMP54)))) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P1[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P1[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                        (TMP9 * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P2[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P2[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                         2. / 3. * (P3[3] * (TMP53 + TMP52))))) +
              P3[3] *
                  (TMP12 *
                       (TMP37 * (P1[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P1[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                  P1[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                        TMP38 * (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P1[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                  P1[3] * (P3[2] * V1[3] - P3[1] * V1[4])))) +
                   TMP9 *
                       (TMP37 * (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                  P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                        TMP38 * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P2[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                  P2[3] * (P3[2] * V1[3] - P3[1] * V1[4])))))) +
         (TMP37 * (P1[0] * (P2[0] * 2. * (P3[1] * V2[4] - P3[2] * V2[3]) +
                            (P2[1] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                             P2[2] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                   (P1[3] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                             (P2[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                              2. * (P2[3] * (P3[1] * V2[4] - P3[2] * V2[3])))) +
                    (P1[1] * (P2[0] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                              P2[3] * (P3[2] * V2[5] - P3[3] * V2[4])) +
                     P1[2] * (P2[0] * (P3[0] * V2[3] - P3[1] * V2[2]) +
                              P2[3] * (P3[3] * V2[3] - P3[1] * V2[5]))))) +
          TMP38 * (P1[0] * (P2[0] * 2. * (P3[1] * V1[4] - P3[2] * V1[3]) +
                            (P2[1] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                             P2[2] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                   (P1[3] * (P2[1] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                             (P2[2] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                              2. * (P2[3] * (P3[1] * V1[4] - P3[2] * V1[3])))) +
                    (P1[1] * (P2[0] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                              P2[3] * (P3[2] * V1[5] - P3[3] * V1[4])) +
                     P1[2] * (P2[0] * (P3[0] * V1[3] - P3[1] * V1[2]) +
                              P2[3] * (P3[3] * V1[3] - P3[1] * V1[5])))))));
    T3[6] =
        denom * cI *
        (OM3 *
             (P3[0] *
                  (TMP37 *
                       (TMP12 * (P1[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P1[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                  P1[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                        (TMP9 * (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                  P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                         2. / 3. * (P3[1] * (TMP51 + TMP54)))) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P1[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                  P1[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) +
                        (TMP9 * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P2[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                  P2[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) +
                         2. / 3. * (P3[1] * (TMP53 + TMP52))))) +
              P3[1] *
                  (TMP12 *
                       (TMP37 * (P1[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P1[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                  P1[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                        TMP38 * (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P1[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                  P1[3] * (P3[2] * V1[3] - P3[1] * V1[4])))) +
                   TMP9 *
                       (TMP37 * (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                  P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                        TMP38 * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P2[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                  P2[3] * (P3[2] * V1[3] - P3[1] * V1[4])))))) +
         (TMP37 * (P1[0] * (P2[0] * 2. * (P3[2] * V2[5] - P3[3] * V2[4]) +
                            (P2[2] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                             P2[3] * (P3[0] * V2[4] - P3[2] * V2[2]))) +
                   (P1[1] * (P2[1] * 2. * (P3[2] * V2[5] - P3[3] * V2[4]) +
                             (P2[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                              P2[3] * (P3[1] * V2[4] - P3[2] * V2[3]))) +
                    (P1[2] * (P2[0] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                              P2[1] * (P3[3] * V2[3] - P3[1] * V2[5])) +
                     P1[3] * (P2[0] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                              P2[1] * (P3[1] * V2[4] - P3[2] * V2[3]))))) +
          TMP38 * (P1[0] * (P2[0] * 2. * (P3[2] * V1[5] - P3[3] * V1[4]) +
                            (P2[2] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                             P2[3] * (P3[0] * V1[4] - P3[2] * V1[2]))) +
                   (P1[1] * (P2[1] * 2. * (P3[2] * V1[5] - P3[3] * V1[4]) +
                             (P2[2] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                              P2[3] * (P3[1] * V1[4] - P3[2] * V1[3]))) +
                    (P1[2] * (P2[0] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                              P2[1] * (P3[3] * V1[3] - P3[1] * V1[5])) +
                     P1[3] * (P2[0] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                              P2[1] * (P3[1] * V1[4] - P3[2] * V1[3])))))));
    T3[7] = denom * 2. * cI *
            (OM3 * P3[1] *
                 (TMP37 * (TMP12 * (P1[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                    (P1[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                     P1[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                           (TMP9 * (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                    (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                     P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                            1. / 3. * (P3[1] * (TMP51 + TMP54)))) +
                  TMP38 * (TMP12 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                    (P1[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                     P1[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) +
                           (TMP9 * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                    (P2[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                     P2[3] * (P3[2] * V1[2] - P3[0] * V1[4]))) +
                            1. / 3. * (P3[1] * (TMP53 + TMP52))))) +
             (TMP37 * (P1[1] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                                (P2[2] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                 P2[3] * (P3[0] * V2[4] - P3[2] * V2[2]))) +
                       (P2[1] * (P1[0] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                                 (P1[2] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                  P1[3] * (P3[0] * V2[4] - P3[2] * V2[2]))) +
                        (+1. / 3. * (TMP51 + TMP54)))) +
              TMP38 * (P1[1] * (P2[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                                (P2[2] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                 P2[3] * (P3[0] * V1[4] - P3[2] * V1[2]))) +
                       (P2[1] * (P1[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                                 (P1[2] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P1[3] * (P3[0] * V1[4] - P3[2] * V1[2]))) +
                        (+1. / 3. * (TMP53 + TMP52))))));
    T3[8] =
        denom * cI *
        (OM3 *
             (P3[1] *
                  (TMP37 *
                       (TMP12 * (P1[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                 (P1[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                  P1[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                        (TMP9 * (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                 (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                  P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                         2. / 3. * (P3[2] * (TMP51 + TMP54)))) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P1[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P1[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                        (TMP9 * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P2[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P2[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                         2. / 3. * (P3[2] * (TMP53 + TMP52))))) +
              P3[2] *
                  (TMP12 *
                       (TMP37 * (P1[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P1[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                  P1[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                        TMP38 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P1[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                  P1[3] * (P3[2] * V1[2] - P3[0] * V1[4])))) +
                   TMP9 *
                       (TMP37 * (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                  P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                        TMP38 * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P2[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                  P2[3] * (P3[2] * V1[2] - P3[0] * V1[4])))))) +
         (TMP37 * (P1[1] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                            (P2[1] * 2. * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                   (P1[2] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                             (P2[2] * 2. * (P3[3] * V2[2] - P3[0] * V2[5]) +
                              P2[3] * (P3[0] * V2[4] - P3[2] * V2[2]))) +
                    (P1[0] * (P2[1] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                              P2[2] * (P3[2] * V2[5] - P3[3] * V2[4])) +
                     P1[3] * (P2[1] * (P3[1] * V2[2] - P3[0] * V2[3]) +
                              P2[2] * (P3[0] * V2[4] - P3[2] * V2[2]))))) +
          TMP38 * (P1[1] * (P2[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                            (P2[1] * 2. * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P2[3] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                   (P1[2] * (P2[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                             (P2[2] * 2. * (P3[3] * V1[2] - P3[0] * V1[5]) +
                              P2[3] * (P3[0] * V1[4] - P3[2] * V1[2]))) +
                    (P1[0] * (P2[1] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                              P2[2] * (P3[2] * V1[5] - P3[3] * V1[4])) +
                     P1[3] * (P2[1] * (P3[1] * V1[2] - P3[0] * V1[3]) +
                              P2[2] * (P3[0] * V1[4] - P3[2] * V1[2])))))));
    T3[9] =
        denom * cI *
        (OM3 *
             (P3[1] *
                  (TMP37 *
                       (TMP12 * (P1[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                 (P1[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                  P1[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                        (TMP9 * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                 (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                  P2[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                         2. / 3. * (P3[3] * (TMP51 + TMP54)))) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P1[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P1[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                        (TMP9 * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P2[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P2[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                         2. / 3. * (P3[3] * (TMP53 + TMP52))))) +
              P3[3] *
                  (TMP12 *
                       (TMP37 * (P1[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P1[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                  P1[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                        TMP38 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P1[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                  P1[3] * (P3[2] * V1[2] - P3[0] * V1[4])))) +
                   TMP9 *
                       (TMP37 * (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                  P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                        TMP38 * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P2[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                  P2[3] * (P3[2] * V1[2] - P3[0] * V1[4])))))) +
         (TMP37 * (P1[1] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                            (P2[1] * 2. * (P3[2] * V2[2] - P3[0] * V2[4]) +
                             P2[2] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                   (P1[3] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                             (P2[2] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                              2. * (P2[3] * (P3[0] * V2[4] - P3[2] * V2[2])))) +
                    (P1[0] * (P2[1] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                              P2[3] * (P3[2] * V2[5] - P3[3] * V2[4])) +
                     P1[2] * (P2[1] * (P3[0] * V2[3] - P3[1] * V2[2]) +
                              P2[3] * (P3[3] * V2[2] - P3[0] * V2[5]))))) +
          TMP38 * (P1[1] * (P2[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                            (P2[1] * 2. * (P3[2] * V1[2] - P3[0] * V1[4]) +
                             P2[2] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                   (P1[3] * (P2[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                             (P2[2] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                              2. * (P2[3] * (P3[0] * V1[4] - P3[2] * V1[2])))) +
                    (P1[0] * (P2[1] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                              P2[3] * (P3[2] * V1[5] - P3[3] * V1[4])) +
                     P1[2] * (P2[1] * (P3[0] * V1[3] - P3[1] * V1[2]) +
                              P2[3] * (P3[3] * V1[2] - P3[0] * V1[5])))))));
    T3[10] =
        denom * cI *
        (OM3 *
             (P3[0] *
                  (TMP37 *
                       (TMP12 * (P1[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                 (P1[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                  P1[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                        (TMP9 * (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                 (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                  P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                         2. / 3. * (P3[2] * (TMP51 + TMP54)))) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P1[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P1[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                        (TMP9 * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P2[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P2[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                         2. / 3. * (P3[2] * (TMP53 + TMP52))))) +
              P3[2] *
                  (TMP12 *
                       (TMP37 * (P1[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P1[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                  P1[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                        TMP38 * (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P1[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                  P1[3] * (P3[2] * V1[3] - P3[1] * V1[4])))) +
                   TMP9 *
                       (TMP37 * (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                  P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                        TMP38 * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P2[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                  P2[3] * (P3[2] * V1[3] - P3[1] * V1[4])))))) +
         (TMP37 * (P1[0] * (P2[0] * 2. * (P3[3] * V2[3] - P3[1] * V2[5]) +
                            (P2[1] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                   (P1[2] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                             (P2[2] * 2. * (P3[3] * V2[3] - P3[1] * V2[5]) +
                              P2[3] * (P3[1] * V2[4] - P3[2] * V2[3]))) +
                    (P1[1] * (P2[0] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                              P2[2] * (P3[2] * V2[5] - P3[3] * V2[4])) +
                     P1[3] * (P2[0] * (P3[1] * V2[2] - P3[0] * V2[3]) +
                              P2[2] * (P3[1] * V2[4] - P3[2] * V2[3]))))) +
          TMP38 * (P1[0] * (P2[0] * 2. * (P3[3] * V1[3] - P3[1] * V1[5]) +
                            (P2[1] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P2[3] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                   (P1[2] * (P2[1] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                             (P2[2] * 2. * (P3[3] * V1[3] - P3[1] * V1[5]) +
                              P2[3] * (P3[1] * V1[4] - P3[2] * V1[3]))) +
                    (P1[1] * (P2[0] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                              P2[2] * (P3[2] * V1[5] - P3[3] * V1[4])) +
                     P1[3] * (P2[0] * (P3[1] * V1[2] - P3[0] * V1[3]) +
                              P2[2] * (P3[1] * V1[4] - P3[2] * V1[3])))))));
    T3[11] =
        denom * cI *
        (OM3 *
             (P3[1] *
                  (TMP37 *
                       (TMP12 * (P1[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                 (P1[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                  P1[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                        (TMP9 * (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                 (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                  P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                         2. / 3. * (P3[2] * (TMP51 + TMP54)))) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P1[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P1[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                        (TMP9 * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P2[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P2[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                         2. / 3. * (P3[2] * (TMP53 + TMP52))))) +
              P3[2] *
                  (TMP12 *
                       (TMP37 * (P1[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P1[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                  P1[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                        TMP38 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P1[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                  P1[3] * (P3[2] * V1[2] - P3[0] * V1[4])))) +
                   TMP9 *
                       (TMP37 * (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                  P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                        TMP38 * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P2[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                  P2[3] * (P3[2] * V1[2] - P3[0] * V1[4])))))) +
         (TMP37 * (P1[1] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                            (P2[1] * 2. * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                   (P1[2] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                             (P2[2] * 2. * (P3[3] * V2[2] - P3[0] * V2[5]) +
                              P2[3] * (P3[0] * V2[4] - P3[2] * V2[2]))) +
                    (P1[0] * (P2[1] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                              P2[2] * (P3[2] * V2[5] - P3[3] * V2[4])) +
                     P1[3] * (P2[1] * (P3[1] * V2[2] - P3[0] * V2[3]) +
                              P2[2] * (P3[0] * V2[4] - P3[2] * V2[2]))))) +
          TMP38 * (P1[1] * (P2[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                            (P2[1] * 2. * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P2[3] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                   (P1[2] * (P2[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                             (P2[2] * 2. * (P3[3] * V1[2] - P3[0] * V1[5]) +
                              P2[3] * (P3[0] * V1[4] - P3[2] * V1[2]))) +
                    (P1[0] * (P2[1] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                              P2[2] * (P3[2] * V1[5] - P3[3] * V1[4])) +
                     P1[3] * (P2[1] * (P3[1] * V1[2] - P3[0] * V1[3]) +
                              P2[2] * (P3[0] * V1[4] - P3[2] * V1[2])))))));
    T3[12] =
        denom * 2. * cI *
        (OM3 * P3[2] *
             (TMP37 * (TMP12 * (P1[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                (P1[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                 P1[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                       (TMP9 * (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                 P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                        1. / 3. * (P3[2] * (TMP51 + TMP54)))) +
              TMP38 * (TMP12 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                (P1[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                 P1[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                       (TMP9 * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                (P2[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                 P2[3] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                        1. / 3. * (P3[2] * (TMP53 + TMP52))))) +
         (TMP37 * (P1[2] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                            (P2[1] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                             P2[3] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                   (P2[2] * (P1[0] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                             (P1[1] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                              P1[3] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                    (+1. / 3. * (TMP51 + TMP54)))) +
          TMP38 * (P1[2] * (P2[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                            (P2[1] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                             P2[3] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                   (P2[2] * (P1[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                             (P1[1] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                              P1[3] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                    (+1. / 3. * (TMP53 + TMP52))))));
    T3[13] =
        denom * cI *
        (OM3 *
             (P3[2] *
                  (TMP37 *
                       (TMP12 * (P1[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                 (P1[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                  P1[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                        (TMP9 * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                 (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                  P2[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                         2. / 3. * (P3[3] * (TMP51 + TMP54)))) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P1[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P1[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                        (TMP9 * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P2[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P2[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                         2. / 3. * (P3[3] * (TMP53 + TMP52))))) +
              P3[3] *
                  (TMP12 *
                       (TMP37 * (P1[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                 (P1[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                  P1[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                        TMP38 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P1[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P1[3] * (P3[0] * V1[3] - P3[1] * V1[2])))) +
                   TMP9 *
                       (TMP37 * (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                 (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                  P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                        TMP38 * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P2[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P2[3] * (P3[0] * V1[3] - P3[1] * V1[2])))))) +
         (TMP37 * (P1[2] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                            (P2[1] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                             2. * (P2[2] * (P3[0] * V2[3] - P3[1] * V2[2])))) +
                   (P1[3] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                             (P2[1] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                              2. * (P2[3] * (P3[1] * V2[2] - P3[0] * V2[3])))) +
                    (P1[0] * (P2[2] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                              P2[3] * (P3[3] * V2[3] - P3[1] * V2[5])) +
                     P1[1] * (P2[2] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                              P2[3] * (P3[0] * V2[5] - P3[3] * V2[2]))))) +
          TMP38 * (P1[2] * (P2[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                            (P2[1] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                             2. * (P2[2] * (P3[0] * V1[3] - P3[1] * V1[2])))) +
                   (P1[3] * (P2[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                             (P2[1] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                              2. * (P2[3] * (P3[1] * V1[2] - P3[0] * V1[3])))) +
                    (P1[0] * (P2[2] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                              P2[3] * (P3[3] * V1[3] - P3[1] * V1[5])) +
                     P1[1] * (P2[2] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                              P2[3] * (P3[0] * V1[5] - P3[3] * V1[2])))))));
    T3[14] =
        denom * cI *
        (OM3 *
             (P3[0] *
                  (TMP37 *
                       (TMP12 * (P1[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                 (P1[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                  P1[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                        (TMP9 * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                 (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                  P2[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                         2. / 3. * (P3[3] * (TMP51 + TMP54)))) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P1[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P1[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                        (TMP9 * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P2[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P2[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                         2. / 3. * (P3[3] * (TMP53 + TMP52))))) +
              P3[3] *
                  (TMP12 *
                       (TMP37 * (P1[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P1[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                  P1[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                        TMP38 * (P1[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P1[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                  P1[3] * (P3[2] * V1[3] - P3[1] * V1[4])))) +
                   TMP9 *
                       (TMP37 * (P2[1] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P2[2] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                  P2[3] * (P3[2] * V2[3] - P3[1] * V2[4]))) +
                        TMP38 * (P2[1] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P2[2] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                  P2[3] * (P3[2] * V1[3] - P3[1] * V1[4])))))) +
         (TMP37 * (P1[0] * (P2[0] * 2. * (P3[1] * V2[4] - P3[2] * V2[3]) +
                            (P2[1] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                             P2[2] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                   (P1[3] * (P2[1] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                             (P2[2] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                              2. * (P2[3] * (P3[1] * V2[4] - P3[2] * V2[3])))) +
                    (P1[1] * (P2[0] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                              P2[3] * (P3[2] * V2[5] - P3[3] * V2[4])) +
                     P1[2] * (P2[0] * (P3[0] * V2[3] - P3[1] * V2[2]) +
                              P2[3] * (P3[3] * V2[3] - P3[1] * V2[5]))))) +
          TMP38 * (P1[0] * (P2[0] * 2. * (P3[1] * V1[4] - P3[2] * V1[3]) +
                            (P2[1] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                             P2[2] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                   (P1[3] * (P2[1] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                             (P2[2] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                              2. * (P2[3] * (P3[1] * V1[4] - P3[2] * V1[3])))) +
                    (P1[1] * (P2[0] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                              P2[3] * (P3[2] * V1[5] - P3[3] * V1[4])) +
                     P1[2] * (P2[0] * (P3[0] * V1[3] - P3[1] * V1[2]) +
                              P2[3] * (P3[3] * V1[3] - P3[1] * V1[5])))))));
    T3[15] =
        denom * cI *
        (OM3 *
             (P3[1] *
                  (TMP37 *
                       (TMP12 * (P1[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                 (P1[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                  P1[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                        (TMP9 * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                 (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                  P2[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                         2. / 3. * (P3[3] * (TMP51 + TMP54)))) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P1[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P1[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                        (TMP9 * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P2[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P2[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                         2. / 3. * (P3[3] * (TMP53 + TMP52))))) +
              P3[3] *
                  (TMP12 *
                       (TMP37 * (P1[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P1[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                  P1[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                        TMP38 * (P1[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P1[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                  P1[3] * (P3[2] * V1[2] - P3[0] * V1[4])))) +
                   TMP9 *
                       (TMP37 * (P2[0] * (P3[3] * V2[4] - P3[2] * V2[5]) +
                                 (P2[2] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                                  P2[3] * (P3[2] * V2[2] - P3[0] * V2[4]))) +
                        TMP38 * (P2[0] * (P3[3] * V1[4] - P3[2] * V1[5]) +
                                 (P2[2] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                                  P2[3] * (P3[2] * V1[2] - P3[0] * V1[4])))))) +
         (TMP37 * (P1[1] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                            (P2[1] * 2. * (P3[2] * V2[2] - P3[0] * V2[4]) +
                             P2[2] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                   (P1[3] * (P2[0] * (P3[2] * V2[5] - P3[3] * V2[4]) +
                             (P2[2] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                              2. * (P2[3] * (P3[0] * V2[4] - P3[2] * V2[2])))) +
                    (P1[0] * (P2[1] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                              P2[3] * (P3[2] * V2[5] - P3[3] * V2[4])) +
                     P1[2] * (P2[1] * (P3[0] * V2[3] - P3[1] * V2[2]) +
                              P2[3] * (P3[3] * V2[2] - P3[0] * V2[5]))))) +
          TMP38 * (P1[1] * (P2[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                            (P2[1] * 2. * (P3[2] * V1[2] - P3[0] * V1[4]) +
                             P2[2] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                   (P1[3] * (P2[0] * (P3[2] * V1[5] - P3[3] * V1[4]) +
                             (P2[2] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                              2. * (P2[3] * (P3[0] * V1[4] - P3[2] * V1[2])))) +
                    (P1[0] * (P2[1] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                              P2[3] * (P3[2] * V1[5] - P3[3] * V1[4])) +
                     P1[2] * (P2[1] * (P3[0] * V1[3] - P3[1] * V1[2]) +
                              P2[3] * (P3[3] * V1[2] - P3[0] * V1[5])))))));
    T3[16] =
        denom * cI *
        (OM3 *
             (P3[2] *
                  (TMP37 *
                       (TMP12 * (P1[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                 (P1[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                  P1[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                        (TMP9 * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                 (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                  P2[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                         2. / 3. * (P3[3] * (TMP51 + TMP54)))) +
                   TMP38 *
                       (TMP12 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P1[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P1[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                        (TMP9 * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                 (P2[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                  P2[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                         2. / 3. * (P3[3] * (TMP53 + TMP52))))) +
              P3[3] *
                  (TMP12 *
                       (TMP37 * (P1[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                 (P1[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                  P1[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                        TMP38 * (P1[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P1[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P1[3] * (P3[0] * V1[3] - P3[1] * V1[2])))) +
                   TMP9 *
                       (TMP37 * (P2[0] * (P3[1] * V2[5] - P3[3] * V2[3]) +
                                 (P2[1] * (P3[3] * V2[2] - P3[0] * V2[5]) +
                                  P2[3] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                        TMP38 * (P2[0] * (P3[1] * V1[5] - P3[3] * V1[3]) +
                                 (P2[1] * (P3[3] * V1[2] - P3[0] * V1[5]) +
                                  P2[3] * (P3[0] * V1[3] - P3[1] * V1[2])))))) +
         (TMP37 * (P1[2] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                            (P2[1] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                             2. * (P2[2] * (P3[0] * V2[3] - P3[1] * V2[2])))) +
                   (P1[3] * (P2[0] * (P3[3] * V2[3] - P3[1] * V2[5]) +
                             (P2[1] * (P3[0] * V2[5] - P3[3] * V2[2]) +
                              2. * (P2[3] * (P3[1] * V2[2] - P3[0] * V2[3])))) +
                    (P1[0] * (P2[2] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                              P2[3] * (P3[3] * V2[3] - P3[1] * V2[5])) +
                     P1[1] * (P2[2] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                              P2[3] * (P3[0] * V2[5] - P3[3] * V2[2]))))) +
          TMP38 * (P1[2] * (P2[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                            (P2[1] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                             2. * (P2[2] * (P3[0] * V1[3] - P3[1] * V1[2])))) +
                   (P1[3] * (P2[0] * (P3[3] * V1[3] - P3[1] * V1[5]) +
                             (P2[1] * (P3[0] * V1[5] - P3[3] * V1[2]) +
                              2. * (P2[3] * (P3[1] * V1[2] - P3[0] * V1[3])))) +
                    (P1[0] * (P2[2] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                              P2[3] * (P3[3] * V1[3] - P3[1] * V1[5])) +
                     P1[1] * (P2[2] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                              P2[3] * (P3[0] * V1[5] - P3[3] * V1[2])))))));
    T3[17] =
        denom * 2. * cI *
        (OM3 * P3[3] *
             (TMP37 * (TMP12 * (P1[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                (P1[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                 P1[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                       (TMP9 * (P2[0] * (P3[2] * V2[3] - P3[1] * V2[4]) +
                                (P2[1] * (P3[0] * V2[4] - P3[2] * V2[2]) +
                                 P2[2] * (P3[1] * V2[2] - P3[0] * V2[3]))) +
                        1. / 3. * (P3[3] * (TMP51 + TMP54)))) +
              TMP38 * (TMP12 * (P1[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                (P1[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                 P1[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                       (TMP9 * (P2[0] * (P3[2] * V1[3] - P3[1] * V1[4]) +
                                (P2[1] * (P3[0] * V1[4] - P3[2] * V1[2]) +
                                 P2[2] * (P3[1] * V1[2] - P3[0] * V1[3]))) +
                        1. / 3. * (P3[3] * (TMP53 + TMP52))))) +
         (TMP37 * (P1[3] * (P2[0] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                            (P2[1] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                             P2[2] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                   (P2[3] * (P1[0] * (P3[1] * V2[4] - P3[2] * V2[3]) +
                             (P1[1] * (P3[2] * V2[2] - P3[0] * V2[4]) +
                              P1[2] * (P3[0] * V2[3] - P3[1] * V2[2]))) +
                    (+1. / 3. * (TMP51 + TMP54)))) +
          TMP38 * (P1[3] * (P2[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                            (P2[1] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                             P2[2] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                   (P2[3] * (P1[0] * (P3[1] * V1[4] - P3[2] * V1[3]) +
                             (P1[1] * (P3[2] * V1[2] - P3[0] * V1[4]) +
                              P1[2] * (P3[0] * V1[3] - P3[1] * V1[2]))) +
                    (+1. / 3. * (TMP53 + TMP52))))));
}

void FFT1_1(complex<double> F2[], complex<double> T3[], complex<double> COUP,
            double M1, double W1, complex<double> F1[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> denom;
    double P1[4];
    double P2[4];
    complex<double> TMP15;
    complex<double> TMP13;
    P2[0] = F2[0].real();
    P2[1] = F2[1].real();
    P2[2] = F2[1].imag();
    P2[3] = F2[0].imag();
    F1[0] = +F2[0] + T3[0];
    F1[1] = +F2[1] + T3[1];
    P1[0] = -F1[0].real();
    P1[1] = -F1[1].real();
    P1[2] = -F1[1].imag();
    P1[3] = -F1[0].imag();
    TMP15 =
        (P1[0] * -1. *
             (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] - P2[0] * T3[2]) +
         (P1[1] *
              (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9] - P2[0] * T3[6]) +
          (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] * T3[13] -
                    P2[0] * T3[10]) +
           P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] + P2[3] * T3[17] -
                    P2[0] * T3[14]))));
    TMP13 =
        (P1[0] * -1. *
             (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] - P2[0] * T3[2]) +
         (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] * T3[15] -
                   P2[0] * T3[3]) +
          (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] + P2[3] * T3[16] -
                    P2[0] * T3[4]) +
           P1[3] * (P2[1] * T3[9] + P2[2] * T3[13] + P2[3] * T3[17] -
                    P2[0] * T3[5]))));
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    F1[2] = denom * -cI *
            (TMP13 * (F2[4] * (P1[0] + P1[3]) +
                      (F2[5] * (P1[1] + cI * (P1[2])) + F2[2] * M1)) +
             TMP15 * (F2[4] * (P1[0] + P1[3]) +
                      (F2[5] * (P1[1] + cI * (P1[2])) + F2[2] * M1)));
    F1[3] = denom * cI *
            (TMP13 * (F2[4] * (+cI * (P1[2]) - P1[1]) +
                      (F2[5] * (P1[3] - P1[0]) - F2[3] * M1)) +
             TMP15 * (F2[4] * (+cI * (P1[2]) - P1[1]) +
                      (F2[5] * (P1[3] - P1[0]) - F2[3] * M1)));
    F1[4] = denom * -cI *
            (TMP13 * (F2[2] * (P1[3] - P1[0]) +
                      (F2[3] * (P1[1] + cI * (P1[2])) - F2[4] * M1)) +
             TMP15 * (F2[2] * (P1[3] - P1[0]) +
                      (F2[3] * (P1[1] + cI * (P1[2])) - F2[4] * M1)));
    F1[5] = denom * cI *
            (TMP13 * (F2[2] * (+cI * (P1[2]) - P1[1]) +
                      (F2[3] * (P1[0] + P1[3]) + F2[5] * M1)) +
             TMP15 * (F2[2] * (+cI * (P1[2]) - P1[1]) +
                      (F2[3] * (P1[0] + P1[3]) + F2[5] * M1)));
}

void FFT1_2_3_5_1(complex<double> F2[], complex<double> T3[],
                  complex<double> COUP1, complex<double> COUP2,
                  complex<double> COUP3, complex<double> COUP4, double M1,
                  double W1, complex<double> F1[])
{
    //   complex<double> cI = complex<double> (0., 1.);
    complex<double> denom;
    //   double P1[4];
    //   double P2[4];
    int i;
    complex<double> Ftmp[6];
    FFT1_1(F2, T3, COUP1, M1, W1, F1);
    FFT2_1(F2, T3, COUP2, M1, W1, Ftmp);
    i = 2;
    while (i < 6) {
        F1[i] = F1[i] + Ftmp[i];
        i++;
    }
    FFT3_1(F2, T3, COUP3, M1, W1, Ftmp);
    i = 2;
    while (i < 6) {
        F1[i] = F1[i] + Ftmp[i];
        i++;
    }
    FFT5_1(F2, T3, COUP4, M1, W1, Ftmp);
    i = 2;
    while (i < 6) {
        F1[i] = F1[i] + Ftmp[i];
        i++;
    }
}
void FFT1_2_4_5_1(complex<double> F2[], complex<double> T3[],
                  complex<double> COUP1, complex<double> COUP2,
                  complex<double> COUP3, complex<double> COUP4, double M1,
                  double W1, complex<double> F1[])
{
    //   complex<double> cI = complex<double> (0., 1.);
    complex<double> denom;
    //   double P1[4];
    //   double P2[4];
    int i;
    complex<double> Ftmp[6];
    FFT1_1(F2, T3, COUP1, M1, W1, F1);
    FFT2_1(F2, T3, COUP2, M1, W1, Ftmp);
    i = 2;
    while (i < 6) {
        F1[i] = F1[i] + Ftmp[i];
        i++;
    }
    FFT4_1(F2, T3, COUP3, M1, W1, Ftmp);
    i = 2;
    while (i < 6) {
        F1[i] = F1[i] + Ftmp[i];
        i++;
    }
    FFT5_1(F2, T3, COUP4, M1, W1, Ftmp);
    i = 2;
    while (i < 6) {
        F1[i] = F1[i] + Ftmp[i];
        i++;
    }
}

void FFT4_3(complex<double> F1[], complex<double> F2[], complex<double> COUP,
            double M3, double W3, complex<double> T3[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP12;
    complex<double> TMP11;
    double P1[4];
    complex<double> TMP10;
    double P2[4];
    double P3[4];
    double OM3;
    complex<double> denom;
    complex<double> TMP9;
    complex<double> TMP8;
    P1[0] = F1[0].real();
    P1[1] = F1[1].real();
    P1[2] = F1[1].imag();
    P1[3] = F1[0].imag();
    P2[0] = F2[0].real();
    P2[1] = F2[1].real();
    P2[2] = F2[1].imag();
    P2[3] = F2[0].imag();
    OM3 = 0.;
    if (M3 != 0.)
        OM3 = 1. / pow(M3, 2);
    T3[0] = +F1[0] + F2[0];
    T3[1] = +F1[1] + F2[1];
    P3[0] = -T3[0].real();
    P3[1] = -T3[1].real();
    P3[2] = -T3[1].imag();
    P3[3] = -T3[0].imag();
    TMP9 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    TMP8 =
        -1. *
        (F1[2] * (F2[4] * (P1[0] + P1[3]) + F2[5] * (P1[1] + cI * (P1[2]))) +
         (F1[3] * (F2[4] * (P1[1] - cI * (P1[2])) + F2[5] * (P1[0] - P1[3])) +
          (F1[4] * (F2[2] * (P1[3] - P1[0]) + F2[3] * (P1[1] + cI * (P1[2]))) +
           F1[5] *
               (F2[2] * (P1[1] - cI * (P1[2])) - F2[3] * (P1[0] + P1[3])))));
    TMP11 =
        -1. *
        (F1[2] * (F2[4] * (P2[0] + P2[3]) + F2[5] * (P2[1] + cI * (P2[2]))) +
         (F1[3] * (F2[4] * (P2[1] - cI * (P2[2])) + F2[5] * (P2[0] - P2[3])) +
          (F1[4] * (F2[2] * (P2[3] - P2[0]) + F2[3] * (P2[1] + cI * (P2[2]))) +
           F1[5] *
               (F2[2] * (P2[1] - cI * (P2[2])) - F2[3] * (P2[0] + P2[3])))));
    TMP10 =
        -1. *
        (F1[2] * (F2[4] * (P3[0] + P3[3]) + F2[5] * (P3[1] + cI * (P3[2]))) +
         (F1[3] * (F2[4] * (P3[1] - cI * (P3[2])) + F2[5] * (P3[0] - P3[3])) +
          (F1[4] * (F2[2] * (P3[3] - P3[0]) + F2[3] * (P3[1] + cI * (P3[2]))) +
           F1[5] *
               (F2[2] * (P3[1] - cI * (P3[2])) - F2[3] * (P3[0] + P3[3])))));
    TMP12 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]);
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    T3[2] =
        denom * -2. * cI *
        (OM3 * (P3[0] * (TMP12 * -1. *
                             (F1[2] * F2[4] + F1[3] * F2[5] +
                              2. / 3. * (P3[0] * OM3 * TMP10) - F1[4] * F2[2] -
                              F1[5] * F2[3]) +
                         (TMP9 * (F1[2] * F2[4] + F1[3] * F2[5] +
                                  2. / 3. * (P3[0] * OM3 * TMP10) -
                                  F1[4] * F2[2] - F1[5] * F2[3]) +
                          (P3[0] * 1. / 3. * (TMP8 - TMP11) +
                           TMP10 * (P2[0] - P1[0])))) +
                1. / 3. * (TMP10 * (TMP9 - TMP12))) +
         (P1[0] *
              (F1[4] * F2[2] + F1[5] * F2[3] - F1[2] * F2[4] - F1[3] * F2[5]) +
          (P2[0] *
               (F1[2] * F2[4] + F1[3] * F2[5] - F1[4] * F2[2] - F1[5] * F2[3]) +
           (-1. / 3. * (TMP8) + 1. / 3. * (TMP11)))));
    T3[3] =
        denom * -cI *
        (OM3 * (P3[0] *
                    (TMP12 * (F1[2] * F2[5] + F1[3] * F2[4] + F1[4] * F2[3] +
                              F1[5] * F2[2] - 4. / 3. * (P3[1] * OM3 * TMP10)) +
                     (TMP9 * -1. *
                          (F1[2] * F2[5] + F1[3] * F2[4] + F1[4] * F2[3] +
                           F1[5] * F2[2] - 4. / 3. * (P3[1] * OM3 * TMP10)) +
                      (P3[1] * 2. / 3. * (TMP8 - TMP11) +
                       TMP10 * (P2[1] - P1[1])))) +
                P3[1] * (TMP12 * (F1[4] * F2[2] + F1[5] * F2[3] -
                                  F1[2] * F2[4] - F1[3] * F2[5]) +
                         (TMP9 * (F1[2] * F2[4] + F1[3] * F2[5] -
                                  F1[4] * F2[2] - F1[5] * F2[3]) +
                          TMP10 * (P2[0] - P1[0])))) +
         (F1[2] * (F2[4] * (P2[1] - P1[1]) + F2[5] * (P1[0] - P2[0])) +
          (F1[3] * (F2[4] * (P1[0] - P2[0]) + F2[5] * (P2[1] - P1[1])) +
           (F1[4] * (F2[2] * (P1[1] - P2[1]) + F2[3] * (P1[0] - P2[0])) +
            F1[5] * (F2[2] * (P1[0] - P2[0]) + F2[3] * (P1[1] - P2[1]))))));
    T3[4] = denom * -cI *
            (OM3 * (P3[0] * (TMP12 * -1. *
                                 (-cI * (F1[2] * F2[5] + F1[4] * F2[3]) +
                                  cI * (F1[3] * F2[4] + F1[5] * F2[2]) +
                                  4. / 3. * (P3[2] * OM3 * TMP10)) +
                             (TMP9 * (-cI * (F1[2] * F2[5] + F1[4] * F2[3]) +
                                      cI * (F1[3] * F2[4] + F1[5] * F2[2]) +
                                      4. / 3. * (P3[2] * OM3 * TMP10)) +
                              (P3[2] * 2. / 3. * (TMP8 - TMP11) +
                               TMP10 * (P2[2] - P1[2])))) +
                    P3[2] * (TMP12 * (F1[4] * F2[2] + F1[5] * F2[3] -
                                      F1[2] * F2[4] - F1[3] * F2[5]) +
                             (TMP9 * (F1[2] * F2[4] + F1[3] * F2[5] -
                                      F1[4] * F2[2] - F1[5] * F2[3]) +
                              TMP10 * (P2[0] - P1[0])))) +
             (F1[2] * (F2[4] * (P2[2] - P1[2]) +
                       F2[5] * (-cI * (P2[0]) + cI * (P1[0]))) +
              (F1[3] * (F2[4] * (-cI * (P1[0]) + cI * (P2[0])) +
                        F2[5] * (P2[2] - P1[2])) +
               (F1[4] * (F2[2] * (P1[2] - P2[2]) +
                         F2[3] * (-cI * (P2[0]) + cI * (P1[0]))) +
                F1[5] * (F2[2] * (-cI * (P1[0]) + cI * (P2[0])) +
                         F2[3] * (P1[2] - P2[2]))))));
    T3[5] = denom * -cI *
            (OM3 * (P3[0] * (TMP12 * -1. *
                                 (F1[3] * F2[5] + F1[5] * F2[3] +
                                  4. / 3. * (P3[3] * OM3 * TMP10) -
                                  F1[2] * F2[4] - F1[4] * F2[2]) +
                             (TMP9 * (F1[3] * F2[5] + F1[5] * F2[3] +
                                      4. / 3. * (P3[3] * OM3 * TMP10) -
                                      F1[2] * F2[4] - F1[4] * F2[2]) +
                              (P3[3] * 2. / 3. * (TMP8 - TMP11) +
                               TMP10 * (P2[3] - P1[3])))) +
                    P3[3] * (TMP12 * (F1[4] * F2[2] + F1[5] * F2[3] -
                                      F1[2] * F2[4] - F1[3] * F2[5]) +
                             (TMP9 * (F1[2] * F2[4] + F1[3] * F2[5] -
                                      F1[4] * F2[2] - F1[5] * F2[3]) +
                              TMP10 * (P2[0] - P1[0])))) +
             (F1[2] * F2[4] * (P1[0] + P2[3] - P1[3] - P2[0]) +
              (F1[3] * F2[5] * (P2[3] + P2[0] - P1[3] - P1[0]) +
               (F1[4] * F2[2] * (P1[3] + P1[0] - P2[3] - P2[0]) +
                F1[5] * F2[3] * (P1[3] + P2[0] - P1[0] - P2[3])))));
    T3[6] =
        denom * -cI *
        (OM3 * (P3[0] *
                    (TMP12 * (F1[2] * F2[5] + F1[3] * F2[4] + F1[4] * F2[3] +
                              F1[5] * F2[2] - 4. / 3. * (P3[1] * OM3 * TMP10)) +
                     (TMP9 * -1. *
                          (F1[2] * F2[5] + F1[3] * F2[4] + F1[4] * F2[3] +
                           F1[5] * F2[2] - 4. / 3. * (P3[1] * OM3 * TMP10)) +
                      (P3[1] * 2. / 3. * (TMP8 - TMP11) +
                       TMP10 * (P2[1] - P1[1])))) +
                P3[1] * (TMP12 * (F1[4] * F2[2] + F1[5] * F2[3] -
                                  F1[2] * F2[4] - F1[3] * F2[5]) +
                         (TMP9 * (F1[2] * F2[4] + F1[3] * F2[5] -
                                  F1[4] * F2[2] - F1[5] * F2[3]) +
                          TMP10 * (P2[0] - P1[0])))) +
         (F1[2] * (F2[4] * (P2[1] - P1[1]) + F2[5] * (P1[0] - P2[0])) +
          (F1[3] * (F2[4] * (P1[0] - P2[0]) + F2[5] * (P2[1] - P1[1])) +
           (F1[4] * (F2[2] * (P1[1] - P2[1]) + F2[3] * (P1[0] - P2[0])) +
            F1[5] * (F2[2] * (P1[0] - P2[0]) + F2[3] * (P1[1] - P2[1]))))));
    T3[7] =
        denom * -2. * cI *
        (OM3 * (P3[1] *
                    (TMP12 * (F1[2] * F2[5] + F1[3] * F2[4] + F1[4] * F2[3] +
                              F1[5] * F2[2] - 2. / 3. * (P3[1] * OM3 * TMP10)) +
                     (TMP9 * -1. *
                          (F1[2] * F2[5] + F1[3] * F2[4] + F1[4] * F2[3] +
                           F1[5] * F2[2] - 2. / 3. * (P3[1] * OM3 * TMP10)) +
                      (P3[1] * 1. / 3. * (TMP8 - TMP11) +
                       TMP10 * (P2[1] - P1[1])))) +
                1. / 3. * (TMP10 * (TMP12 - TMP9))) +
         (P1[1] *
              (F1[2] * F2[5] + F1[3] * F2[4] + F1[4] * F2[3] + F1[5] * F2[2]) +
          (P2[1] * -1. *
               (F1[2] * F2[5] + F1[3] * F2[4] + F1[4] * F2[3] + F1[5] * F2[2]) +
           (-1. / 3. * (TMP11) + 1. / 3. * (TMP8)))));
    T3[8] =
        denom * -cI *
        (OM3 * (P3[1] * (TMP12 * -1. *
                             (-cI * (F1[2] * F2[5] + F1[4] * F2[3]) +
                              cI * (F1[3] * F2[4] + F1[5] * F2[2]) +
                              4. / 3. * (P3[2] * OM3 * TMP10)) +
                         (TMP9 * (-cI * (F1[2] * F2[5] + F1[4] * F2[3]) +
                                  cI * (F1[3] * F2[4] + F1[5] * F2[2]) +
                                  4. / 3. * (P3[2] * OM3 * TMP10)) +
                          (P3[2] * 2. / 3. * (TMP8 - TMP11) +
                           TMP10 * (P2[2] - P1[2])))) +
                P3[2] * (TMP12 * (F1[2] * F2[5] + F1[3] * F2[4] +
                                  F1[4] * F2[3] + F1[5] * F2[2]) +
                         (TMP9 * -1. *
                              (F1[2] * F2[5] + F1[3] * F2[4] + F1[4] * F2[3] +
                               F1[5] * F2[2]) +
                          TMP10 * (P2[1] - P1[1])))) +
         (F1[2] * F2[5] * (P1[2] - cI * (P2[1]) + cI * (P1[1]) - P2[2]) +
          (F1[3] * F2[4] * (P1[2] - cI * (P1[1]) + cI * (P2[1]) - P2[2]) +
           (F1[4] * F2[3] * (P1[2] - cI * (P2[1]) + cI * (P1[1]) - P2[2]) +
            F1[5] * F2[2] * (P1[2] - cI * (P1[1]) + cI * (P2[1]) - P2[2])))));
    T3[9] = denom * -cI *
            (OM3 * (P3[1] * (TMP12 * -1. *
                                 (F1[3] * F2[5] + F1[5] * F2[3] +
                                  4. / 3. * (P3[3] * OM3 * TMP10) -
                                  F1[2] * F2[4] - F1[4] * F2[2]) +
                             (TMP9 * (F1[3] * F2[5] + F1[5] * F2[3] +
                                      4. / 3. * (P3[3] * OM3 * TMP10) -
                                      F1[2] * F2[4] - F1[4] * F2[2]) +
                              (P3[3] * 2. / 3. * (TMP8 - TMP11) +
                               TMP10 * (P2[3] - P1[3])))) +
                    P3[3] * (TMP12 * (F1[2] * F2[5] + F1[3] * F2[4] +
                                      F1[4] * F2[3] + F1[5] * F2[2]) +
                             (TMP9 * -1. *
                                  (F1[2] * F2[5] + F1[3] * F2[4] +
                                   F1[4] * F2[3] + F1[5] * F2[2]) +
                              TMP10 * (P2[1] - P1[1])))) +
             (F1[2] * (F2[4] * (P1[1] - P2[1]) + F2[5] * (P1[3] - P2[3])) +
              (F1[3] * (F2[4] * (P1[3] - P2[3]) + F2[5] * (P2[1] - P1[1])) +
               (F1[4] * (F2[2] * (P1[1] - P2[1]) + F2[3] * (P1[3] - P2[3])) +
                F1[5] * (F2[2] * (P1[3] - P2[3]) + F2[3] * (P2[1] - P1[1]))))));
    T3[10] = denom * -cI *
             (OM3 * (P3[0] * (TMP12 * -1. *
                                  (-cI * (F1[2] * F2[5] + F1[4] * F2[3]) +
                                   cI * (F1[3] * F2[4] + F1[5] * F2[2]) +
                                   4. / 3. * (P3[2] * OM3 * TMP10)) +
                              (TMP9 * (-cI * (F1[2] * F2[5] + F1[4] * F2[3]) +
                                       cI * (F1[3] * F2[4] + F1[5] * F2[2]) +
                                       4. / 3. * (P3[2] * OM3 * TMP10)) +
                               (P3[2] * 2. / 3. * (TMP8 - TMP11) +
                                TMP10 * (P2[2] - P1[2])))) +
                     P3[2] * (TMP12 * (F1[4] * F2[2] + F1[5] * F2[3] -
                                       F1[2] * F2[4] - F1[3] * F2[5]) +
                              (TMP9 * (F1[2] * F2[4] + F1[3] * F2[5] -
                                       F1[4] * F2[2] - F1[5] * F2[3]) +
                               TMP10 * (P2[0] - P1[0])))) +
              (F1[2] * (F2[4] * (P2[2] - P1[2]) +
                        F2[5] * (-cI * (P2[0]) + cI * (P1[0]))) +
               (F1[3] * (F2[4] * (-cI * (P1[0]) + cI * (P2[0])) +
                         F2[5] * (P2[2] - P1[2])) +
                (F1[4] * (F2[2] * (P1[2] - P2[2]) +
                          F2[3] * (-cI * (P2[0]) + cI * (P1[0]))) +
                 F1[5] * (F2[2] * (-cI * (P1[0]) + cI * (P2[0])) +
                          F2[3] * (P1[2] - P2[2]))))));
    T3[11] =
        denom * -cI *
        (OM3 * (P3[1] * (TMP12 * -1. *
                             (-cI * (F1[2] * F2[5] + F1[4] * F2[3]) +
                              cI * (F1[3] * F2[4] + F1[5] * F2[2]) +
                              4. / 3. * (P3[2] * OM3 * TMP10)) +
                         (TMP9 * (-cI * (F1[2] * F2[5] + F1[4] * F2[3]) +
                                  cI * (F1[3] * F2[4] + F1[5] * F2[2]) +
                                  4. / 3. * (P3[2] * OM3 * TMP10)) +
                          (P3[2] * 2. / 3. * (TMP8 - TMP11) +
                           TMP10 * (P2[2] - P1[2])))) +
                P3[2] * (TMP12 * (F1[2] * F2[5] + F1[3] * F2[4] +
                                  F1[4] * F2[3] + F1[5] * F2[2]) +
                         (TMP9 * -1. *
                              (F1[2] * F2[5] + F1[3] * F2[4] + F1[4] * F2[3] +
                               F1[5] * F2[2]) +
                          TMP10 * (P2[1] - P1[1])))) +
         (F1[2] * F2[5] * (P1[2] - cI * (P2[1]) + cI * (P1[1]) - P2[2]) +
          (F1[3] * F2[4] * (P1[2] - cI * (P1[1]) + cI * (P2[1]) - P2[2]) +
           (F1[4] * F2[3] * (P1[2] - cI * (P2[1]) + cI * (P1[1]) - P2[2]) +
            F1[5] * F2[2] * (P1[2] - cI * (P1[1]) + cI * (P2[1]) - P2[2])))));
    T3[12] = denom * -2. * cI *
             (OM3 * (P3[2] * (TMP12 * -1. *
                                  (-cI * (F1[2] * F2[5] + F1[4] * F2[3]) +
                                   cI * (F1[3] * F2[4] + F1[5] * F2[2]) +
                                   2. / 3. * (P3[2] * OM3 * TMP10)) +
                              (TMP9 * (-cI * (F1[2] * F2[5] + F1[4] * F2[3]) +
                                       cI * (F1[3] * F2[4] + F1[5] * F2[2]) +
                                       2. / 3. * (P3[2] * OM3 * TMP10)) +
                               (P3[2] * 1. / 3. * (TMP8 - TMP11) +
                                TMP10 * (P2[2] - P1[2])))) +
                     1. / 3. * (TMP10 * (TMP12 - TMP9))) +
              (P1[2] * (-cI * (F1[3] * F2[4] + F1[5] * F2[2]) +
                        cI * (F1[2] * F2[5] + F1[4] * F2[3])) +
               (P2[2] * (-cI * (F1[2] * F2[5] + F1[4] * F2[3]) +
                         cI * (F1[3] * F2[4] + F1[5] * F2[2])) +
                (-1. / 3. * (TMP11) + 1. / 3. * (TMP8)))));
    T3[13] = denom * -cI *
             (OM3 * (P3[2] * (TMP12 * -1. *
                                  (F1[3] * F2[5] + F1[5] * F2[3] +
                                   4. / 3. * (P3[3] * OM3 * TMP10) -
                                   F1[2] * F2[4] - F1[4] * F2[2]) +
                              (TMP9 * (F1[3] * F2[5] + F1[5] * F2[3] +
                                       4. / 3. * (P3[3] * OM3 * TMP10) -
                                       F1[2] * F2[4] - F1[4] * F2[2]) +
                               (P3[3] * 2. / 3. * (TMP8 - TMP11) +
                                TMP10 * (P2[3] - P1[3])))) +
                     P3[3] * (TMP12 * (-cI * (F1[3] * F2[4] + F1[5] * F2[2]) +
                                       cI * (F1[2] * F2[5] + F1[4] * F2[3])) +
                              (TMP9 * (-cI * (F1[2] * F2[5] + F1[4] * F2[3]) +
                                       cI * (F1[3] * F2[4] + F1[5] * F2[2])) +
                               TMP10 * (P2[2] - P1[2])))) +
              (F1[2] * (F2[4] * (P1[2] - P2[2]) +
                        F2[5] * (-cI * (P2[3]) + cI * (P1[3]))) +
               (F1[3] * (F2[4] * (-cI * (P1[3]) + cI * (P2[3])) +
                         F2[5] * (P2[2] - P1[2])) +
                (F1[4] * (F2[2] * (P1[2] - P2[2]) +
                          F2[3] * (-cI * (P2[3]) + cI * (P1[3]))) +
                 F1[5] * (F2[2] * (-cI * (P1[3]) + cI * (P2[3])) +
                          F2[3] * (P2[2] - P1[2]))))));
    T3[14] = denom * -cI *
             (OM3 * (P3[0] * (TMP12 * -1. *
                                  (F1[3] * F2[5] + F1[5] * F2[3] +
                                   4. / 3. * (P3[3] * OM3 * TMP10) -
                                   F1[2] * F2[4] - F1[4] * F2[2]) +
                              (TMP9 * (F1[3] * F2[5] + F1[5] * F2[3] +
                                       4. / 3. * (P3[3] * OM3 * TMP10) -
                                       F1[2] * F2[4] - F1[4] * F2[2]) +
                               (P3[3] * 2. / 3. * (TMP8 - TMP11) +
                                TMP10 * (P2[3] - P1[3])))) +
                     P3[3] * (TMP12 * (F1[4] * F2[2] + F1[5] * F2[3] -
                                       F1[2] * F2[4] - F1[3] * F2[5]) +
                              (TMP9 * (F1[2] * F2[4] + F1[3] * F2[5] -
                                       F1[4] * F2[2] - F1[5] * F2[3]) +
                               TMP10 * (P2[0] - P1[0])))) +
              (F1[2] * F2[4] * (P1[0] + P2[3] - P1[3] - P2[0]) +
               (F1[3] * F2[5] * (P2[0] + P2[3] - P1[0] - P1[3]) +
                (F1[4] * F2[2] * (P1[0] + P1[3] - P2[0] - P2[3]) +
                 F1[5] * F2[3] * (P1[3] + P2[0] - P1[0] - P2[3])))));
    T3[15] =
        denom * -cI *
        (OM3 * (P3[1] * (TMP12 * -1. *
                             (F1[3] * F2[5] + F1[5] * F2[3] +
                              4. / 3. * (P3[3] * OM3 * TMP10) - F1[2] * F2[4] -
                              F1[4] * F2[2]) +
                         (TMP9 * (F1[3] * F2[5] + F1[5] * F2[3] +
                                  4. / 3. * (P3[3] * OM3 * TMP10) -
                                  F1[2] * F2[4] - F1[4] * F2[2]) +
                          (P3[3] * 2. / 3. * (TMP8 - TMP11) +
                           TMP10 * (P2[3] - P1[3])))) +
                P3[3] * (TMP12 * (F1[2] * F2[5] + F1[3] * F2[4] +
                                  F1[4] * F2[3] + F1[5] * F2[2]) +
                         (TMP9 * -1. *
                              (F1[2] * F2[5] + F1[3] * F2[4] + F1[4] * F2[3] +
                               F1[5] * F2[2]) +
                          TMP10 * (P2[1] - P1[1])))) +
         (F1[2] * (F2[4] * (P1[1] - P2[1]) + F2[5] * (P1[3] - P2[3])) +
          (F1[3] * (F2[4] * (P1[3] - P2[3]) + F2[5] * (P2[1] - P1[1])) +
           (F1[4] * (F2[2] * (P1[1] - P2[1]) + F2[3] * (P1[3] - P2[3])) +
            F1[5] * (F2[2] * (P1[3] - P2[3]) + F2[3] * (P2[1] - P1[1]))))));
    T3[16] = denom * -cI *
             (OM3 * (P3[2] * (TMP12 * -1. *
                                  (F1[3] * F2[5] + F1[5] * F2[3] +
                                   4. / 3. * (P3[3] * OM3 * TMP10) -
                                   F1[2] * F2[4] - F1[4] * F2[2]) +
                              (TMP9 * (F1[3] * F2[5] + F1[5] * F2[3] +
                                       4. / 3. * (P3[3] * OM3 * TMP10) -
                                       F1[2] * F2[4] - F1[4] * F2[2]) +
                               (P3[3] * 2. / 3. * (TMP8 - TMP11) +
                                TMP10 * (P2[3] - P1[3])))) +
                     P3[3] * (TMP12 * (-cI * (F1[3] * F2[4] + F1[5] * F2[2]) +
                                       cI * (F1[2] * F2[5] + F1[4] * F2[3])) +
                              (TMP9 * (-cI * (F1[2] * F2[5] + F1[4] * F2[3]) +
                                       cI * (F1[3] * F2[4] + F1[5] * F2[2])) +
                               TMP10 * (P2[2] - P1[2])))) +
              (F1[2] * (F2[4] * (P1[2] - P2[2]) +
                        F2[5] * (-cI * (P2[3]) + cI * (P1[3]))) +
               (F1[3] * (F2[4] * (-cI * (P1[3]) + cI * (P2[3])) +
                         F2[5] * (P2[2] - P1[2])) +
                (F1[4] * (F2[2] * (P1[2] - P2[2]) +
                          F2[3] * (-cI * (P2[3]) + cI * (P1[3]))) +
                 F1[5] * (F2[2] * (-cI * (P1[3]) + cI * (P2[3])) +
                          F2[3] * (P2[2] - P1[2]))))));
    T3[17] =
        denom * -2. * cI *
        (OM3 * (P3[3] * (TMP12 * -1. *
                             (F1[3] * F2[5] + F1[5] * F2[3] +
                              2. / 3. * (P3[3] * OM3 * TMP10) - F1[2] * F2[4] -
                              F1[4] * F2[2]) +
                         (TMP9 * (F1[3] * F2[5] + F1[5] * F2[3] +
                                  2. / 3. * (P3[3] * OM3 * TMP10) -
                                  F1[2] * F2[4] - F1[4] * F2[2]) +
                          (P3[3] * 1. / 3. * (TMP8 - TMP11) +
                           TMP10 * (P2[3] - P1[3])))) +
                1. / 3. * (TMP10 * (TMP12 - TMP9))) +
         (P1[3] *
              (F1[2] * F2[4] + F1[4] * F2[2] - F1[3] * F2[5] - F1[5] * F2[3]) +
          (P2[3] *
               (F1[3] * F2[5] + F1[5] * F2[3] - F1[2] * F2[4] - F1[4] * F2[2]) +
           (-1. / 3. * (TMP11) + 1. / 3. * (TMP8)))));
}

void FFT3_2(complex<double> F1[], complex<double> T3[], complex<double> COUP,
            double M2, double W2, complex<double> F2[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    double P2[4];
    complex<double> denom;
    P1[0] = F1[0].real();
    P1[1] = F1[1].real();
    P1[2] = F1[1].imag();
    P1[3] = F1[0].imag();
    F2[0] = +F1[0] + T3[0];
    F2[1] = +F1[1] + T3[1];
    P2[0] = -F2[0].real();
    P2[1] = -F2[1].real();
    P2[2] = -F2[1].imag();
    P2[3] = -F2[0].imag();
    denom = COUP / (pow(P2[0], 2) - pow(P2[1], 2) - pow(P2[2], 2) -
                    pow(P2[3], 2) - M2 * (M2 - cI * W2));
    F2[2] =
        denom * -cI *
        (F1[3] *
             (P2[0] *
                  (P2[3] * (T3[9] + T3[6] + T3[15] + T3[3] -
                            cI * (T3[13] + T3[10] + T3[16] + T3[4])) +
                   (P2[1] * -1. *
                        (T3[14] + T3[5] + cI * (T3[11] + T3[8]) -
                         2. * (T3[7] + T3[2])) +
                    (P2[2] * (T3[8] + T3[11] - 2. * cI * (T3[12] + T3[2]) +
                              cI * (T3[14] + T3[5])) +
                     (P1[0] * (T3[6] + T3[3] - cI * (T3[10] + T3[4])) +
                      (P1[3] * (+cI * (T3[13] + T3[16]) - T3[9] - T3[15]) +
                       (P2[0] * (+cI * (T3[10] + T3[4]) - T3[6] - T3[3]) +
                        (P1[1] * (+cI * (T3[11] + T3[8]) - 2. * (T3[7])) -
                         P1[2] * (T3[8] + T3[11] - 2. * cI * (T3[12]))))))))) +
              (P2[1] * (P2[2] * (T3[16] + T3[13] - cI * (T3[15] + T3[9]) +
                                 cI * (T3[3] + T3[6]) - T3[4] - T3[10]) +
                        (P2[3] * (+2. * (T3[17]) + cI * (T3[11] + T3[8]) -
                                  2. * (T3[7]) - T3[5] - T3[14]) +
                         (P1[1] * (T3[3] + T3[6] - T3[15] - T3[9]) +
                          (P1[2] * (T3[4] + T3[10] - T3[16] - T3[13]) +
                           (P2[1] * (T3[15] + T3[9] - T3[3] - T3[6]) +
                            (P1[0] * (T3[14] + T3[5] - 2. * (T3[2])) +
                             P1[3] * (T3[5] + T3[14] - 2. * (T3[17])))))))) +
               (P2[2] *
                    (P2[3] * (-2. * cI * (T3[17]) + cI * (T3[5] + T3[14]) +
                              2. * cI * (T3[12]) - T3[8] - T3[11]) +
                     (P1[1] * (-cI * (T3[3] + T3[6]) + cI * (T3[15] + T3[9])) +
                      (P1[2] *
                           (-cI * (T3[4] + T3[10]) + cI * (T3[16] + T3[13])) +
                       (P2[2] *
                            (-cI * (T3[16] + T3[13]) + cI * (T3[4] + T3[10])) +
                        (P1[0] * -1. *
                             (-2. * cI * (T3[2]) + cI * (T3[14] + T3[5])) -
                         P1[3] * (-2. * cI * (T3[17]) +
                                  cI * (T3[5] + T3[14]))))))) +
                P2[3] *
                    (P1[0] * (+cI * (T3[10] + T3[4]) - T3[6] - T3[3]) +
                     (P1[3] * (T3[9] + T3[15] - cI * (T3[13] + T3[16])) +
                      (P2[3] * (+cI * (T3[13] + T3[16]) - T3[9] - T3[15]) +
                       (P1[1] * -1. * (+cI * (T3[11] + T3[8]) - 2. * (T3[7])) +
                        P1[2] * (T3[8] + T3[11] - 2. * cI * (T3[12]))))))))) +
         (F1[2] *
              (P2[0] * (P2[1] * (T3[15] + T3[9] + 2. * (T3[3] + T3[6]) +
                                 cI * (T3[10] + T3[4])) +
                        (P2[2] * (T3[16] + T3[13] + 2. * (T3[4] + T3[10]) -
                                  cI * (T3[6] + T3[3])) +
                         (P1[1] * -1. * (T3[3] + T3[15] + T3[6] + T3[9]) +
                          (P1[2] * -1. * (T3[4] + T3[16] + T3[10] + T3[13]) +
                           (P2[3] * 2. * (T3[5] + T3[17] + T3[2] + T3[14]) +
                            (P1[0] * (T3[14] + T3[5] + 2. * (T3[2])) +
                             (P1[3] * -1. * (T3[5] + T3[14] + 2. * (T3[17])) -
                              P2[0] * (T3[14] + T3[5] + 2. * (T3[2]))))))))) +
               (P2[3] * (P2[1] * -1. *
                             (T3[3] + T3[6] + 2. * (T3[9] + T3[15]) +
                              cI * (T3[13] + T3[16])) +
                         (P2[2] * -1. *
                              (T3[4] + T3[10] - cI * (T3[9] + T3[15]) +
                               2. * (T3[13] + T3[16])) +
                          (P1[1] * (T3[3] + T3[15] + T3[6] + T3[9]) +
                           (P1[2] * (T3[4] + T3[16] + T3[10] + T3[13]) +
                            (P1[0] * -1. * (T3[14] + T3[5] + 2. * (T3[2])) +
                             (P1[3] * (T3[5] + T3[14] + 2. * (T3[17])) -
                              P2[3] * (T3[5] + T3[14] + 2. * (T3[17])))))))) +
                (P2[1] *
                     (P1[0] * -1. * (T3[6] + T3[3] + cI * (T3[10] + T3[4])) +
                      (P1[3] * (T3[9] + T3[15] + cI * (T3[13] + T3[16])) +
                       (P2[2] * -2. *
                            (T3[8] + T3[11] - cI * (T3[7]) + cI * (T3[12])) +
                        (P1[1] * (+2. * (T3[7]) + cI * (T3[11] + T3[8])) +
                         (P1[2] * (T3[8] + T3[11] + 2. * cI * (T3[12])) -
                          P2[1] * (+2. * (T3[7]) + cI * (T3[11] + T3[8]))))))) +
                 P2[2] * (P1[0] * (+cI * (T3[6] + T3[3]) - T3[10] - T3[4]) +
                          (P1[3] * (T3[13] + T3[16] - cI * (T3[9] + T3[15])) +
                           (P1[1] * (T3[11] + T3[8] - 2. * cI * (T3[7])) +
                            (P1[2] * -1. *
                                 (+cI * (T3[8] + T3[11]) - 2. * (T3[12])) +
                             P2[2] * (+cI * (T3[8] + T3[11]) -
                                      2. * (T3[12]))))))))) +
          M2 *
              (F1[4] * (P1[1] * (T3[3] + T3[6] - T3[15] - T3[9]) +
                        (P1[2] * (T3[4] + T3[10] - T3[16] - T3[13]) +
                         (P2[1] * (T3[15] + T3[9] - T3[3] - T3[6]) +
                          (P2[2] * (T3[16] + T3[13] - T3[4] - T3[10]) +
                           (T3[14] * (P1[0] + P1[3] - P2[0] - P2[3]) +
                            (T3[5] * (P1[3] + P1[0] - P2[3] - P2[0]) +
                             (T3[2] * 2. * (P2[0] - P1[0]) +
                              2. * (T3[17] * (P2[3] - P1[3]))))))))) +
               F1[5] *
                   (P1[0] * (T3[6] + T3[3] - cI * (T3[10] + T3[4])) +
                    (P1[3] * (+cI * (T3[13] + T3[16]) - T3[9] - T3[15]) +
                     (P2[0] * (+cI * (T3[10] + T3[4]) - T3[6] - T3[3]) +
                      (P2[3] * (T3[9] + T3[15] - cI * (T3[13] + T3[16])) +
                       (T3[11] * (P2[2] - cI * (P2[1]) + cI * (P1[1]) - P1[2]) +
                        (T3[8] * (P2[2] - cI * (P2[1]) + cI * (P1[1]) - P1[2]) +
                         (T3[12] * 2. * (-cI * (P2[2]) + cI * (P1[2])) +
                          2. * (T3[7] * (P2[1] - P1[1]))))))))))));
    F2[3] =
        denom * -cI *
        (F1[2] *
             (P2[0] *
                  (P2[3] * (T3[9] + T3[15] - cI * (T3[10] + T3[4]) +
                            cI * (T3[13] + T3[16]) - T3[6] - T3[3]) +
                   (P2[1] * (T3[14] + T3[5] + 2. * (T3[7] + T3[2]) +
                             cI * (T3[11] + T3[8])) +
                    (P2[2] * (T3[8] + T3[11] + cI * (T3[14] + T3[5]) +
                              2. * cI * (T3[12] + T3[2])) +
                     (P1[0] * (T3[6] + T3[3] + cI * (T3[10] + T3[4])) +
                      (P1[3] * -1. * (T3[9] + T3[15] + cI * (T3[13] + T3[16])) +
                       (P2[0] * -1. * (T3[6] + T3[3] + cI * (T3[10] + T3[4])) +
                        (P1[1] * -1. * (+2. * (T3[7]) + cI * (T3[11] + T3[8])) -
                         P1[2] * (T3[8] + T3[11] + 2. * cI * (T3[12]))))))))) +
              (P2[1] * (P2[2] * -1. *
                            (T3[4] + T3[16] + T3[10] + T3[13] +
                             cI * (T3[3] + T3[15] + T3[6] + T3[9])) +
                        (P2[3] * (+2. * (T3[7]) + cI * (T3[11] + T3[8]) -
                                  2. * (T3[17]) - T3[5] - T3[14]) +
                         (P1[1] * (T3[3] + T3[15] + T3[6] + T3[9]) +
                          (P1[2] * (T3[4] + T3[16] + T3[10] + T3[13]) +
                           (P2[1] * -1. * (T3[3] + T3[15] + T3[6] + T3[9]) +
                            (P1[0] * -1. * (T3[14] + T3[5] + 2. * (T3[2])) +
                             P1[3] * (T3[5] + T3[14] + 2. * (T3[17])))))))) +
               (P2[2] * (P2[3] * (T3[8] + T3[11] - cI * (T3[5] + T3[14]) -
                                  2. * cI * (T3[17]) + 2. * cI * (T3[12])) +
                         (P1[1] * (+cI * (T3[3] + T3[15] + T3[6] + T3[9])) +
                          (P1[2] * (+cI * (T3[4] + T3[16] + T3[10] + T3[13])) +
                           (P2[2] * -1. *
                                (+cI * (T3[4] + T3[16] + T3[10] + T3[13])) +
                            (P1[0] * -1. *
                                 (+cI * (T3[14] + T3[5]) + 2. * cI * (T3[2])) +
                             P1[3] * (+cI * (T3[5] + T3[14]) +
                                      2. * cI * (T3[17]))))))) +
                P2[3] *
                    (P1[0] * (T3[6] + T3[3] + cI * (T3[10] + T3[4])) +
                     (P1[3] * -1. * (T3[9] + T3[15] + cI * (T3[13] + T3[16])) +
                      (P2[3] * (T3[9] + T3[15] + cI * (T3[13] + T3[16])) +
                       (P1[1] * -1. * (+2. * (T3[7]) + cI * (T3[11] + T3[8])) -
                        P1[2] * (T3[8] + T3[11] + 2. * cI * (T3[12]))))))))) +
         (F1[3] *
              (P2[0] * (P2[1] * -1. *
                            (T3[15] + T3[9] + cI * (T3[10] + T3[4]) -
                             2. * (T3[3] + T3[6])) +
                        (P2[2] * (+2. * (T3[4] + T3[10]) +
                                  cI * (T3[6] + T3[3]) - T3[16] - T3[13]) +
                         (P1[1] * (T3[15] + T3[9] - T3[3] - T3[6]) +
                          (P1[2] * (T3[16] + T3[13] - T3[4] - T3[10]) +
                           (P2[3] * 2. * (T3[5] + T3[14] - T3[17] - T3[2]) +
                            (P1[0] * -1. * (T3[14] + T3[5] - 2. * (T3[2])) +
                             (P1[3] * -1. * (T3[5] + T3[14] - 2. * (T3[17])) +
                              P2[0] * (T3[14] + T3[5] - 2. * (T3[2]))))))))) +
               (P2[3] * (P2[1] * (T3[3] + T3[6] + cI * (T3[13] + T3[16]) -
                                  2. * (T3[9] + T3[15])) +
                         (P2[2] * -1. *
                              (+2. * (T3[13] + T3[16]) + cI * (T3[9] + T3[15]) -
                               T3[4] - T3[10]) +
                          (P1[1] * (T3[15] + T3[9] - T3[3] - T3[6]) +
                           (P1[2] * (T3[16] + T3[13] - T3[4] - T3[10]) +
                            (P1[0] * -1. * (T3[14] + T3[5] - 2. * (T3[2])) +
                             (P1[3] * -1. * (T3[5] + T3[14] - 2. * (T3[17])) +
                              P2[3] * (T3[5] + T3[14] - 2. * (T3[17])))))))) +
                (P2[1] *
                     (P1[0] * (+cI * (T3[10] + T3[4]) - T3[6] - T3[3]) +
                      (P1[3] * (T3[9] + T3[15] - cI * (T3[13] + T3[16])) +
                       (P2[2] * -2. *
                            (T3[8] + T3[11] - cI * (T3[12]) + cI * (T3[7])) +
                        (P1[1] * -1. * (+cI * (T3[11] + T3[8]) - 2. * (T3[7])) +
                         (P1[2] * (T3[8] + T3[11] - 2. * cI * (T3[12])) +
                          P2[1] * (+cI * (T3[11] + T3[8]) - 2. * (T3[7]))))))) +
                 P2[2] *
                     (P1[0] * -1. * (T3[10] + T3[4] + cI * (T3[6] + T3[3])) +
                      (P1[3] * (T3[13] + T3[16] + cI * (T3[9] + T3[15])) +
                       (P1[1] * (T3[11] + T3[8] + 2. * cI * (T3[7])) +
                        (P1[2] * (+2. * (T3[12]) + cI * (T3[8] + T3[11])) -
                         P2[2] *
                             (+2. * (T3[12]) + cI * (T3[8] + T3[11]))))))))) +
          M2 *
              (F1[4] *
                   (P1[0] * (T3[6] + T3[3] + cI * (T3[10] + T3[4])) +
                    (P1[3] * -1. * (T3[9] + T3[15] + cI * (T3[13] + T3[16])) +
                     (P2[0] * -1. * (T3[6] + T3[3] + cI * (T3[10] + T3[4])) +
                      (P2[3] * (T3[9] + T3[15] + cI * (T3[13] + T3[16])) +
                       (T3[11] * (P2[2] - cI * (P1[1]) + cI * (P2[1]) - P1[2]) +
                        (T3[8] * (P2[2] - cI * (P1[1]) + cI * (P2[1]) - P1[2]) +
                         (T3[12] * 2. * (-cI * (P1[2]) + cI * (P2[2])) +
                          2. * (T3[7] * (P2[1] - P1[1]))))))))) +
               F1[5] * (P1[1] * (T3[3] + T3[15] + T3[6] + T3[9]) +
                        (P1[2] * (T3[4] + T3[16] + T3[10] + T3[13]) +
                         (P2[1] * -1. * (T3[3] + T3[15] + T3[6] + T3[9]) +
                          (P2[2] * -1. * (T3[4] + T3[16] + T3[10] + T3[13]) +
                           (T3[14] * (P2[0] + P1[3] - P1[0] - P2[3]) +
                            (T3[5] * (P1[3] + P2[0] - P2[3] - P1[0]) +
                             (T3[2] * 2. * (P2[0] - P1[0]) +
                              2. * (T3[17] * (P1[3] - P2[3]))))))))))));
    F2[4] =
        denom * cI *
        (F1[5] *
             (P2[0] *
                  (P2[3] * (T3[6] + T3[3] - cI * (T3[10] + T3[4]) +
                            cI * (T3[13] + T3[16]) - T3[9] - T3[15]) +
                   (P2[1] * -1. *
                        (T3[14] + T3[5] + 2. * (T3[7] + T3[2]) -
                         cI * (T3[11] + T3[8])) +
                    (P2[2] * (+cI * (T3[14] + T3[5]) +
                              2. * cI * (T3[12] + T3[2]) - T3[8] - T3[11]) +
                     (P1[0] * (+cI * (T3[10] + T3[4]) - T3[6] - T3[3]) +
                      (P1[3] * (T3[9] + T3[15] - cI * (T3[13] + T3[16])) +
                       (P2[0] * (T3[6] + T3[3] - cI * (T3[10] + T3[4])) +
                        (P1[1] * -1. * (+cI * (T3[11] + T3[8]) - 2. * (T3[7])) +
                         P1[2] * (T3[8] + T3[11] - 2. * cI * (T3[12]))))))))) +
              (P2[1] * (P2[2] * (T3[4] + T3[16] + T3[10] + T3[13] -
                                 cI * (T3[3] + T3[15] + T3[6] + T3[9])) +
                        (P2[3] * (T3[5] + T3[14] + 2. * (T3[17]) +
                                  cI * (T3[11] + T3[8]) - 2. * (T3[7])) +
                         (P1[1] * -1. * (T3[3] + T3[15] + T3[6] + T3[9]) +
                          (P1[2] * -1. * (T3[4] + T3[16] + T3[10] + T3[13]) +
                           (P2[1] * (T3[3] + T3[15] + T3[6] + T3[9]) +
                            (P1[0] * (T3[14] + T3[5] + 2. * (T3[2])) -
                             P1[3] * (T3[5] + T3[14] + 2. * (T3[17])))))))) +
               (P2[2] * (P2[3] * -1. *
                             (T3[8] + T3[11] - 2. * cI * (T3[12]) +
                              cI * (T3[5] + T3[14]) + 2. * cI * (T3[17])) +
                         (P1[1] * (+cI * (T3[3] + T3[15] + T3[6] + T3[9])) +
                          (P1[2] * (+cI * (T3[4] + T3[16] + T3[10] + T3[13])) +
                           (P2[2] * -1. *
                                (+cI * (T3[4] + T3[16] + T3[10] + T3[13])) +
                            (P1[0] * -1. *
                                 (+cI * (T3[14] + T3[5]) + 2. * cI * (T3[2])) +
                             P1[3] * (+cI * (T3[5] + T3[14]) +
                                      2. * cI * (T3[17]))))))) +
                P2[3] *
                    (P1[0] * (+cI * (T3[10] + T3[4]) - T3[6] - T3[3]) +
                     (P1[3] * (T3[9] + T3[15] - cI * (T3[13] + T3[16])) +
                      (P2[3] * (+cI * (T3[13] + T3[16]) - T3[9] - T3[15]) +
                       (P1[1] * -1. * (+cI * (T3[11] + T3[8]) - 2. * (T3[7])) +
                        P1[2] * (T3[8] + T3[11] - 2. * cI * (T3[12]))))))))) +
         (F1[4] *
              (P2[0] * (P2[1] * (+2. * (T3[3] + T3[6]) + cI * (T3[10] + T3[4]) -
                                 T3[15] - T3[9]) +
                        (P2[2] * -1. *
                             (T3[16] + T3[13] + cI * (T3[6] + T3[3]) -
                              2. * (T3[4] + T3[10])) +
                         (P1[1] * (T3[15] + T3[9] - T3[3] - T3[6]) +
                          (P1[2] * (T3[16] + T3[13] - T3[4] - T3[10]) +
                           (P2[3] * 2. * (T3[5] + T3[14] - T3[17] - T3[2]) +
                            (P1[0] * -1. * (T3[14] + T3[5] - 2. * (T3[2])) +
                             (P1[3] * -1. * (T3[5] + T3[14] - 2. * (T3[17])) +
                              P2[0] * (T3[14] + T3[5] - 2. * (T3[2]))))))))) +
               (P2[3] * (P2[1] * -1. *
                             (+2. * (T3[9] + T3[15]) + cI * (T3[13] + T3[16]) -
                              T3[3] - T3[6]) +
                         (P2[2] * (T3[4] + T3[10] + cI * (T3[9] + T3[15]) -
                                   2. * (T3[13] + T3[16])) +
                          (P1[1] * (T3[15] + T3[9] - T3[3] - T3[6]) +
                           (P1[2] * (T3[16] + T3[13] - T3[4] - T3[10]) +
                            (P1[0] * -1. * (T3[14] + T3[5] - 2. * (T3[2])) +
                             (P1[3] * -1. * (T3[5] + T3[14] - 2. * (T3[17])) +
                              P2[3] * (T3[5] + T3[14] - 2. * (T3[17])))))))) +
                (P2[1] *
                     (P1[0] * -1. * (T3[6] + T3[3] + cI * (T3[10] + T3[4])) +
                      (P1[3] * (T3[9] + T3[15] + cI * (T3[13] + T3[16])) +
                       (P2[2] * -2. *
                            (T3[8] + T3[11] - cI * (T3[7]) + cI * (T3[12])) +
                        (P1[1] * (+2. * (T3[7]) + cI * (T3[11] + T3[8])) +
                         (P1[2] * (T3[8] + T3[11] + 2. * cI * (T3[12])) -
                          P2[1] * (+2. * (T3[7]) + cI * (T3[11] + T3[8]))))))) +
                 P2[2] * (P1[0] * (+cI * (T3[6] + T3[3]) - T3[10] - T3[4]) +
                          (P1[3] * (T3[13] + T3[16] - cI * (T3[9] + T3[15])) +
                           (P1[1] * (T3[11] + T3[8] - 2. * cI * (T3[7])) +
                            (P1[2] * -1. *
                                 (+cI * (T3[8] + T3[11]) - 2. * (T3[12])) +
                             P2[2] * (+cI * (T3[8] + T3[11]) -
                                      2. * (T3[12]))))))))) +
          M2 *
              (F1[2] * (P1[1] * (T3[3] + T3[15] + T3[6] + T3[9]) +
                        (P1[2] * (T3[4] + T3[16] + T3[10] + T3[13]) +
                         (P2[1] * -1. * (T3[3] + T3[15] + T3[6] + T3[9]) +
                          (P2[2] * -1. * (T3[4] + T3[16] + T3[10] + T3[13]) +
                           (T3[14] * (P2[0] + P1[3] - P1[0] - P2[3]) +
                            (T3[5] * (P1[3] + P2[0] - P2[3] - P1[0]) +
                             (T3[2] * 2. * (P2[0] - P1[0]) +
                              2. * (T3[17] * (P1[3] - P2[3]))))))))) +
               F1[3] *
                   (P1[0] * (+cI * (T3[10] + T3[4]) - T3[6] - T3[3]) +
                    (P1[3] * (T3[9] + T3[15] - cI * (T3[13] + T3[16])) +
                     (P2[0] * (T3[6] + T3[3] - cI * (T3[10] + T3[4])) +
                      (P2[3] * (+cI * (T3[13] + T3[16]) - T3[9] - T3[15]) +
                       (T3[11] * (P1[2] - cI * (P1[1]) + cI * (P2[1]) - P2[2]) +
                        (T3[8] * (P1[2] - cI * (P1[1]) + cI * (P2[1]) - P2[2]) +
                         (T3[12] * 2. * (-cI * (P1[2]) + cI * (P2[2])) +
                          2. * (T3[7] * (P1[1] - P2[1]))))))))))));
    F2[5] =
        denom * -cI *
        (F1[4] *
             (P2[0] *
                  (P2[3] * (T3[9] + T3[6] + T3[15] + T3[3] +
                            cI * (T3[13] + T3[10] + T3[16] + T3[4])) +
                   (P2[1] * (+2. * (T3[7] + T3[2]) + cI * (T3[11] + T3[8]) -
                             T3[14] - T3[5]) +
                    (P2[2] * (T3[8] + T3[11] - cI * (T3[14] + T3[5]) +
                              2. * cI * (T3[12] + T3[2])) +
                     (P1[0] * (T3[6] + T3[3] + cI * (T3[10] + T3[4])) +
                      (P1[3] * -1. * (T3[9] + T3[15] + cI * (T3[13] + T3[16])) +
                       (P2[0] * -1. * (T3[6] + T3[3] + cI * (T3[10] + T3[4])) +
                        (P1[1] * -1. * (+2. * (T3[7]) + cI * (T3[11] + T3[8])) -
                         P1[2] * (T3[8] + T3[11] + 2. * cI * (T3[12]))))))))) +
              (P2[1] * (P2[2] * (T3[16] + T3[13] - cI * (T3[3] + T3[6]) +
                                 cI * (T3[15] + T3[9]) - T3[4] - T3[10]) +
                        (P2[3] * -1. *
                             (T3[5] + T3[14] + 2. * (T3[7]) +
                              cI * (T3[11] + T3[8]) - 2. * (T3[17])) +
                         (P1[1] * (T3[3] + T3[6] - T3[15] - T3[9]) +
                          (P1[2] * (T3[4] + T3[10] - T3[16] - T3[13]) +
                           (P2[1] * (T3[15] + T3[9] - T3[3] - T3[6]) +
                            (P1[0] * (T3[14] + T3[5] - 2. * (T3[2])) +
                             P1[3] * (T3[5] + T3[14] - 2. * (T3[17])))))))) +
               (P2[2] *
                    (P2[3] * -1. *
                         (T3[8] + T3[11] - 2. * cI * (T3[17]) +
                          cI * (T3[5] + T3[14]) + 2. * cI * (T3[12])) +
                     (P1[1] * (-cI * (T3[15] + T3[9]) + cI * (T3[3] + T3[6])) +
                      (P1[2] *
                           (-cI * (T3[16] + T3[13]) + cI * (T3[4] + T3[10])) +
                       (P2[2] *
                            (-cI * (T3[4] + T3[10]) + cI * (T3[16] + T3[13])) +
                        (P1[0] * (-2. * cI * (T3[2]) + cI * (T3[14] + T3[5])) +
                         P1[3] * (-2. * cI * (T3[17]) +
                                  cI * (T3[5] + T3[14]))))))) +
                P2[3] *
                    (P1[0] * -1. * (T3[6] + T3[3] + cI * (T3[10] + T3[4])) +
                     (P1[3] * (T3[9] + T3[15] + cI * (T3[13] + T3[16])) +
                      (P2[3] * -1. * (T3[9] + T3[15] + cI * (T3[13] + T3[16])) +
                       (P1[1] * (+2. * (T3[7]) + cI * (T3[11] + T3[8])) +
                        P1[2] * (T3[8] + T3[11] + 2. * cI * (T3[12]))))))))) +
         (F1[5] *
              (P2[0] * (P2[1] * -1. *
                            (T3[15] + T3[9] + 2. * (T3[3] + T3[6]) -
                             cI * (T3[10] + T3[4])) +
                        (P2[2] * -1. *
                             (T3[16] + T3[13] + 2. * (T3[4] + T3[10]) +
                              cI * (T3[6] + T3[3])) +
                         (P1[1] * (T3[3] + T3[15] + T3[6] + T3[9]) +
                          (P1[2] * (T3[4] + T3[16] + T3[10] + T3[13]) +
                           (P2[3] * -2. * (T3[5] + T3[17] + T3[2] + T3[14]) +
                            (P1[0] * -1. * (T3[14] + T3[5] + 2. * (T3[2])) +
                             (P1[3] * (T3[5] + T3[14] + 2. * (T3[17])) +
                              P2[0] * (T3[14] + T3[5] + 2. * (T3[2]))))))))) +
               (P2[3] * (P2[1] * (T3[3] + T3[6] + 2. * (T3[9] + T3[15]) -
                                  cI * (T3[13] + T3[16])) +
                         (P2[2] * (T3[4] + T3[10] + 2. * (T3[13] + T3[16]) +
                                   cI * (T3[9] + T3[15])) +
                          (P1[1] * -1. * (T3[3] + T3[15] + T3[6] + T3[9]) +
                           (P1[2] * -1. * (T3[4] + T3[16] + T3[10] + T3[13]) +
                            (P1[0] * (T3[14] + T3[5] + 2. * (T3[2])) +
                             (P1[3] * -1. * (T3[5] + T3[14] + 2. * (T3[17])) +
                              P2[3] * (T3[5] + T3[14] + 2. * (T3[17])))))))) +
                (P2[1] *
                     (P1[0] * (T3[6] + T3[3] - cI * (T3[10] + T3[4])) +
                      (P1[3] * (+cI * (T3[13] + T3[16]) - T3[9] - T3[15]) +
                       (P2[2] * 2. *
                            (T3[8] + T3[11] - cI * (T3[12]) + cI * (T3[7])) +
                        (P1[1] * (+cI * (T3[11] + T3[8]) - 2. * (T3[7])) +
                         (P1[2] * -1. * (T3[8] + T3[11] - 2. * cI * (T3[12])) -
                          P2[1] * (+cI * (T3[11] + T3[8]) - 2. * (T3[7]))))))) +
                 P2[2] *
                     (P1[0] * (T3[10] + T3[4] + cI * (T3[6] + T3[3])) +
                      (P1[3] * -1. * (T3[13] + T3[16] + cI * (T3[9] + T3[15])) +
                       (P1[1] * -1. * (T3[11] + T3[8] + 2. * cI * (T3[7])) +
                        (P1[2] * -1. *
                             (+2. * (T3[12]) + cI * (T3[8] + T3[11])) +
                         P2[2] *
                             (+2. * (T3[12]) + cI * (T3[8] + T3[11]))))))))) +
          M2 *
              (F1[2] *
                   (P1[0] * (T3[6] + T3[3] + cI * (T3[10] + T3[4])) +
                    (P1[3] * -1. * (T3[9] + T3[15] + cI * (T3[13] + T3[16])) +
                     (P2[0] * -1. * (T3[6] + T3[3] + cI * (T3[10] + T3[4])) +
                      (P2[3] * (T3[9] + T3[15] + cI * (T3[13] + T3[16])) +
                       (T3[11] * (P2[2] - cI * (P1[1]) + cI * (P2[1]) - P1[2]) +
                        (T3[8] * (P2[2] - cI * (P1[1]) + cI * (P2[1]) - P1[2]) +
                         (T3[12] * 2. * (-cI * (P1[2]) + cI * (P2[2])) +
                          2. * (T3[7] * (P2[1] - P1[1]))))))))) +
               F1[3] * (P1[1] * (T3[15] + T3[9] - T3[3] - T3[6]) +
                        (P1[2] * (T3[16] + T3[13] - T3[4] - T3[10]) +
                         (P2[1] * (T3[3] + T3[6] - T3[15] - T3[9]) +
                          (P2[2] * (T3[4] + T3[10] - T3[16] - T3[13]) +
                           (T3[14] * (P2[0] + P2[3] - P1[0] - P1[3]) +
                            (T3[5] * (P2[3] + P2[0] - P1[3] - P1[0]) +
                             (T3[2] * 2. * (P1[0] - P2[0]) +
                              2. * (T3[17] * (P1[3] - P2[3]))))))))))));
}

void FFV6_0(complex<double> F1[], complex<double> F2[], complex<double> V3[],
            complex<double> COUP, complex<double> &vertex)
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP1;
    complex<double> TMP0;
    TMP1 =
        (F1[4] * (F2[2] * (V3[2] - V3[5]) - F2[3] * (V3[3] + cI * (V3[4]))) +
         F1[5] * (F2[2] * (+cI * (V3[4]) - V3[3]) + F2[3] * (V3[2] + V3[5])));
    TMP0 = (F1[2] * (F2[4] * (V3[2] + V3[5]) + F2[5] * (V3[3] + cI * (V3[4]))) +
            F1[3] * (F2[4] * (V3[3] - cI * (V3[4])) + F2[5] * (V3[2] - V3[5])));
    vertex = COUP * (-cI * (TMP0) + 2. * cI * (TMP1));
}

void FFT5_2(complex<double> F1[], complex<double> T3[], complex<double> COUP,
            double M2, double W2, complex<double> F2[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> denom;
    double P1[4];
    double P2[4];
    complex<double> TMP15;
    complex<double> TMP13;
    P1[0] = F1[0].real();
    P1[1] = F1[1].real();
    P1[2] = F1[1].imag();
    P1[3] = F1[0].imag();
    F2[0] = +F1[0] + T3[0];
    F2[1] = +F1[1] + T3[1];
    P2[0] = -F2[0].real();
    P2[1] = -F2[1].real();
    P2[2] = -F2[1].imag();
    P2[3] = -F2[0].imag();
    TMP15 =
        (P1[0] * -1. *
             (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] - P2[0] * T3[2]) +
         (P1[1] *
              (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9] - P2[0] * T3[6]) +
          (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] * T3[13] -
                    P2[0] * T3[10]) +
           P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] + P2[3] * T3[17] -
                    P2[0] * T3[14]))));
    TMP13 =
        (P1[0] * -1. *
             (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] - P2[0] * T3[2]) +
         (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] * T3[15] -
                   P2[0] * T3[3]) +
          (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] + P2[3] * T3[16] -
                    P2[0] * T3[4]) +
           P1[3] * (P2[1] * T3[9] + P2[2] * T3[13] + P2[3] * T3[17] -
                    P2[0] * T3[5]))));
    denom = COUP / (pow(P2[0], 2) - pow(P2[1], 2) - pow(P2[2], 2) -
                    pow(P2[3], 2) - M2 * (M2 - cI * W2));
    F2[2] = denom * cI *
            (TMP13 * (F1[4] * (P2[0] - P2[3]) +
                      (F1[5] * (+cI * (P2[2]) - P2[1]) + F1[2] * M2)) +
             TMP15 * (F1[4] * (P2[0] - P2[3]) +
                      (F1[5] * (+cI * (P2[2]) - P2[1]) + F1[2] * M2)));
    F2[3] = denom * -cI *
            (TMP13 * (F1[4] * (P2[1] + cI * (P2[2])) +
                      (F1[5] * -1. * (P2[0] + P2[3]) - F1[3] * M2)) +
             TMP15 * (F1[4] * (P2[1] + cI * (P2[2])) +
                      (F1[5] * -1. * (P2[0] + P2[3]) - F1[3] * M2)));
    F2[4] = denom * -cI *
            (TMP13 * (F1[2] * -1. * (P2[0] + P2[3]) +
                      (F1[3] * (+cI * (P2[2]) - P2[1]) - F1[4] * M2)) +
             TMP15 * (F1[2] * -1. * (P2[0] + P2[3]) +
                      (F1[3] * (+cI * (P2[2]) - P2[1]) - F1[4] * M2)));
    F2[5] = denom * cI *
            (TMP13 * (F1[2] * (P2[1] + cI * (P2[2])) +
                      (F1[3] * (P2[0] - P2[3]) + F1[5] * M2)) +
             TMP15 * (F1[2] * (P2[1] + cI * (P2[2])) +
                      (F1[3] * (P2[0] - P2[3]) + F1[5] * M2)));
}

void VVT7_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
            double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> denom;
    double P1[4];
    double P2[4];
    complex<double> TMP15;
    complex<double> TMP26;
    double OM1;
    complex<double> TMP13;
    OM1 = 0.;
    if (M1 != 0.)
        OM1 = 1. / pow(M1, 2);
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    V1[0] = +V2[0] + T3[0];
    V1[1] = +V2[1] + T3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP15 =
        (P1[0] * -1. *
             (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] - P2[0] * T3[2]) +
         (P1[1] *
              (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9] - P2[0] * T3[6]) +
          (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] * T3[13] -
                    P2[0] * T3[10]) +
           P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] + P2[3] * T3[17] -
                    P2[0] * T3[14]))));
    TMP26 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    TMP13 =
        (P1[0] * -1. *
             (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] - P2[0] * T3[2]) +
         (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] * T3[15] -
                   P2[0] * T3[3]) +
          (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] + P2[3] * T3[16] -
                    P2[0] * T3[4]) +
           P1[3] * (P2[1] * T3[9] + P2[2] * T3[13] + P2[3] * T3[17] -
                    P2[0] * T3[5]))));
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] = denom * (OM1 * P1[0] * TMP26 * (+cI * (TMP13 + TMP15)) -
                     V2[2] * (+cI * (TMP13 + TMP15)));
    V1[3] = denom * (OM1 * P1[1] * TMP26 * (+cI * (TMP13 + TMP15)) -
                     V2[3] * (+cI * (TMP13 + TMP15)));
    V1[4] = denom * (OM1 * P1[2] * TMP26 * (+cI * (TMP13 + TMP15)) -
                     V2[4] * (+cI * (TMP13 + TMP15)));
    V1[5] = denom * (OM1 * P1[3] * TMP26 * (+cI * (TMP13 + TMP15)) -
                     V2[5] * (+cI * (TMP13 + TMP15)));
}

void FFT2_3(complex<double> F1[], complex<double> F2[], complex<double> COUP,
            double M3, double W3, complex<double> T3[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP12;
    double P1[4];
    complex<double> TMP22;
    double P2[4];
    complex<double> TMP23;
    double P3[4];
    double OM3;
    complex<double> denom;
    complex<double> TMP24;
    complex<double> TMP9;
    P1[0] = F1[0].real();
    P1[1] = F1[1].real();
    P1[2] = F1[1].imag();
    P1[3] = F1[0].imag();
    P2[0] = F2[0].real();
    P2[1] = F2[1].real();
    P2[2] = F2[1].imag();
    P2[3] = F2[0].imag();
    OM3 = 0.;
    if (M3 != 0.)
        OM3 = 1. / pow(M3, 2);
    T3[0] = +F1[0] + F2[0];
    T3[1] = +F1[1] + F2[1];
    P3[0] = -T3[0].real();
    P3[1] = -T3[1].real();
    P3[2] = -T3[1].imag();
    P3[3] = -T3[0].imag();
    TMP24 =
        (F1[2] * (F2[4] * (P2[0] + P2[3]) + F2[5] * (P2[1] + cI * (P2[2]))) +
         (F1[3] * (F2[4] * (P2[1] - cI * (P2[2])) + F2[5] * (P2[0] - P2[3])) +
          (F1[4] * (F2[2] * (P2[0] - P2[3]) - F2[3] * (P2[1] + cI * (P2[2]))) +
           F1[5] *
               (F2[2] * (+cI * (P2[2]) - P2[1]) + F2[3] * (P2[0] + P2[3])))));
    TMP23 =
        (F1[2] * (F2[4] * (P3[0] + P3[3]) + F2[5] * (P3[1] + cI * (P3[2]))) +
         (F1[3] * (F2[4] * (P3[1] - cI * (P3[2])) + F2[5] * (P3[0] - P3[3])) +
          (F1[4] * (F2[2] * (P3[0] - P3[3]) - F2[3] * (P3[1] + cI * (P3[2]))) +
           F1[5] *
               (F2[2] * (+cI * (P3[2]) - P3[1]) + F2[3] * (P3[0] + P3[3])))));
    TMP9 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    TMP22 =
        (F1[2] * (F2[4] * (P1[0] + P1[3]) + F2[5] * (P1[1] + cI * (P1[2]))) +
         (F1[3] * (F2[4] * (P1[1] - cI * (P1[2])) + F2[5] * (P1[0] - P1[3])) +
          (F1[4] * (F2[2] * (P1[0] - P1[3]) - F2[3] * (P1[1] + cI * (P1[2]))) +
           F1[5] *
               (F2[2] * (+cI * (P1[2]) - P1[1]) + F2[3] * (P1[0] + P1[3])))));
    TMP12 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]);
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    T3[2] =
        denom * 2. * cI *
        (OM3 * (P3[0] *
                    (TMP12 * (F1[2] * F2[4] + F1[3] * F2[5] + F1[4] * F2[2] +
                              F1[5] * F2[3] - 2. / 3. * (P3[0] * OM3 * TMP23)) +
                     (TMP9 * -1. *
                          (F1[2] * F2[4] + F1[3] * F2[5] + F1[4] * F2[2] +
                           F1[5] * F2[3] - 2. / 3. * (P3[0] * OM3 * TMP23)) +
                      (P3[0] * 1. / 3. * (TMP22 - TMP24) +
                       TMP23 * (P2[0] - P1[0])))) +
                1. / 3. * (TMP23 * (TMP9 - TMP12))) +
         (P1[0] *
              (F1[2] * F2[4] + F1[3] * F2[5] + F1[4] * F2[2] + F1[5] * F2[3]) +
          (P2[0] * -1. *
               (F1[2] * F2[4] + F1[3] * F2[5] + F1[4] * F2[2] + F1[5] * F2[3]) +
           (-1. / 3. * (TMP22) + 1. / 3. * (TMP24)))));
    T3[3] = denom * cI *
            (OM3 * (P3[0] * (TMP12 * -1. *
                                 (F1[2] * F2[5] + F1[3] * F2[4] +
                                  4. / 3. * (P3[1] * OM3 * TMP23) -
                                  F1[4] * F2[3] - F1[5] * F2[2]) +
                             (TMP9 * (F1[2] * F2[5] + F1[3] * F2[4] +
                                      4. / 3. * (P3[1] * OM3 * TMP23) -
                                      F1[4] * F2[3] - F1[5] * F2[2]) +
                              (P3[1] * 2. / 3. * (TMP22 - TMP24) +
                               TMP23 * (P2[1] - P1[1])))) +
                    P3[1] * (TMP12 * (F1[2] * F2[4] + F1[3] * F2[5] +
                                      F1[4] * F2[2] + F1[5] * F2[3]) +
                             (TMP9 * -1. *
                                  (F1[2] * F2[4] + F1[3] * F2[5] +
                                   F1[4] * F2[2] + F1[5] * F2[3]) +
                              TMP23 * (P2[0] - P1[0])))) +
             (F1[2] * (F2[4] * (P1[1] - P2[1]) + F2[5] * (P2[0] - P1[0])) +
              (F1[3] * (F2[4] * (P2[0] - P1[0]) + F2[5] * (P1[1] - P2[1])) +
               (F1[4] * (F2[2] * (P1[1] - P2[1]) + F2[3] * (P1[0] - P2[0])) +
                F1[5] * (F2[2] * (P1[0] - P2[0]) + F2[3] * (P1[1] - P2[1]))))));
    T3[4] = denom * cI *
            (OM3 * (P3[0] * (TMP12 * -1. *
                                 (-cI * (F1[3] * F2[4] + F1[4] * F2[3]) +
                                  cI * (F1[2] * F2[5] + F1[5] * F2[2]) +
                                  4. / 3. * (P3[2] * OM3 * TMP23)) +
                             (TMP9 * (-cI * (F1[3] * F2[4] + F1[4] * F2[3]) +
                                      cI * (F1[2] * F2[5] + F1[5] * F2[2]) +
                                      4. / 3. * (P3[2] * OM3 * TMP23)) +
                              (P3[2] * 2. / 3. * (TMP22 - TMP24) +
                               TMP23 * (P2[2] - P1[2])))) +
                    P3[2] * (TMP12 * (F1[2] * F2[4] + F1[3] * F2[5] +
                                      F1[4] * F2[2] + F1[5] * F2[3]) +
                             (TMP9 * -1. *
                                  (F1[2] * F2[4] + F1[3] * F2[5] +
                                   F1[4] * F2[2] + F1[5] * F2[3]) +
                              TMP23 * (P2[0] - P1[0])))) +
             (F1[2] * (F2[4] * (P1[2] - P2[2]) +
                       F2[5] * (-cI * (P1[0]) + cI * (P2[0]))) +
              (F1[3] * (F2[4] * (-cI * (P2[0]) + cI * (P1[0])) +
                        F2[5] * (P1[2] - P2[2])) +
               (F1[4] * (F2[2] * (P1[2] - P2[2]) +
                         F2[3] * (-cI * (P2[0]) + cI * (P1[0]))) +
                F1[5] * (F2[2] * (-cI * (P1[0]) + cI * (P2[0])) +
                         F2[3] * (P1[2] - P2[2]))))));
    T3[5] = denom * cI *
            (OM3 * (P3[0] * (TMP12 * -1. *
                                 (F1[2] * F2[4] + F1[5] * F2[3] +
                                  4. / 3. * (P3[3] * OM3 * TMP23) -
                                  F1[3] * F2[5] - F1[4] * F2[2]) +
                             (TMP9 * (F1[2] * F2[4] + F1[5] * F2[3] +
                                      4. / 3. * (P3[3] * OM3 * TMP23) -
                                      F1[3] * F2[5] - F1[4] * F2[2]) +
                              (P3[3] * 2. / 3. * (TMP22 - TMP24) +
                               TMP23 * (P2[3] - P1[3])))) +
                    P3[3] * (TMP12 * (F1[2] * F2[4] + F1[3] * F2[5] +
                                      F1[4] * F2[2] + F1[5] * F2[3]) +
                             (TMP9 * -1. *
                                  (F1[2] * F2[4] + F1[3] * F2[5] +
                                   F1[4] * F2[2] + F1[5] * F2[3]) +
                              TMP23 * (P2[0] - P1[0])))) +
             (F1[2] * F2[4] * (P1[3] + P2[0] - P1[0] - P2[3]) +
              (F1[3] * F2[5] * (P1[3] + P1[0] - P2[3] - P2[0]) +
               (F1[4] * F2[2] * (P1[3] + P1[0] - P2[3] - P2[0]) +
                F1[5] * F2[3] * (P1[3] + P2[0] - P1[0] - P2[3])))));
    T3[6] = denom * cI *
            (OM3 * (P3[0] * (TMP12 * -1. *
                                 (F1[2] * F2[5] + F1[3] * F2[4] +
                                  4. / 3. * (P3[1] * OM3 * TMP23) -
                                  F1[4] * F2[3] - F1[5] * F2[2]) +
                             (TMP9 * (F1[2] * F2[5] + F1[3] * F2[4] +
                                      4. / 3. * (P3[1] * OM3 * TMP23) -
                                      F1[4] * F2[3] - F1[5] * F2[2]) +
                              (P3[1] * 2. / 3. * (TMP22 - TMP24) +
                               TMP23 * (P2[1] - P1[1])))) +
                    P3[1] * (TMP12 * (F1[2] * F2[4] + F1[3] * F2[5] +
                                      F1[4] * F2[2] + F1[5] * F2[3]) +
                             (TMP9 * -1. *
                                  (F1[2] * F2[4] + F1[3] * F2[5] +
                                   F1[4] * F2[2] + F1[5] * F2[3]) +
                              TMP23 * (P2[0] - P1[0])))) +
             (F1[2] * (F2[4] * (P1[1] - P2[1]) + F2[5] * (P2[0] - P1[0])) +
              (F1[3] * (F2[4] * (P2[0] - P1[0]) + F2[5] * (P1[1] - P2[1])) +
               (F1[4] * (F2[2] * (P1[1] - P2[1]) + F2[3] * (P1[0] - P2[0])) +
                F1[5] * (F2[2] * (P1[0] - P2[0]) + F2[3] * (P1[1] - P2[1]))))));
    T3[7] =
        denom * 2. * cI *
        (OM3 * (P3[1] * (TMP12 * -1. *
                             (F1[2] * F2[5] + F1[3] * F2[4] +
                              2. / 3. * (P3[1] * OM3 * TMP23) - F1[4] * F2[3] -
                              F1[5] * F2[2]) +
                         (TMP9 * (F1[2] * F2[5] + F1[3] * F2[4] +
                                  2. / 3. * (P3[1] * OM3 * TMP23) -
                                  F1[4] * F2[3] - F1[5] * F2[2]) +
                          (P3[1] * 1. / 3. * (TMP22 - TMP24) +
                           TMP23 * (P2[1] - P1[1])))) +
                1. / 3. * (TMP23 * (TMP12 - TMP9))) +
         (P1[1] *
              (F1[4] * F2[3] + F1[5] * F2[2] - F1[2] * F2[5] - F1[3] * F2[4]) +
          (P2[1] *
               (F1[2] * F2[5] + F1[3] * F2[4] - F1[4] * F2[3] - F1[5] * F2[2]) +
           (-1. / 3. * (TMP24) + 1. / 3. * (TMP22)))));
    T3[8] =
        denom * cI *
        (OM3 * (P3[1] * (TMP12 * -1. *
                             (-cI * (F1[3] * F2[4] + F1[4] * F2[3]) +
                              cI * (F1[2] * F2[5] + F1[5] * F2[2]) +
                              4. / 3. * (P3[2] * OM3 * TMP23)) +
                         (TMP9 * (-cI * (F1[3] * F2[4] + F1[4] * F2[3]) +
                                  cI * (F1[2] * F2[5] + F1[5] * F2[2]) +
                                  4. / 3. * (P3[2] * OM3 * TMP23)) +
                          (P3[2] * 2. / 3. * (TMP22 - TMP24) +
                           TMP23 * (P2[2] - P1[2])))) +
                P3[2] * (TMP12 * (F1[4] * F2[3] + F1[5] * F2[2] -
                                  F1[2] * F2[5] - F1[3] * F2[4]) +
                         (TMP9 * (F1[2] * F2[5] + F1[3] * F2[4] -
                                  F1[4] * F2[3] - F1[5] * F2[2]) +
                          TMP23 * (P2[1] - P1[1])))) +
         (F1[2] * F2[5] * (P2[2] - cI * (P1[1]) + cI * (P2[1]) - P1[2]) +
          (F1[3] * F2[4] * (P2[2] - cI * (P2[1]) + cI * (P1[1]) - P1[2]) +
           (F1[4] * F2[3] * (P1[2] - cI * (P2[1]) + cI * (P1[1]) - P2[2]) +
            F1[5] * F2[2] * (P1[2] - cI * (P1[1]) + cI * (P2[1]) - P2[2])))));
    T3[9] = denom * cI *
            (OM3 * (P3[1] * (TMP12 * -1. *
                                 (F1[2] * F2[4] + F1[5] * F2[3] +
                                  4. / 3. * (P3[3] * OM3 * TMP23) -
                                  F1[3] * F2[5] - F1[4] * F2[2]) +
                             (TMP9 * (F1[2] * F2[4] + F1[5] * F2[3] +
                                      4. / 3. * (P3[3] * OM3 * TMP23) -
                                      F1[3] * F2[5] - F1[4] * F2[2]) +
                              (P3[3] * 2. / 3. * (TMP22 - TMP24) +
                               TMP23 * (P2[3] - P1[3])))) +
                    P3[3] * (TMP12 * (F1[4] * F2[3] + F1[5] * F2[2] -
                                      F1[2] * F2[5] - F1[3] * F2[4]) +
                             (TMP9 * (F1[2] * F2[5] + F1[3] * F2[4] -
                                      F1[4] * F2[3] - F1[5] * F2[2]) +
                              TMP23 * (P2[1] - P1[1])))) +
             (F1[2] * (F2[4] * (P2[1] - P1[1]) + F2[5] * (P2[3] - P1[3])) +
              (F1[3] * (F2[4] * (P2[3] - P1[3]) + F2[5] * (P1[1] - P2[1])) +
               (F1[4] * (F2[2] * (P1[1] - P2[1]) + F2[3] * (P1[3] - P2[3])) +
                F1[5] * (F2[2] * (P1[3] - P2[3]) + F2[3] * (P2[1] - P1[1]))))));
    T3[10] = denom * cI *
             (OM3 * (P3[0] * (TMP12 * -1. *
                                  (-cI * (F1[3] * F2[4] + F1[4] * F2[3]) +
                                   cI * (F1[2] * F2[5] + F1[5] * F2[2]) +
                                   4. / 3. * (P3[2] * OM3 * TMP23)) +
                              (TMP9 * (-cI * (F1[3] * F2[4] + F1[4] * F2[3]) +
                                       cI * (F1[2] * F2[5] + F1[5] * F2[2]) +
                                       4. / 3. * (P3[2] * OM3 * TMP23)) +
                               (P3[2] * 2. / 3. * (TMP22 - TMP24) +
                                TMP23 * (P2[2] - P1[2])))) +
                     P3[2] * (TMP12 * (F1[2] * F2[4] + F1[3] * F2[5] +
                                       F1[4] * F2[2] + F1[5] * F2[3]) +
                              (TMP9 * -1. *
                                   (F1[2] * F2[4] + F1[3] * F2[5] +
                                    F1[4] * F2[2] + F1[5] * F2[3]) +
                               TMP23 * (P2[0] - P1[0])))) +
              (F1[2] * (F2[4] * (P1[2] - P2[2]) +
                        F2[5] * (-cI * (P1[0]) + cI * (P2[0]))) +
               (F1[3] * (F2[4] * (-cI * (P2[0]) + cI * (P1[0])) +
                         F2[5] * (P1[2] - P2[2])) +
                (F1[4] * (F2[2] * (P1[2] - P2[2]) +
                          F2[3] * (-cI * (P2[0]) + cI * (P1[0]))) +
                 F1[5] * (F2[2] * (-cI * (P1[0]) + cI * (P2[0])) +
                          F2[3] * (P1[2] - P2[2]))))));
    T3[11] =
        denom * cI *
        (OM3 * (P3[1] * (TMP12 * -1. *
                             (-cI * (F1[3] * F2[4] + F1[4] * F2[3]) +
                              cI * (F1[2] * F2[5] + F1[5] * F2[2]) +
                              4. / 3. * (P3[2] * OM3 * TMP23)) +
                         (TMP9 * (-cI * (F1[3] * F2[4] + F1[4] * F2[3]) +
                                  cI * (F1[2] * F2[5] + F1[5] * F2[2]) +
                                  4. / 3. * (P3[2] * OM3 * TMP23)) +
                          (P3[2] * 2. / 3. * (TMP22 - TMP24) +
                           TMP23 * (P2[2] - P1[2])))) +
                P3[2] * (TMP12 * (F1[4] * F2[3] + F1[5] * F2[2] -
                                  F1[2] * F2[5] - F1[3] * F2[4]) +
                         (TMP9 * (F1[2] * F2[5] + F1[3] * F2[4] -
                                  F1[4] * F2[3] - F1[5] * F2[2]) +
                          TMP23 * (P2[1] - P1[1])))) +
         (F1[2] * F2[5] * (P2[2] - cI * (P1[1]) + cI * (P2[1]) - P1[2]) +
          (F1[3] * F2[4] * (P2[2] - cI * (P2[1]) + cI * (P1[1]) - P1[2]) +
           (F1[4] * F2[3] * (P1[2] - cI * (P2[1]) + cI * (P1[1]) - P2[2]) +
            F1[5] * F2[2] * (P1[2] - cI * (P1[1]) + cI * (P2[1]) - P2[2])))));
    T3[12] = denom * 2. * cI *
             (OM3 * (P3[2] * (TMP12 * -1. *
                                  (-cI * (F1[3] * F2[4] + F1[4] * F2[3]) +
                                   cI * (F1[2] * F2[5] + F1[5] * F2[2]) +
                                   2. / 3. * (P3[2] * OM3 * TMP23)) +
                              (TMP9 * (-cI * (F1[3] * F2[4] + F1[4] * F2[3]) +
                                       cI * (F1[2] * F2[5] + F1[5] * F2[2]) +
                                       2. / 3. * (P3[2] * OM3 * TMP23)) +
                               (P3[2] * 1. / 3. * (TMP22 - TMP24) +
                                TMP23 * (P2[2] - P1[2])))) +
                     1. / 3. * (TMP23 * (TMP12 - TMP9))) +
              (P1[2] * (-cI * (F1[2] * F2[5] + F1[5] * F2[2]) +
                        cI * (F1[3] * F2[4] + F1[4] * F2[3])) +
               (P2[2] * (-cI * (F1[3] * F2[4] + F1[4] * F2[3]) +
                         cI * (F1[2] * F2[5] + F1[5] * F2[2])) +
                (-1. / 3. * (TMP24) + 1. / 3. * (TMP22)))));
    T3[13] = denom * cI *
             (OM3 * (P3[2] * (TMP12 * -1. *
                                  (F1[2] * F2[4] + F1[5] * F2[3] +
                                   4. / 3. * (P3[3] * OM3 * TMP23) -
                                   F1[3] * F2[5] - F1[4] * F2[2]) +
                              (TMP9 * (F1[2] * F2[4] + F1[5] * F2[3] +
                                       4. / 3. * (P3[3] * OM3 * TMP23) -
                                       F1[3] * F2[5] - F1[4] * F2[2]) +
                               (P3[3] * 2. / 3. * (TMP22 - TMP24) +
                                TMP23 * (P2[3] - P1[3])))) +
                     P3[3] * (TMP12 * (-cI * (F1[2] * F2[5] + F1[5] * F2[2]) +
                                       cI * (F1[3] * F2[4] + F1[4] * F2[3])) +
                              (TMP9 * (-cI * (F1[3] * F2[4] + F1[4] * F2[3]) +
                                       cI * (F1[2] * F2[5] + F1[5] * F2[2])) +
                               TMP23 * (P2[2] - P1[2])))) +
              (F1[2] * (F2[4] * (P2[2] - P1[2]) +
                        F2[5] * (-cI * (P1[3]) + cI * (P2[3]))) +
               (F1[3] * (F2[4] * (-cI * (P2[3]) + cI * (P1[3])) +
                         F2[5] * (P1[2] - P2[2])) +
                (F1[4] * (F2[2] * (P1[2] - P2[2]) +
                          F2[3] * (-cI * (P2[3]) + cI * (P1[3]))) +
                 F1[5] * (F2[2] * (-cI * (P1[3]) + cI * (P2[3])) +
                          F2[3] * (P2[2] - P1[2]))))));
    T3[14] = denom * cI *
             (OM3 * (P3[0] * (TMP12 * -1. *
                                  (F1[2] * F2[4] + F1[5] * F2[3] +
                                   4. / 3. * (P3[3] * OM3 * TMP23) -
                                   F1[3] * F2[5] - F1[4] * F2[2]) +
                              (TMP9 * (F1[2] * F2[4] + F1[5] * F2[3] +
                                       4. / 3. * (P3[3] * OM3 * TMP23) -
                                       F1[3] * F2[5] - F1[4] * F2[2]) +
                               (P3[3] * 2. / 3. * (TMP22 - TMP24) +
                                TMP23 * (P2[3] - P1[3])))) +
                     P3[3] * (TMP12 * (F1[2] * F2[4] + F1[3] * F2[5] +
                                       F1[4] * F2[2] + F1[5] * F2[3]) +
                              (TMP9 * -1. *
                                   (F1[2] * F2[4] + F1[3] * F2[5] +
                                    F1[4] * F2[2] + F1[5] * F2[3]) +
                               TMP23 * (P2[0] - P1[0])))) +
              (F1[2] * F2[4] * (P1[3] + P2[0] - P1[0] - P2[3]) +
               (F1[3] * F2[5] * (P1[0] + P1[3] - P2[0] - P2[3]) +
                (F1[4] * F2[2] * (P1[0] + P1[3] - P2[0] - P2[3]) +
                 F1[5] * F2[3] * (P1[3] + P2[0] - P1[0] - P2[3])))));
    T3[15] =
        denom * cI *
        (OM3 * (P3[1] * (TMP12 * -1. *
                             (F1[2] * F2[4] + F1[5] * F2[3] +
                              4. / 3. * (P3[3] * OM3 * TMP23) - F1[3] * F2[5] -
                              F1[4] * F2[2]) +
                         (TMP9 * (F1[2] * F2[4] + F1[5] * F2[3] +
                                  4. / 3. * (P3[3] * OM3 * TMP23) -
                                  F1[3] * F2[5] - F1[4] * F2[2]) +
                          (P3[3] * 2. / 3. * (TMP22 - TMP24) +
                           TMP23 * (P2[3] - P1[3])))) +
                P3[3] * (TMP12 * (F1[4] * F2[3] + F1[5] * F2[2] -
                                  F1[2] * F2[5] - F1[3] * F2[4]) +
                         (TMP9 * (F1[2] * F2[5] + F1[3] * F2[4] -
                                  F1[4] * F2[3] - F1[5] * F2[2]) +
                          TMP23 * (P2[1] - P1[1])))) +
         (F1[2] * (F2[4] * (P2[1] - P1[1]) + F2[5] * (P2[3] - P1[3])) +
          (F1[3] * (F2[4] * (P2[3] - P1[3]) + F2[5] * (P1[1] - P2[1])) +
           (F1[4] * (F2[2] * (P1[1] - P2[1]) + F2[3] * (P1[3] - P2[3])) +
            F1[5] * (F2[2] * (P1[3] - P2[3]) + F2[3] * (P2[1] - P1[1]))))));
    T3[16] = denom * cI *
             (OM3 * (P3[2] * (TMP12 * -1. *
                                  (F1[2] * F2[4] + F1[5] * F2[3] +
                                   4. / 3. * (P3[3] * OM3 * TMP23) -
                                   F1[3] * F2[5] - F1[4] * F2[2]) +
                              (TMP9 * (F1[2] * F2[4] + F1[5] * F2[3] +
                                       4. / 3. * (P3[3] * OM3 * TMP23) -
                                       F1[3] * F2[5] - F1[4] * F2[2]) +
                               (P3[3] * 2. / 3. * (TMP22 - TMP24) +
                                TMP23 * (P2[3] - P1[3])))) +
                     P3[3] * (TMP12 * (-cI * (F1[2] * F2[5] + F1[5] * F2[2]) +
                                       cI * (F1[3] * F2[4] + F1[4] * F2[3])) +
                              (TMP9 * (-cI * (F1[3] * F2[4] + F1[4] * F2[3]) +
                                       cI * (F1[2] * F2[5] + F1[5] * F2[2])) +
                               TMP23 * (P2[2] - P1[2])))) +
              (F1[2] * (F2[4] * (P2[2] - P1[2]) +
                        F2[5] * (-cI * (P1[3]) + cI * (P2[3]))) +
               (F1[3] * (F2[4] * (-cI * (P2[3]) + cI * (P1[3])) +
                         F2[5] * (P1[2] - P2[2])) +
                (F1[4] * (F2[2] * (P1[2] - P2[2]) +
                          F2[3] * (-cI * (P2[3]) + cI * (P1[3]))) +
                 F1[5] * (F2[2] * (-cI * (P1[3]) + cI * (P2[3])) +
                          F2[3] * (P2[2] - P1[2]))))));
    T3[17] =
        denom * 2. * cI *
        (OM3 * (P3[3] * (TMP12 * -1. *
                             (F1[2] * F2[4] + F1[5] * F2[3] +
                              2. / 3. * (P3[3] * OM3 * TMP23) - F1[3] * F2[5] -
                              F1[4] * F2[2]) +
                         (TMP9 * (F1[2] * F2[4] + F1[5] * F2[3] +
                                  2. / 3. * (P3[3] * OM3 * TMP23) -
                                  F1[3] * F2[5] - F1[4] * F2[2]) +
                          (P3[3] * 1. / 3. * (TMP22 - TMP24) +
                           TMP23 * (P2[3] - P1[3])))) +
                1. / 3. * (TMP23 * (TMP12 - TMP9))) +
         (P1[3] *
              (F1[3] * F2[5] + F1[4] * F2[2] - F1[2] * F2[4] - F1[5] * F2[3]) +
          (P2[3] *
               (F1[2] * F2[4] + F1[5] * F2[3] - F1[3] * F2[5] - F1[4] * F2[2]) +
           (-1. / 3. * (TMP24) + 1. / 3. * (TMP22)))));
}

void VVT8_1(complex<double> V2[], complex<double> T3[], complex<double> COUP,
            double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> denom;
    double P1[4];
    double P2[4];
    complex<double> TMP16;
    complex<double> TMP15;
    complex<double> TMP26;
    complex<double> TMP13;
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    V1[0] = +V2[0] + T3[0];
    V1[1] = +V2[1] + T3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP15 =
        (P1[0] * -1. *
             (P2[1] * T3[3] + P2[2] * T3[4] + P2[3] * T3[5] - P2[0] * T3[2]) +
         (P1[1] *
              (P2[1] * T3[7] + P2[2] * T3[8] + P2[3] * T3[9] - P2[0] * T3[6]) +
          (P1[2] * (P2[1] * T3[11] + P2[2] * T3[12] + P2[3] * T3[13] -
                    P2[0] * T3[10]) +
           P1[3] * (P2[1] * T3[15] + P2[2] * T3[16] + P2[3] * T3[17] -
                    P2[0] * T3[14]))));
    TMP26 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    TMP16 = (P1[0] * P2[0] - P1[1] * P2[1] - P1[2] * P2[2] - P1[3] * P2[3]);
    TMP13 =
        (P1[0] * -1. *
             (P2[1] * T3[6] + P2[2] * T3[10] + P2[3] * T3[14] - P2[0] * T3[2]) +
         (P1[1] * (P2[1] * T3[7] + P2[2] * T3[11] + P2[3] * T3[15] -
                   P2[0] * T3[3]) +
          (P1[2] * (P2[1] * T3[8] + P2[2] * T3[12] + P2[3] * T3[16] -
                    P2[0] * T3[4]) +
           P1[3] * (P2[1] * T3[9] + P2[2] * T3[13] + P2[3] * T3[17] -
                    P2[0] * T3[5]))));
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] = denom * (P2[0] * -TMP26 * (+cI * (TMP13 + TMP15)) +
                     TMP16 * V2[2] * (+cI * (TMP13 + TMP15)));
    V1[3] = denom * (P2[1] * -TMP26 * (+cI * (TMP13 + TMP15)) +
                     TMP16 * V2[3] * (+cI * (TMP13 + TMP15)));
    V1[4] = denom * (P2[2] * -TMP26 * (+cI * (TMP13 + TMP15)) +
                     TMP16 * V2[4] * (+cI * (TMP13 + TMP15)));
    V1[5] = denom * (P2[3] * -TMP26 * (+cI * (TMP13 + TMP15)) +
                     TMP16 * V2[5] * (+cI * (TMP13 + TMP15)));
}

void FFV7_0(complex<double> F1[], complex<double> F2[], complex<double> V3[],
            complex<double> COUP, complex<double> &vertex)
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP1;
    complex<double> TMP0;
    TMP1 =
        (F1[4] * (F2[2] * (V3[2] - V3[5]) - F2[3] * (V3[3] + cI * (V3[4]))) +
         F1[5] * (F2[2] * (+cI * (V3[4]) - V3[3]) + F2[3] * (V3[2] + V3[5])));
    TMP0 = (F1[2] * (F2[4] * (V3[2] + V3[5]) + F2[5] * (V3[3] + cI * (V3[4]))) +
            F1[3] * (F2[4] * (V3[3] - cI * (V3[4])) + F2[5] * (V3[2] - V3[5])));
    vertex = COUP * -1. * (+cI * (TMP0) + 2. * cI * (TMP1));
}

void FFV3_0(complex<double> F1[], complex<double> F2[], complex<double> V3[],
            complex<double> COUP, complex<double> &vertex)
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP8;
    TMP8 =
        (F1[2] *
             (F2[4] * -1. * (V3[2] + V3[5]) - F2[5] * (V3[3] + cI * (V3[4]))) +
         (F1[3] * (F2[4] * (+cI * (V3[4]) - V3[3]) + F2[5] * (V3[5] - V3[2])) +
          (F1[4] * (F2[2] * (V3[2] - V3[5]) - F2[3] * (V3[3] + cI * (V3[4]))) +
           F1[5] *
               (F2[2] * (+cI * (V3[4]) - V3[3]) + F2[3] * (V3[2] + V3[5])))));
    vertex = COUP * -cI * TMP8;
}

void VVV2_0(complex<double> V1[], complex<double> V2[], complex<double> V3[],
            complex<double> COUP, complex<double> &vertex)
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP2;
    double P1[4];
    complex<double> TMP0;
    double P2[4];
    complex<double> TMP7;
    complex<double> TMP6;
    complex<double> TMP5;
    complex<double> TMP4;
    complex<double> TMP3;
    P1[0] = V1[0].real();
    P1[1] = V1[1].real();
    P1[2] = V1[1].imag();
    P1[3] = V1[0].imag();
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    TMP5 = (V3[2] * V1[2] - V3[3] * V1[3] - V3[4] * V1[4] - V3[5] * V1[5]);
    TMP4 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    TMP7 = (P2[0] * V1[2] - P2[1] * V1[3] - P2[2] * V1[4] - P2[3] * V1[5]);
    TMP6 = (V3[2] * V2[2] - V3[3] * V2[3] - V3[4] * V2[4] - V3[5] * V2[5]);
    TMP0 = (V3[2] * P1[0] - V3[3] * P1[1] - V3[4] * P1[2] - V3[5] * P1[3]);
    TMP3 = (V2[2] * V1[2] - V2[3] * V1[3] - V2[4] * V1[4] - V2[5] * V1[5]);
    TMP2 = (V3[2] * P2[0] - V3[3] * P2[1] - V3[4] * P2[2] - V3[5] * P2[3]);
    vertex = COUP * (TMP3 * -1. * (+cI * (TMP0 + TMP2)) +
                     (+cI * (TMP4 * TMP5 + TMP6 * TMP7)));
}

void VVV1_0(complex<double> V1[], complex<double> V2[], complex<double> V3[],
            complex<double> COUP, complex<double> &vertex)
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    complex<double> TMP10;
    double P2[4];
    complex<double> TMP9;
    P1[0] = V1[0].real();
    P1[1] = V1[1].real();
    P1[2] = V1[1].imag();
    P1[3] = V1[0].imag();
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    TMP9 = -1. * (P1[0] * (V1[3] * (V3[5] * V2[4] - V3[4] * V2[5]) +
                           (V1[4] * (V3[3] * V2[5] - V3[5] * V2[3]) +
                            V1[5] * (V3[4] * V2[3] - V3[3] * V2[4]))) +
                  (P1[1] * (V1[2] * (V3[4] * V2[5] - V3[5] * V2[4]) +
                            (V1[4] * (V3[5] * V2[2] - V3[2] * V2[5]) +
                             V1[5] * (V3[2] * V2[4] - V3[4] * V2[2]))) +
                   (P1[2] * (V1[2] * (V3[5] * V2[3] - V3[3] * V2[5]) +
                             (V1[3] * (V3[2] * V2[5] - V3[5] * V2[2]) +
                              V1[5] * (V3[3] * V2[2] - V3[2] * V2[3]))) +
                    P1[3] * (V1[2] * (V3[3] * V2[4] - V3[4] * V2[3]) +
                             (V1[3] * (V3[4] * V2[2] - V3[2] * V2[4]) +
                              V1[4] * (V3[2] * V2[3] - V3[3] * V2[2]))))));
    TMP10 = -1. * (P2[0] * (V1[3] * (V3[5] * V2[4] - V3[4] * V2[5]) +
                            (V1[4] * (V3[3] * V2[5] - V3[5] * V2[3]) +
                             V1[5] * (V3[4] * V2[3] - V3[3] * V2[4]))) +
                   (P2[1] * (V1[2] * (V3[4] * V2[5] - V3[5] * V2[4]) +
                             (V1[4] * (V3[5] * V2[2] - V3[2] * V2[5]) +
                              V1[5] * (V3[2] * V2[4] - V3[4] * V2[2]))) +
                    (P2[2] * (V1[2] * (V3[5] * V2[3] - V3[3] * V2[5]) +
                              (V1[3] * (V3[2] * V2[5] - V3[5] * V2[2]) +
                               V1[5] * (V3[3] * V2[2] - V3[2] * V2[3]))) +
                     P2[3] * (V1[2] * (V3[3] * V2[4] - V3[4] * V2[3]) +
                              (V1[3] * (V3[4] * V2[2] - V3[2] * V2[4]) +
                               V1[4] * (V3[2] * V2[3] - V3[3] * V2[2]))))));
    vertex = COUP * (-cI * (TMP9) + cI * (TMP10));
}

void VVV1_2_0(complex<double> V1[], complex<double> V2[], complex<double> V3[],
              complex<double> COUP1, complex<double> COUP2,
              complex<double> &vertex)
{
    //   complex<double> cI = complex<double> (0., 1.);
    //   double P1[4];
    //   double P2[4];
    complex<double> tmp;
    VVV1_0(V1, V2, V3, COUP1, vertex);
    VVV2_0(V1, V2, V3, COUP2, tmp);
    vertex = vertex + tmp;
}

void FFV4_0(complex<double> F1[], complex<double> F2[], complex<double> V3[],
            complex<double> COUP, complex<double> &vertex)
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP2;
    double P1[4];
    complex<double> TMP0;
    double P2[4];
    complex<double> TMP13;
    P1[0] = F1[0].real();
    P1[1] = F1[1].real();
    P1[2] = F1[1].imag();
    P1[3] = F1[0].imag();
    P2[0] = F2[0].real();
    P2[1] = F2[1].real();
    P2[2] = F2[1].imag();
    P2[3] = F2[0].imag();
    TMP0 = (V3[2] * P1[0] - V3[3] * P1[1] - V3[4] * P1[2] - V3[5] * P1[3]);
    TMP13 = (F2[2] * F1[2] + F2[3] * F1[3] + F2[4] * F1[4] + F2[5] * F1[5]);
    TMP2 = (V3[2] * P2[0] - V3[3] * P2[1] - V3[4] * P2[2] - V3[5] * P2[3]);
    vertex = COUP * TMP13 * (-cI * (TMP0) + cI * (TMP2));
}

void FFV1_0(complex<double> F1[], complex<double> F2[], complex<double> V3[],
            complex<double> COUP, complex<double> &vertex)
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP2;
    complex<double> TMP1;
    double P1[4];
    complex<double> TMP0;
    double P2[4];
    P1[0] = F1[0].real();
    P1[1] = F1[1].real();
    P1[2] = F1[1].imag();
    P1[3] = F1[0].imag();
    P2[0] = F2[0].real();
    P2[1] = F2[1].real();
    P2[2] = F2[1].imag();
    P2[3] = F2[0].imag();
    TMP1 = (F2[4] * F1[4] + F2[5] * F1[5] - F2[2] * F1[2] - F2[3] * F1[3]);
    TMP0 = (V3[2] * P1[0] - V3[3] * P1[1] - V3[4] * P1[2] - V3[5] * P1[3]);
    TMP2 = (V3[2] * P2[0] - V3[3] * P2[1] - V3[4] * P2[2] - V3[5] * P2[3]);
    vertex = COUP * TMP1 * (-cI * (TMP0) + cI * (TMP2));
}

void FFV1_2_3_4_0(complex<double> F1[], complex<double> F2[],
                  complex<double> V3[], complex<double> COUP1,
                  complex<double> COUP2, complex<double> COUP3,
                  complex<double> COUP4, complex<double> &vertex)
{
    //   complex<double> cI = complex<double> (0., 1.);
    //   double P1[4];
    //   double P2[4];
    complex<double> tmp;
    FFV1_0(F1, F2, V3, COUP1, vertex);
    FFV2_0(F1, F2, V3, COUP2, tmp);
    vertex = vertex + tmp;
    FFV3_0(F1, F2, V3, COUP3, tmp);
    vertex = vertex + tmp;
    FFV4_0(F1, F2, V3, COUP4, tmp);
    vertex = vertex + tmp;
}

void FFV3_1(complex<double> F2[], complex<double> V3[], complex<double> COUP,
            double M1, double W1, complex<double> F1[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    complex<double> denom;
    F1[0] = +F2[0] + V3[0];
    F1[1] = +F2[1] + V3[1];
    P1[0] = -F1[0].real();
    P1[1] = -F1[1].real();
    P1[2] = -F1[1].imag();
    P1[3] = -F1[0].imag();
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    F1[2] =
        denom * -cI *
        (F2[2] *
             (P1[0] * (V3[2] - V3[5]) + (P1[1] * (+cI * (V3[4]) - V3[3]) +
                                         (P1[2] * -1. * (V3[4] + cI * (V3[3])) +
                                          P1[3] * (V3[2] - V3[5])))) +
         (F2[3] *
              (P1[0] * -1. * (V3[3] + cI * (V3[4])) +
               (P1[1] * (V3[2] + V3[5]) + (P1[2] * (+cI * (V3[2] + V3[5])) -
                                           P1[3] * (V3[3] + cI * (V3[4]))))) +
          M1 * (F2[4] * (V3[2] + V3[5]) + F2[5] * (V3[3] + cI * (V3[4])))));
    F1[3] =
        denom * cI *
        (F2[2] * (P1[0] * (V3[3] - cI * (V3[4])) +
                  (P1[1] * (V3[5] - V3[2]) +
                   (P1[2] * (-cI * (V3[5]) + cI * (V3[2])) +
                    P1[3] * (+cI * (V3[4]) - V3[3])))) +
         (F2[3] *
              (P1[0] * -1. * (V3[2] + V3[5]) +
               (P1[1] * (V3[3] + cI * (V3[4])) +
                (P1[2] * (V3[4] - cI * (V3[3])) + P1[3] * (V3[2] + V3[5])))) +
          M1 * (F2[4] * (+cI * (V3[4]) - V3[3]) + F2[5] * (V3[5] - V3[2]))));
    F1[4] =
        denom * -cI *
        (F2[4] *
             (P1[0] * -1. * (V3[2] + V3[5]) +
              (P1[1] * (V3[3] - cI * (V3[4])) +
               (P1[2] * (V3[4] + cI * (V3[3])) + P1[3] * (V3[2] + V3[5])))) +
         (F2[5] * (P1[0] * -1. * (V3[3] + cI * (V3[4])) +
                   (P1[1] * (V3[2] - V3[5]) +
                    (P1[2] * (-cI * (V3[5]) + cI * (V3[2])) +
                     P1[3] * (V3[3] + cI * (V3[4]))))) +
          M1 * (F2[2] * (V3[5] - V3[2]) + F2[3] * (V3[3] + cI * (V3[4])))));
    F1[5] =
        denom * cI *
        (F2[4] * (P1[0] * (V3[3] - cI * (V3[4])) +
                  (P1[1] * -1. * (V3[2] + V3[5]) +
                   (P1[2] * (+cI * (V3[2] + V3[5])) +
                    P1[3] * (V3[3] - cI * (V3[4]))))) +
         (F2[5] *
              (P1[0] * (V3[2] - V3[5]) +
               (P1[1] * -1. * (V3[3] + cI * (V3[4])) +
                (P1[2] * (+cI * (V3[3]) - V3[4]) + P1[3] * (V3[2] - V3[5])))) +
          M1 * (F2[2] * (+cI * (V3[4]) - V3[3]) + F2[3] * (V3[2] + V3[5]))));
}

void FFV1_2(complex<double> F1[], complex<double> V3[], complex<double> COUP,
            double M2, double W2, complex<double> F2[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP11;
    double P1[4];
    double P2[4];
    complex<double> denom;
    complex<double> TMP9;
    P1[0] = F1[0].real();
    P1[1] = F1[1].real();
    P1[2] = F1[1].imag();
    P1[3] = F1[0].imag();
    F2[0] = +F1[0] + V3[0];
    F2[1] = +F1[1] + V3[1];
    P2[0] = -F2[0].real();
    P2[1] = -F2[1].real();
    P2[2] = -F2[1].imag();
    P2[3] = -F2[0].imag();
    TMP9 = (V3[2] * P1[0] - V3[3] * P1[1] - V3[4] * P1[2] - V3[5] * P1[3]);
    TMP11 = (V3[2] * P2[0] - V3[3] * P2[1] - V3[4] * P2[2] - V3[5] * P2[3]);
    denom = COUP / (pow(P2[0], 2) - pow(P2[1], 2) - pow(P2[2], 2) -
                    pow(P2[3], 2) - M2 * (M2 - cI * W2));
    F2[2] = denom * cI *
            (TMP11 * (F1[4] * (P2[3] - P2[0]) +
                      (F1[5] * (P2[1] - cI * (P2[2])) + F1[2] * M2)) +
             TMP9 * (F1[4] * (P2[0] - P2[3]) +
                     (F1[5] * (+cI * (P2[2]) - P2[1]) - F1[2] * M2)));
    F2[3] = denom * cI *
            (TMP11 * (F1[4] * (P2[1] + cI * (P2[2])) +
                      (F1[5] * -1. * (P2[0] + P2[3]) + F1[3] * M2)) +
             TMP9 * (F1[4] * -1. * (P2[1] + cI * (P2[2])) +
                     (F1[5] * (P2[0] + P2[3]) - F1[3] * M2)));
    F2[4] = denom * -cI *
            (TMP11 * (F1[2] * -1. * (P2[0] + P2[3]) +
                      (F1[3] * (+cI * (P2[2]) - P2[1]) + F1[4] * M2)) +
             TMP9 * (F1[2] * (P2[0] + P2[3]) +
                     (F1[3] * (P2[1] - cI * (P2[2])) - F1[4] * M2)));
    F2[5] = denom * -cI *
            (TMP11 * (F1[2] * -1. * (P2[1] + cI * (P2[2])) +
                      (F1[3] * (P2[3] - P2[0]) + F1[5] * M2)) +
             TMP9 * (F1[2] * (P2[1] + cI * (P2[2])) +
                     (F1[3] * (P2[0] - P2[3]) - F1[5] * M2)));
}

void FFV1_2_3_4_2(complex<double> F1[], complex<double> V3[],
                  complex<double> COUP1, complex<double> COUP2,
                  complex<double> COUP3, complex<double> COUP4, double M2,
                  double W2, complex<double> F2[])
{
    //   complex<double> cI = complex<double> (0., 1.);
    //   double P1[4];
    //   double P2[4];
    complex<double> denom;
    int i;
    complex<double> Ftmp[6];
    FFV1_2(F1, V3, COUP1, M2, W2, F2);
    FFV2_2(F1, V3, COUP2, M2, W2, Ftmp);
    i = 2;
    while (i < 6) {
        F2[i] = F2[i] + Ftmp[i];
        i++;
    }
    FFV3_2(F1, V3, COUP3, M2, W2, Ftmp);
    i = 2;
    while (i < 6) {
        F2[i] = F2[i] + Ftmp[i];
        i++;
    }
    FFV4_2(F1, V3, COUP4, M2, W2, Ftmp);
    i = 2;
    while (i < 6) {
        F2[i] = F2[i] + Ftmp[i];
        i++;
    }
}

void VVV2_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
            double M3, double W3, complex<double> V3[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP12;
    double P1[4];
    complex<double> TMP10;
    double P2[4];
    complex<double> TMP17;
    double P3[4];
    complex<double> TMP20;
    complex<double> denom;
    double OM3;
    complex<double> TMP14;
    complex<double> TMP19;
    complex<double> TMP18;
    P1[0] = V1[0].real();
    P1[1] = V1[1].real();
    P1[2] = V1[1].imag();
    P1[3] = V1[0].imag();
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    OM3 = 0.;
    if (M3 != 0.)
        OM3 = 1. / pow(M3, 2);
    V3[0] = +V1[0] + V2[0];
    V3[1] = +V1[1] + V2[1];
    P3[0] = -V3[0].real();
    P3[1] = -V3[1].real();
    P3[2] = -V3[1].imag();
    P3[3] = -V3[0].imag();
    TMP20 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]);
    TMP19 = (P3[0] * V1[2] - P3[1] * V1[3] - P3[2] * V1[4] - P3[3] * V1[5]);
    TMP18 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]);
    TMP14 = (P2[0] * V1[2] - P2[1] * V1[3] - P2[2] * V1[4] - P2[3] * V1[5]);
    TMP17 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    TMP10 = (V2[2] * V1[2] - V2[3] * V1[3] - V2[4] * V1[4] - V2[5] * V1[5]);
    TMP12 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    V3[2] = denom * (OM3 * P3[0] *
                         (TMP10 * (+cI * (TMP17 + TMP18)) +
                          (-cI * (TMP12 * TMP19 + TMP14 * TMP20))) +
                     (TMP10 * -1. * (+cI * (P1[0] + P2[0])) +
                      (+cI * (V1[2] * TMP12 + V2[2] * TMP14))));
    V3[3] = denom * (OM3 * P3[1] *
                         (TMP10 * (+cI * (TMP17 + TMP18)) +
                          (-cI * (TMP12 * TMP19 + TMP14 * TMP20))) +
                     (TMP10 * -1. * (+cI * (P1[1] + P2[1])) +
                      (+cI * (V1[3] * TMP12 + V2[3] * TMP14))));
    V3[4] = denom * (OM3 * P3[2] *
                         (TMP10 * (+cI * (TMP17 + TMP18)) +
                          (-cI * (TMP12 * TMP19 + TMP14 * TMP20))) +
                     (TMP10 * -1. * (+cI * (P1[2] + P2[2])) +
                      (+cI * (V1[4] * TMP12 + V2[4] * TMP14))));
    V3[5] = denom * (OM3 * P3[3] *
                         (TMP10 * (+cI * (TMP17 + TMP18)) +
                          (-cI * (TMP12 * TMP19 + TMP14 * TMP20))) +
                     (TMP10 * -1. * (+cI * (P1[3] + P2[3])) +
                      (+cI * (V1[5] * TMP12 + V2[5] * TMP14))));
}

void VVV1_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
            double M3, double W3, complex<double> V3[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    double P2[4];
    complex<double> TMP7;
    double P3[4];
    complex<double> denom;
    double OM3;
    complex<double> TMP8;
    P1[0] = V1[0].real();
    P1[1] = V1[1].real();
    P1[2] = V1[1].imag();
    P1[3] = V1[0].imag();
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    OM3 = 0.;
    if (M3 != 0.)
        OM3 = 1. / pow(M3, 2);
    V3[0] = +V1[0] + V2[0];
    V3[1] = +V1[1] + V2[1];
    P3[0] = -V3[0].real();
    P3[1] = -V3[1].real();
    P3[2] = -V3[1].imag();
    P3[3] = -V3[0].imag();
    TMP7 = -1. * (P1[0] * (P3[1] * (V2[5] * V1[4] - V2[4] * V1[5]) +
                           (P3[2] * (V2[3] * V1[5] - V2[5] * V1[3]) +
                            P3[3] * (V2[4] * V1[3] - V2[3] * V1[4]))) +
                  (P1[1] * (P3[0] * (V2[4] * V1[5] - V2[5] * V1[4]) +
                            (P3[2] * (V2[5] * V1[2] - V2[2] * V1[5]) +
                             P3[3] * (V2[2] * V1[4] - V2[4] * V1[2]))) +
                   (P1[2] * (P3[0] * (V2[5] * V1[3] - V2[3] * V1[5]) +
                             (P3[1] * (V2[2] * V1[5] - V2[5] * V1[2]) +
                              P3[3] * (V2[3] * V1[2] - V2[2] * V1[3]))) +
                    P1[3] * (P3[0] * (V2[3] * V1[4] - V2[4] * V1[3]) +
                             (P3[1] * (V2[4] * V1[2] - V2[2] * V1[4]) +
                              P3[2] * (V2[2] * V1[3] - V2[3] * V1[2]))))));
    TMP8 = -1. * (P2[0] * (P3[1] * (V2[5] * V1[4] - V2[4] * V1[5]) +
                           (P3[2] * (V2[3] * V1[5] - V2[5] * V1[3]) +
                            P3[3] * (V2[4] * V1[3] - V2[3] * V1[4]))) +
                  (P2[1] * (P3[0] * (V2[4] * V1[5] - V2[5] * V1[4]) +
                            (P3[2] * (V2[5] * V1[2] - V2[2] * V1[5]) +
                             P3[3] * (V2[2] * V1[4] - V2[4] * V1[2]))) +
                   (P2[2] * (P3[0] * (V2[5] * V1[3] - V2[3] * V1[5]) +
                             (P3[1] * (V2[2] * V1[5] - V2[5] * V1[2]) +
                              P3[3] * (V2[3] * V1[2] - V2[2] * V1[3]))) +
                    P2[3] * (P3[0] * (V2[3] * V1[4] - V2[4] * V1[3]) +
                             (P3[1] * (V2[4] * V1[2] - V2[2] * V1[4]) +
                              P3[2] * (V2[2] * V1[3] - V2[3] * V1[2]))))));
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    V3[2] = denom * cI *
            (V1[3] * (V2[4] * (P2[3] - P1[3]) + V2[5] * (P1[2] - P2[2])) +
             (V1[4] * (V2[3] * (P1[3] - P2[3]) + V2[5] * (P2[1] - P1[1])) +
              (V1[5] * (V2[3] * (P2[2] - P1[2]) + V2[4] * (P1[1] - P2[1])) +
               OM3 * P3[0] * (TMP7 - TMP8))));
    V3[3] = denom * -cI *
            (V1[2] * (V2[4] * (P1[3] - P2[3]) + V2[5] * (P2[2] - P1[2])) +
             (V1[4] * (V2[2] * (P2[3] - P1[3]) + V2[5] * (P1[0] - P2[0])) +
              (V1[5] * (V2[2] * (P1[2] - P2[2]) + V2[4] * (P2[0] - P1[0])) +
               OM3 * P3[1] * (TMP8 - TMP7))));
    V3[4] = denom * -cI *
            (V1[2] * (V2[3] * (P2[3] - P1[3]) + V2[5] * (P1[1] - P2[1])) +
             (V1[3] * (V2[2] * (P1[3] - P2[3]) + V2[5] * (P2[0] - P1[0])) +
              (V1[5] * (V2[2] * (P2[1] - P1[1]) + V2[3] * (P1[0] - P2[0])) +
               OM3 * P3[2] * (TMP8 - TMP7))));
    V3[5] = denom * -cI *
            (V1[2] * (V2[3] * (P1[2] - P2[2]) + V2[4] * (P2[1] - P1[1])) +
             (V1[3] * (V2[2] * (P2[2] - P1[2]) + V2[4] * (P1[0] - P2[0])) +
              (V1[4] * (V2[2] * (P1[1] - P2[1]) + V2[3] * (P2[0] - P1[0])) +
               OM3 * P3[3] * (TMP8 - TMP7))));
}

void VVV1_2_3(complex<double> V1[], complex<double> V2[], complex<double> COUP1,
              complex<double> COUP2, double M3, double W3, complex<double> V3[])
{
    //   complex<double> cI = complex<double> (0., 1.);
    //   double P1[4];
    //   double P2[4];
    //   double P3[4];
    complex<double> denom;
    //   double OM3;
    int i;
    complex<double> Vtmp[6];
    VVV1_3(V1, V2, COUP1, M3, W3, V3);
    VVV2_3(V1, V2, COUP2, M3, W3, Vtmp);
    i = 2;
    while (i < 6) {
        V3[i] = V3[i] + Vtmp[i];
        i++;
    }
}

void FFV4_1(complex<double> F2[], complex<double> V3[], complex<double> COUP,
            double M1, double W1, complex<double> F1[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP11;
    double P1[4];
    double P2[4];
    complex<double> denom;
    complex<double> TMP9;
    P2[0] = F2[0].real();
    P2[1] = F2[1].real();
    P2[2] = F2[1].imag();
    P2[3] = F2[0].imag();
    F1[0] = +F2[0] + V3[0];
    F1[1] = +F2[1] + V3[1];
    P1[0] = -F1[0].real();
    P1[1] = -F1[1].real();
    P1[2] = -F1[1].imag();
    P1[3] = -F1[0].imag();
    TMP9 = (V3[2] * P1[0] - V3[3] * P1[1] - V3[4] * P1[2] - V3[5] * P1[3]);
    TMP11 = (V3[2] * P2[0] - V3[3] * P2[1] - V3[4] * P2[2] - V3[5] * P2[3]);
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    F1[2] = denom * -cI *
            (TMP11 * (F2[4] * -1. * (P1[0] + P1[3]) +
                      (F2[5] * -1. * (P1[1] + cI * (P1[2])) + F2[2] * M1)) +
             TMP9 * (F2[4] * (P1[0] + P1[3]) +
                     (F2[5] * (P1[1] + cI * (P1[2])) - F2[2] * M1)));
    F1[3] = denom * -cI *
            (TMP11 * (F2[4] * (+cI * (P1[2]) - P1[1]) +
                      (F2[5] * (P1[3] - P1[0]) + F2[3] * M1)) +
             TMP9 * (F2[4] * (P1[1] - cI * (P1[2])) +
                     (F2[5] * (P1[0] - P1[3]) - F2[3] * M1)));
    F1[4] = denom * -cI *
            (TMP11 * (F2[2] * (P1[3] - P1[0]) +
                      (F2[3] * (P1[1] + cI * (P1[2])) + F2[4] * M1)) +
             TMP9 * (F2[2] * (P1[0] - P1[3]) +
                     (F2[3] * -1. * (P1[1] + cI * (P1[2])) - F2[4] * M1)));
    F1[5] = denom * -cI *
            (TMP11 * (F2[2] * (P1[1] - cI * (P1[2])) +
                      (F2[3] * -1. * (P1[0] + P1[3]) + F2[5] * M1)) +
             TMP9 * (F2[2] * (+cI * (P1[2]) - P1[1]) +
                     (F2[3] * (P1[0] + P1[3]) - F2[5] * M1)));
}

void FFV1_1(complex<double> F2[], complex<double> V3[], complex<double> COUP,
            double M1, double W1, complex<double> F1[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP11;
    double P1[4];
    double P2[4];
    complex<double> denom;
    complex<double> TMP9;
    P2[0] = F2[0].real();
    P2[1] = F2[1].real();
    P2[2] = F2[1].imag();
    P2[3] = F2[0].imag();
    F1[0] = +F2[0] + V3[0];
    F1[1] = +F2[1] + V3[1];
    P1[0] = -F1[0].real();
    P1[1] = -F1[1].real();
    P1[2] = -F1[1].imag();
    P1[3] = -F1[0].imag();
    TMP9 = (V3[2] * P1[0] - V3[3] * P1[1] - V3[4] * P1[2] - V3[5] * P1[3]);
    TMP11 = (V3[2] * P2[0] - V3[3] * P2[1] - V3[4] * P2[2] - V3[5] * P2[3]);
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    F1[2] = denom * -cI *
            (TMP11 * (F2[4] * -1. * (P1[0] + P1[3]) +
                      (F2[5] * -1. * (P1[1] + cI * (P1[2])) - F2[2] * M1)) +
             TMP9 * (F2[4] * (P1[0] + P1[3]) +
                     (F2[5] * (P1[1] + cI * (P1[2])) + F2[2] * M1)));
    F1[3] = denom * -cI *
            (TMP11 * (F2[4] * (+cI * (P1[2]) - P1[1]) +
                      (F2[5] * (P1[3] - P1[0]) - F2[3] * M1)) +
             TMP9 * (F2[4] * (P1[1] - cI * (P1[2])) +
                     (F2[5] * (P1[0] - P1[3]) + F2[3] * M1)));
    F1[4] = denom * cI *
            (TMP11 * (F2[2] * (P1[3] - P1[0]) +
                      (F2[3] * (P1[1] + cI * (P1[2])) - F2[4] * M1)) +
             TMP9 * (F2[2] * (P1[0] - P1[3]) +
                     (F2[3] * -1. * (P1[1] + cI * (P1[2])) + F2[4] * M1)));
    F1[5] = denom * cI *
            (TMP11 * (F2[2] * (P1[1] - cI * (P1[2])) +
                      (F2[3] * -1. * (P1[0] + P1[3]) - F2[5] * M1)) +
             TMP9 * (F2[2] * (+cI * (P1[2]) - P1[1]) +
                     (F2[3] * (P1[0] + P1[3]) + F2[5] * M1)));
}

void FFV1_2_3_4_1(complex<double> F2[], complex<double> V3[],
                  complex<double> COUP1, complex<double> COUP2,
                  complex<double> COUP3, complex<double> COUP4, double M1,
                  double W1, complex<double> F1[])
{
    //   complex<double> cI = complex<double> (0., 1.);
    //   double P1[4];
    //   double P2[4];
    complex<double> denom;
    int i;
    complex<double> Ftmp[6];
    FFV1_1(F2, V3, COUP1, M1, W1, F1);
    FFV2_1(F2, V3, COUP2, M1, W1, Ftmp);
    i = 2;
    while (i < 6) {
        F1[i] = F1[i] + Ftmp[i];
        i++;
    }
    FFV3_1(F2, V3, COUP3, M1, W1, Ftmp);
    i = 2;
    while (i < 6) {
        F1[i] = F1[i] + Ftmp[i];
        i++;
    }
    FFV4_1(F2, V3, COUP4, M1, W1, Ftmp);
    i = 2;
    while (i < 6) {
        F1[i] = F1[i] + Ftmp[i];
        i++;
    }
}

void FFV3_3(complex<double> F1[], complex<double> F2[], complex<double> COUP,
            double M3, double W3, complex<double> V3[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> denom;
    complex<double> TMP22;
    double P3[4];
    double OM3;
    OM3 = 0.;
    if (M3 != 0.)
        OM3 = 1. / pow(M3, 2);
    V3[0] = +F1[0] + F2[0];
    V3[1] = +F1[1] + F2[1];
    P3[0] = -V3[0].real();
    P3[1] = -V3[1].real();
    P3[2] = -V3[1].imag();
    P3[3] = -V3[0].imag();
    TMP22 =
        -1. *
        (F1[2] * (F2[4] * (P3[0] + P3[3]) + F2[5] * (P3[1] + cI * (P3[2]))) +
         (F1[3] * (F2[4] * (P3[1] - cI * (P3[2])) + F2[5] * (P3[0] - P3[3])) +
          (F1[4] * (F2[2] * (P3[3] - P3[0]) + F2[3] * (P3[1] + cI * (P3[2]))) +
           F1[5] *
               (F2[2] * (P3[1] - cI * (P3[2])) - F2[3] * (P3[0] + P3[3])))));
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    V3[2] = denom * -cI *
            (F1[4] * F2[2] + F1[5] * F2[3] - F1[2] * F2[4] - F1[3] * F2[5] -
             P3[0] * OM3 * TMP22);
    V3[3] = denom * -cI *
            (F1[2] * F2[5] + F1[3] * F2[4] + F1[4] * F2[3] + F1[5] * F2[2] -
             P3[1] * OM3 * TMP22);
    V3[4] = denom * -cI *
            (-cI * (F1[3] * F2[4] + F1[5] * F2[2]) +
             cI * (F1[2] * F2[5] + F1[4] * F2[3]) - P3[2] * OM3 * TMP22);
    V3[5] = denom * -cI *
            (F1[2] * F2[4] + F1[4] * F2[2] - F1[3] * F2[5] - F1[5] * F2[3] -
             P3[3] * OM3 * TMP22);
}

void FFV4_2(complex<double> F1[], complex<double> V3[], complex<double> COUP,
            double M2, double W2, complex<double> F2[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP11;
    double P1[4];
    double P2[4];
    complex<double> denom;
    complex<double> TMP9;
    P1[0] = F1[0].real();
    P1[1] = F1[1].real();
    P1[2] = F1[1].imag();
    P1[3] = F1[0].imag();
    F2[0] = +F1[0] + V3[0];
    F2[1] = +F1[1] + V3[1];
    P2[0] = -F2[0].real();
    P2[1] = -F2[1].real();
    P2[2] = -F2[1].imag();
    P2[3] = -F2[0].imag();
    TMP9 = (V3[2] * P1[0] - V3[3] * P1[1] - V3[4] * P1[2] - V3[5] * P1[3]);
    TMP11 = (V3[2] * P2[0] - V3[3] * P2[1] - V3[4] * P2[2] - V3[5] * P2[3]);
    denom = COUP / (pow(P2[0], 2) - pow(P2[1], 2) - pow(P2[2], 2) -
                    pow(P2[3], 2) - M2 * (M2 - cI * W2));
    F2[2] = denom * cI *
            (TMP11 * (F1[4] * (P2[3] - P2[0]) +
                      (F1[5] * (P2[1] - cI * (P2[2])) - F1[2] * M2)) +
             TMP9 * (F1[4] * (P2[0] - P2[3]) +
                     (F1[5] * (+cI * (P2[2]) - P2[1]) + F1[2] * M2)));
    F2[3] = denom * cI *
            (TMP11 * (F1[4] * (P2[1] + cI * (P2[2])) +
                      (F1[5] * -1. * (P2[0] + P2[3]) - F1[3] * M2)) +
             TMP9 * (F1[4] * -1. * (P2[1] + cI * (P2[2])) +
                     (F1[5] * (P2[0] + P2[3]) + F1[3] * M2)));
    F2[4] = denom * cI *
            (TMP11 * (F1[2] * -1. * (P2[0] + P2[3]) +
                      (F1[3] * (+cI * (P2[2]) - P2[1]) - F1[4] * M2)) +
             TMP9 * (F1[2] * (P2[0] + P2[3]) +
                     (F1[3] * (P2[1] - cI * (P2[2])) + F1[4] * M2)));
    F2[5] = denom * cI *
            (TMP11 * (F1[2] * -1. * (P2[1] + cI * (P2[2])) +
                      (F1[3] * (P2[3] - P2[0]) - F1[5] * M2)) +
             TMP9 * (F1[2] * (P2[1] + cI * (P2[2])) +
                     (F1[3] * (P2[0] - P2[3]) + F1[5] * M2)));
}

void FFV2_3(complex<double> F1[], complex<double> F2[], complex<double> COUP,
            double M3, double W3, complex<double> V3[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> denom;
    double P3[4];
    complex<double> TMP26;
    double OM3;
    OM3 = 0.;
    if (M3 != 0.)
        OM3 = 1. / pow(M3, 2);
    V3[0] = +F1[0] + F2[0];
    V3[1] = +F1[1] + F2[1];
    P3[0] = -V3[0].real();
    P3[1] = -V3[1].real();
    P3[2] = -V3[1].imag();
    P3[3] = -V3[0].imag();
    TMP26 =
        (F1[2] * (F2[4] * (P3[0] + P3[3]) + F2[5] * (P3[1] + cI * (P3[2]))) +
         (F1[3] * (F2[4] * (P3[1] - cI * (P3[2])) + F2[5] * (P3[0] - P3[3])) +
          (F1[4] * (F2[2] * (P3[0] - P3[3]) - F2[3] * (P3[1] + cI * (P3[2]))) +
           F1[5] *
               (F2[2] * (+cI * (P3[2]) - P3[1]) + F2[3] * (P3[0] + P3[3])))));
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    V3[2] = denom * -cI *
            (F1[2] * F2[4] + F1[3] * F2[5] + F1[4] * F2[2] + F1[5] * F2[3] -
             P3[0] * OM3 * TMP26);
    V3[3] = denom * -cI *
            (F1[4] * F2[3] + F1[5] * F2[2] - F1[2] * F2[5] - F1[3] * F2[4] -
             P3[1] * OM3 * TMP26);
    V3[4] = denom * -cI *
            (-cI * (F1[2] * F2[5] + F1[5] * F2[2]) +
             cI * (F1[3] * F2[4] + F1[4] * F2[3]) - P3[2] * OM3 * TMP26);
    V3[5] = denom * -cI *
            (F1[3] * F2[5] + F1[4] * F2[2] - F1[2] * F2[4] - F1[5] * F2[3] -
             P3[3] * OM3 * TMP26);
}

void FFV3_2(complex<double> F1[], complex<double> V3[], complex<double> COUP,
            double M2, double W2, complex<double> F2[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P2[4];
    complex<double> denom;
    F2[0] = +F1[0] + V3[0];
    F2[1] = +F1[1] + V3[1];
    P2[0] = -F2[0].real();
    P2[1] = -F2[1].real();
    P2[2] = -F2[1].imag();
    P2[3] = -F2[0].imag();
    denom = COUP / (pow(P2[0], 2) - pow(P2[1], 2) - pow(P2[2], 2) -
                    pow(P2[3], 2) - M2 * (M2 - cI * W2));
    F2[2] =
        denom * cI *
        (F1[2] *
             (P2[0] * -1. * (V3[2] + V3[5]) +
              (P2[1] * (V3[3] + cI * (V3[4])) +
               (P2[2] * (V3[4] - cI * (V3[3])) + P2[3] * (V3[2] + V3[5])))) +
         (F1[3] * (P2[0] * (+cI * (V3[4]) - V3[3]) +
                   (P2[1] * (V3[2] - V3[5]) +
                    (P2[2] * (-cI * (V3[2]) + cI * (V3[5])) +
                     P2[3] * (V3[3] - cI * (V3[4]))))) +
          M2 * (F1[4] * (V3[2] - V3[5]) + F1[5] * (+cI * (V3[4]) - V3[3]))));
    F2[3] = denom * -cI *
            (F1[2] * (P2[0] * (V3[3] + cI * (V3[4])) +
                      (P2[1] * -1. * (V3[2] + V3[5]) +
                       (P2[2] * -1. * (+cI * (V3[2] + V3[5])) +
                        P2[3] * (V3[3] + cI * (V3[4]))))) +
             (F1[3] * (P2[0] * (V3[2] - V3[5]) +
                       (P2[1] * (+cI * (V3[4]) - V3[3]) +
                        (P2[2] * -1. * (V3[4] + cI * (V3[3])) +
                         P2[3] * (V3[2] - V3[5])))) +
              M2 * (F1[4] * (V3[3] + cI * (V3[4])) - F1[5] * (V3[2] + V3[5]))));
    F2[4] =
        denom * cI *
        (F1[4] *
             (P2[0] * (V3[2] - V3[5]) +
              (P2[1] * -1. * (V3[3] + cI * (V3[4])) +
               (P2[2] * (+cI * (V3[3]) - V3[4]) + P2[3] * (V3[2] - V3[5])))) +
         (F1[5] * (P2[0] * (+cI * (V3[4]) - V3[3]) +
                   (P2[1] * (V3[2] + V3[5]) +
                    (P2[2] * -1. * (+cI * (V3[2] + V3[5])) +
                     P2[3] * (+cI * (V3[4]) - V3[3])))) +
          M2 * (F1[2] * -1. * (V3[2] + V3[5]) +
                F1[3] * (+cI * (V3[4]) - V3[3]))));
    F2[5] =
        denom * -cI *
        (F1[4] * (P2[0] * (V3[3] + cI * (V3[4])) +
                  (P2[1] * (V3[5] - V3[2]) +
                   (P2[2] * (-cI * (V3[2]) + cI * (V3[5])) -
                    P2[3] * (V3[3] + cI * (V3[4]))))) +
         (F1[5] *
              (P2[0] * -1. * (V3[2] + V3[5]) +
               (P2[1] * (V3[3] - cI * (V3[4])) +
                (P2[2] * (V3[4] + cI * (V3[3])) + P2[3] * (V3[2] + V3[5])))) +
          M2 * (F1[2] * (V3[3] + cI * (V3[4])) + F1[3] * (V3[2] - V3[5]))));
}

void FFV1_3(complex<double> F1[], complex<double> F2[], complex<double> COUP,
            double M3, double W3, complex<double> V3[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> denom;
    double P1[4];
    double P2[4];
    complex<double> TMP23;
    complex<double> TMP17;
    double P3[4];
    double OM3;
    complex<double> TMP18;
    P1[0] = F1[0].real();
    P1[1] = F1[1].real();
    P1[2] = F1[1].imag();
    P1[3] = F1[0].imag();
    P2[0] = F2[0].real();
    P2[1] = F2[1].real();
    P2[2] = F2[1].imag();
    P2[3] = F2[0].imag();
    OM3 = 0.;
    if (M3 != 0.)
        OM3 = 1. / pow(M3, 2);
    V3[0] = +F1[0] + F2[0];
    V3[1] = +F1[1] + F2[1];
    P3[0] = -V3[0].real();
    P3[1] = -V3[1].real();
    P3[2] = -V3[1].imag();
    P3[3] = -V3[0].imag();
    TMP17 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    TMP18 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]);
    TMP23 = (F1[4] * F2[4] + F1[5] * F2[5] - F1[2] * F2[2] - F1[3] * F2[3]);
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    V3[2] = denom * TMP23 *
            (OM3 * P3[0] * (-cI * (TMP18) + cI * (TMP17)) +
             (-cI * (P1[0]) + cI * (P2[0])));
    V3[3] = denom * TMP23 *
            (OM3 * P3[1] * (-cI * (TMP18) + cI * (TMP17)) +
             (-cI * (P1[1]) + cI * (P2[1])));
    V3[4] = denom * TMP23 *
            (OM3 * P3[2] * (-cI * (TMP18) + cI * (TMP17)) +
             (-cI * (P1[2]) + cI * (P2[2])));
    V3[5] = denom * TMP23 *
            (OM3 * P3[3] * (-cI * (TMP18) + cI * (TMP17)) +
             (-cI * (P1[3]) + cI * (P2[3])));
}

void FFV1_2_3_4_3(complex<double> F1[], complex<double> F2[],
                  complex<double> COUP1, complex<double> COUP2,
                  complex<double> COUP3, complex<double> COUP4, double M3,
                  double W3, complex<double> V3[])
{
    //   complex<double> cI = complex<double> (0., 1.);
    complex<double> denom;
    //   double P1[4];
    //   double P2[4];
    //   double P3[4];
    //   double OM3;
    complex<double> Vtmp[6];
    int i;
    FFV1_3(F1, F2, COUP1, M3, W3, V3);
    FFV2_3(F1, F2, COUP2, M3, W3, Vtmp);
    i = 2;
    while (i < 6) {
        V3[i] = V3[i] + Vtmp[i];
        i++;
    }
    FFV3_3(F1, F2, COUP3, M3, W3, Vtmp);
    i = 2;
    while (i < 6) {
        V3[i] = V3[i] + Vtmp[i];
        i++;
    }
    FFV4_3(F1, F2, COUP4, M3, W3, Vtmp);
    i = 2;
    while (i < 6) {
        V3[i] = V3[i] + Vtmp[i];
        i++;
    }
}

void VVV2_1(complex<double> V2[], complex<double> V3[], complex<double> COUP,
            double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP12;
    complex<double> TMP11;
    double P1[4];
    double P2[4];
    complex<double> TMP16;
    complex<double> TMP15;
    complex<double> denom;
    double OM1;
    complex<double> TMP9;
    OM1 = 0.;
    if (M1 != 0.)
        OM1 = 1. / pow(M1, 2);
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    V1[0] = +V2[0] + V3[0];
    V1[1] = +V2[1] + V3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP15 = (V3[2] * V2[2] - V3[3] * V2[3] - V3[4] * V2[4] - V3[5] * V2[5]);
    TMP9 = (V3[2] * P1[0] - V3[3] * P1[1] - V3[4] * P1[2] - V3[5] * P1[3]);
    TMP16 = (P1[0] * P2[0] - P1[1] * P2[1] - P1[2] * P2[2] - P1[3] * P2[3]);
    TMP11 = (V3[2] * P2[0] - V3[3] * P2[1] - V3[4] * P2[2] - V3[5] * P2[3]);
    TMP12 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] =
        denom * (OM1 * P1[0] * (-cI * (TMP15 * TMP16) + cI * (TMP11 * TMP12)) +
                 (V2[2] * -1. * (+cI * (TMP9 + TMP11)) +
                  (+cI * (V3[2] * TMP12 + P2[0] * TMP15))));
    V1[3] =
        denom * (OM1 * P1[1] * (-cI * (TMP15 * TMP16) + cI * (TMP11 * TMP12)) +
                 (V2[3] * -1. * (+cI * (TMP9 + TMP11)) +
                  (+cI * (V3[3] * TMP12 + P2[1] * TMP15))));
    V1[4] =
        denom * (OM1 * P1[2] * (-cI * (TMP15 * TMP16) + cI * (TMP11 * TMP12)) +
                 (V2[4] * -1. * (+cI * (TMP9 + TMP11)) +
                  (+cI * (V3[4] * TMP12 + P2[2] * TMP15))));
    V1[5] =
        denom * (OM1 * P1[3] * (-cI * (TMP15 * TMP16) + cI * (TMP11 * TMP12)) +
                 (V2[5] * -1. * (+cI * (TMP9 + TMP11)) +
                  (+cI * (V3[5] * TMP12 + P2[3] * TMP15))));
}

void VVV1_1(complex<double> V2[], complex<double> V3[], complex<double> COUP,
            double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    double P2[4];
    complex<double> TMP6;
    complex<double> denom;
    double OM1;
    OM1 = 0.;
    if (M1 != 0.)
        OM1 = 1. / pow(M1, 2);
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    V1[0] = +V2[0] + V3[0];
    V1[1] = +V2[1] + V3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP6 = -1. * (P1[0] * (P2[1] * (V3[4] * V2[5] - V3[5] * V2[4]) +
                           (P2[2] * (V3[5] * V2[3] - V3[3] * V2[5]) +
                            P2[3] * (V3[3] * V2[4] - V3[4] * V2[3]))) +
                  (P1[1] * (P2[0] * (V3[5] * V2[4] - V3[4] * V2[5]) +
                            (P2[2] * (V3[2] * V2[5] - V3[5] * V2[2]) +
                             P2[3] * (V3[4] * V2[2] - V3[2] * V2[4]))) +
                   (P1[2] * (P2[0] * (V3[3] * V2[5] - V3[5] * V2[3]) +
                             (P2[1] * (V3[5] * V2[2] - V3[2] * V2[5]) +
                              P2[3] * (V3[2] * V2[3] - V3[3] * V2[2]))) +
                    P1[3] * (P2[0] * (V3[4] * V2[3] - V3[3] * V2[4]) +
                             (P2[1] * (V3[2] * V2[4] - V3[4] * V2[2]) +
                              P2[2] * (V3[3] * V2[2] - V3[2] * V2[3]))))));
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] = denom * cI *
            (V2[3] * (V3[4] * (P2[3] - P1[3]) + V3[5] * (P1[2] - P2[2])) +
             (V2[4] * (V3[3] * (P1[3] - P2[3]) + V3[5] * (P2[1] - P1[1])) +
              (V2[5] * (V3[3] * (P2[2] - P1[2]) + V3[4] * (P1[1] - P2[1])) -
               P1[0] * OM1 * TMP6)));
    V1[3] = denom * -cI *
            (V2[2] * (V3[4] * (P1[3] - P2[3]) + V3[5] * (P2[2] - P1[2])) +
             (V2[4] * (V3[2] * (P2[3] - P1[3]) + V3[5] * (P1[0] - P2[0])) +
              (V2[5] * (V3[2] * (P1[2] - P2[2]) + V3[4] * (P2[0] - P1[0])) +
               P1[1] * OM1 * TMP6)));
    V1[4] = denom * -cI *
            (V2[2] * (V3[3] * (P2[3] - P1[3]) + V3[5] * (P1[1] - P2[1])) +
             (V2[3] * (V3[2] * (P1[3] - P2[3]) + V3[5] * (P2[0] - P1[0])) +
              (V2[5] * (V3[2] * (P2[1] - P1[1]) + V3[3] * (P1[0] - P2[0])) +
               P1[2] * OM1 * TMP6)));
    V1[5] = denom * -cI *
            (V2[2] * (V3[3] * (P1[2] - P2[2]) + V3[4] * (P2[1] - P1[1])) +
             (V2[3] * (V3[2] * (P2[2] - P1[2]) + V3[4] * (P1[0] - P2[0])) +
              (V2[4] * (V3[2] * (P1[1] - P2[1]) + V3[3] * (P2[0] - P1[0])) +
               P1[3] * OM1 * TMP6)));
}

void VVV1_2_1(complex<double> V2[], complex<double> V3[], complex<double> COUP1,
              complex<double> COUP2, double M1, double W1, complex<double> V1[])
{
    //   complex<double> cI = complex<double> (0., 1.);
    //   double P1[4];
    //   double P2[4];
    complex<double> denom;
    int i;
    complex<double> Vtmp[6];
    //   double OM1;
    VVV1_1(V2, V3, COUP1, M1, W1, V1);
    VVV2_1(V2, V3, COUP2, M1, W1, Vtmp);
    i = 2;
    while (i < 6) {
        V1[i] = V1[i] + Vtmp[i];
        i++;
    }
}

void FFV4_3(complex<double> F1[], complex<double> F2[], complex<double> COUP,
            double M3, double W3, complex<double> V3[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> denom;
    double P1[4];
    double P2[4];
    complex<double> TMP17;
    double P3[4];
    double OM3;
    complex<double> TMP24;
    complex<double> TMP18;
    P1[0] = F1[0].real();
    P1[1] = F1[1].real();
    P1[2] = F1[1].imag();
    P1[3] = F1[0].imag();
    P2[0] = F2[0].real();
    P2[1] = F2[1].real();
    P2[2] = F2[1].imag();
    P2[3] = F2[0].imag();
    OM3 = 0.;
    if (M3 != 0.)
        OM3 = 1. / pow(M3, 2);
    V3[0] = +F1[0] + F2[0];
    V3[1] = +F1[1] + F2[1];
    P3[0] = -V3[0].real();
    P3[1] = -V3[1].real();
    P3[2] = -V3[1].imag();
    P3[3] = -V3[0].imag();
    TMP24 = (F1[2] * F2[2] + F1[3] * F2[3] + F1[4] * F2[4] + F1[5] * F2[5]);
    TMP17 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    TMP18 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]);
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    V3[2] = denom * TMP24 *
            (OM3 * P3[0] * (-cI * (TMP18) + cI * (TMP17)) +
             (-cI * (P1[0]) + cI * (P2[0])));
    V3[3] = denom * TMP24 *
            (OM3 * P3[1] * (-cI * (TMP18) + cI * (TMP17)) +
             (-cI * (P1[1]) + cI * (P2[1])));
    V3[4] = denom * TMP24 *
            (OM3 * P3[2] * (-cI * (TMP18) + cI * (TMP17)) +
             (-cI * (P1[2]) + cI * (P2[2])));
    V3[5] = denom * TMP24 *
            (OM3 * P3[3] * (-cI * (TMP18) + cI * (TMP17)) +
             (-cI * (P1[3]) + cI * (P2[3])));
}

void VVS3_4_5_0(complex<double> V1[], complex<double> V2[],
                complex<double> S3[], complex<double> COUP1,
                complex<double> COUP2, complex<double> COUP3,
                complex<double> &vertex)
{
    //   complex<double> cI = complex<double> (0., 1.);
    complex<double> tmp;
    VVS3_0(V1, V2, S3, COUP1, vertex);
    VVS4_0(V1, V2, S3, COUP2, tmp);
    vertex = vertex + tmp;
    VVS5_0(V1, V2, S3, COUP3, tmp);
    vertex = vertex + tmp;
}

void VVS3_4_5_3(complex<double> V1[], complex<double> V2[],
                complex<double> COUP1, complex<double> COUP2,
                complex<double> COUP3, double M3, double W3,
                complex<double> S3[])
{
    //   complex<double> cI = complex<double> (0., 1.);
    complex<double> Stmp[3];
    //   double P3[4];
    complex<double> denom;
    int i;
    VVS3_3(V1, V2, COUP1, M3, W3, S3);
    VVS4_3(V1, V2, COUP2, M3, W3, Stmp);
    i = 2;
    while (i < 3) {
        S3[i] = S3[i] + Stmp[i];
        i++;
    }
    VVS5_3(V1, V2, COUP3, M3, W3, Stmp);
    i = 2;
    while (i < 3) {
        S3[i] = S3[i] + Stmp[i];
        i++;
    }
}

void VVS1_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
            double M3, double W3, complex<double> S3[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    double P2[4];
    complex<double> TMP7;
    double P3[4];
    complex<double> TMP6;
    complex<double> denom;
    P1[0] = V1[0].real();
    P1[1] = V1[1].real();
    P1[2] = V1[1].imag();
    P1[3] = V1[0].imag();
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    S3[0] = +V1[0] + V2[0];
    S3[1] = +V1[1] + V2[1];
    P3[0] = -S3[0].real();
    P3[1] = -S3[1].real();
    P3[2] = -S3[1].imag();
    P3[3] = -S3[0].imag();
    TMP7 = -1. * (P1[0] * (P2[1] * (V2[5] * V1[4] - V2[4] * V1[5]) +
                           (P2[2] * (V2[3] * V1[5] - V2[5] * V1[3]) +
                            P2[3] * (V2[4] * V1[3] - V2[3] * V1[4]))) +
                  (P1[1] * (P2[0] * (V2[4] * V1[5] - V2[5] * V1[4]) +
                            (P2[2] * (V2[5] * V1[2] - V2[2] * V1[5]) +
                             P2[3] * (V2[2] * V1[4] - V2[4] * V1[2]))) +
                   (P1[2] * (P2[0] * (V2[5] * V1[3] - V2[3] * V1[5]) +
                             (P2[1] * (V2[2] * V1[5] - V2[5] * V1[2]) +
                              P2[3] * (V2[3] * V1[2] - V2[2] * V1[3]))) +
                    P1[3] * (P2[0] * (V2[3] * V1[4] - V2[4] * V1[3]) +
                             (P2[1] * (V2[4] * V1[2] - V2[2] * V1[4]) +
                              P2[2] * (V2[2] * V1[3] - V2[3] * V1[2]))))));
    TMP6 = -1. * (P1[0] * (P2[1] * (V2[4] * V1[5] - V2[5] * V1[4]) +
                           (P2[2] * (V2[5] * V1[3] - V2[3] * V1[5]) +
                            P2[3] * (V2[3] * V1[4] - V2[4] * V1[3]))) +
                  (P1[1] * (P2[0] * (V2[5] * V1[4] - V2[4] * V1[5]) +
                            (P2[2] * (V2[2] * V1[5] - V2[5] * V1[2]) +
                             P2[3] * (V2[4] * V1[2] - V2[2] * V1[4]))) +
                   (P1[2] * (P2[0] * (V2[3] * V1[5] - V2[5] * V1[3]) +
                             (P2[1] * (V2[5] * V1[2] - V2[2] * V1[5]) +
                              P2[3] * (V2[2] * V1[3] - V2[3] * V1[2]))) +
                    P1[3] * (P2[0] * (V2[4] * V1[3] - V2[3] * V1[4]) +
                             (P2[1] * (V2[2] * V1[4] - V2[4] * V1[2]) +
                              P2[2] * (V2[3] * V1[2] - V2[2] * V1[3]))))));
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    S3[2] = denom * 4. * (-cI * (TMP6) + cI * (TMP7));
}

void VVS2_0(complex<double> V1[], complex<double> V2[], complex<double> S3[],
            complex<double> COUP, complex<double> &vertex)
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    double P2[4];
    complex<double> TMP7;
    complex<double> TMP6;
    P1[0] = V1[0].real();
    P1[1] = V1[1].real();
    P1[2] = V1[1].imag();
    P1[3] = V1[0].imag();
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    TMP7 = -1. * (P1[0] * (P2[1] * (V2[5] * V1[4] - V2[4] * V1[5]) +
                           (P2[2] * (V2[3] * V1[5] - V2[5] * V1[3]) +
                            P2[3] * (V2[4] * V1[3] - V2[3] * V1[4]))) +
                  (P1[1] * (P2[0] * (V2[4] * V1[5] - V2[5] * V1[4]) +
                            (P2[2] * (V2[5] * V1[2] - V2[2] * V1[5]) +
                             P2[3] * (V2[2] * V1[4] - V2[4] * V1[2]))) +
                   (P1[2] * (P2[0] * (V2[5] * V1[3] - V2[3] * V1[5]) +
                             (P2[1] * (V2[2] * V1[5] - V2[5] * V1[2]) +
                              P2[3] * (V2[3] * V1[2] - V2[2] * V1[3]))) +
                    P1[3] * (P2[0] * (V2[3] * V1[4] - V2[4] * V1[3]) +
                             (P2[1] * (V2[4] * V1[2] - V2[2] * V1[4]) +
                              P2[2] * (V2[2] * V1[3] - V2[3] * V1[2]))))));
    TMP6 = -1. * (P1[0] * (P2[1] * (V2[4] * V1[5] - V2[5] * V1[4]) +
                           (P2[2] * (V2[5] * V1[3] - V2[3] * V1[5]) +
                            P2[3] * (V2[3] * V1[4] - V2[4] * V1[3]))) +
                  (P1[1] * (P2[0] * (V2[5] * V1[4] - V2[4] * V1[5]) +
                            (P2[2] * (V2[2] * V1[5] - V2[5] * V1[2]) +
                             P2[3] * (V2[4] * V1[2] - V2[2] * V1[4]))) +
                   (P1[2] * (P2[0] * (V2[3] * V1[5] - V2[5] * V1[3]) +
                             (P2[1] * (V2[5] * V1[2] - V2[2] * V1[5]) +
                              P2[3] * (V2[2] * V1[3] - V2[3] * V1[2]))) +
                    P1[3] * (P2[0] * (V2[4] * V1[3] - V2[3] * V1[4]) +
                             (P2[1] * (V2[2] * V1[4] - V2[4] * V1[2]) +
                              P2[2] * (V2[3] * V1[2] - V2[2] * V1[3]))))));
    vertex = COUP * S3[2] * (-cI * (TMP7) + cI * (TMP6));
}

void VVS2_1(complex<double> V2[], complex<double> S3[], complex<double> COUP,
            double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    double P2[4];
    complex<double> denom;
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    V1[0] = +V2[0] + S3[0];
    V1[1] = +V2[1] + S3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] = denom * -2. * cI * S3[2] *
            (P1[1] * (P2[3] * V2[4] - P2[2] * V2[5]) +
             (P1[2] * (P2[1] * V2[5] - P2[3] * V2[3]) +
              P1[3] * (P2[2] * V2[3] - P2[1] * V2[4])));
    V1[3] = denom * 2. * cI * S3[2] *
            (P1[0] * (P2[2] * V2[5] - P2[3] * V2[4]) +
             (P1[2] * (P2[3] * V2[2] - P2[0] * V2[5]) +
              P1[3] * (P2[0] * V2[4] - P2[2] * V2[2])));
    V1[4] = denom * 2. * cI * S3[2] *
            (P1[0] * (P2[3] * V2[3] - P2[1] * V2[5]) +
             (P1[1] * (P2[0] * V2[5] - P2[3] * V2[2]) +
              P1[3] * (P2[1] * V2[2] - P2[0] * V2[3])));
    V1[5] = denom * 2. * cI * S3[2] *
            (P1[0] * (P2[1] * V2[4] - P2[2] * V2[3]) +
             (P1[1] * (P2[2] * V2[2] - P2[0] * V2[4]) +
              P1[2] * (P2[0] * V2[3] - P2[1] * V2[2])));
}

void VVS3_0(complex<double> V1[], complex<double> V2[], complex<double> S3[],
            complex<double> COUP, complex<double> &vertex)
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP8;
    TMP8 = (V2[2] * V1[2] - V2[3] * V1[3] - V2[4] * V1[4] - V2[5] * V1[5]);
    vertex = COUP * -cI * TMP8 * S3[2];
}

void VVS3_1(complex<double> V2[], complex<double> S3[], complex<double> COUP,
            double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    complex<double> denom;
    double OM1;
    complex<double> TMP9;
    OM1 = 0.;
    if (M1 != 0.)
        OM1 = 1. / pow(M1, 2);
    V1[0] = +V2[0] + S3[0];
    V1[1] = +V2[1] + S3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP9 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] = denom * S3[2] * (-cI * (V2[2]) + cI * (P1[0] * OM1 * TMP9));
    V1[3] = denom * S3[2] * (-cI * (V2[3]) + cI * (P1[1] * OM1 * TMP9));
    V1[4] = denom * S3[2] * (-cI * (V2[4]) + cI * (P1[2] * OM1 * TMP9));
    V1[5] = denom * S3[2] * (-cI * (V2[5]) + cI * (P1[3] * OM1 * TMP9));
}

void VVS3_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
            double M3, double W3, complex<double> S3[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P3[4];
    complex<double> denom;
    complex<double> TMP8;
    S3[0] = +V1[0] + V2[0];
    S3[1] = +V1[1] + V2[1];
    P3[0] = -S3[0].real();
    P3[1] = -S3[1].real();
    P3[2] = -S3[1].imag();
    P3[3] = -S3[0].imag();
    TMP8 = (V2[2] * V1[2] - V2[3] * V1[3] - V2[4] * V1[4] - V2[5] * V1[5]);
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    S3[2] = denom * cI * TMP8;
}

void VVS3_4_5_1(complex<double> V2[], complex<double> S3[],
                complex<double> COUP1, complex<double> COUP2,
                complex<double> COUP3, double M1, double W1,
                complex<double> V1[])
{
    //   complex<double> cI = complex<double> (0., 1.);
    //   double P1[4];
    complex<double> denom;
    complex<double> Vtmp[6];
    //   double OM1;
    int i;
    VVS3_1(V2, S3, COUP1, M1, W1, V1);
    VVS4_1(V2, S3, COUP2, M1, W1, Vtmp);
    i = 2;
    while (i < 6) {
        V1[i] = V1[i] + Vtmp[i];
        i++;
    }
    VVS5_1(V2, S3, COUP3, M1, W1, Vtmp);
    i = 2;
    while (i < 6) {
        V1[i] = V1[i] + Vtmp[i];
        i++;
    }
}

void VVS4_0(complex<double> V1[], complex<double> V2[], complex<double> S3[],
            complex<double> COUP, complex<double> &vertex)
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    double P2[4];
    complex<double> TMP15;
    complex<double> TMP9;
    complex<double> TMP13;
    complex<double> TMP8;
    P1[0] = V1[0].real();
    P1[1] = V1[1].real();
    P1[2] = V1[1].imag();
    P1[3] = V1[0].imag();
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    TMP15 = (P1[0] * P2[0] - P1[1] * P2[1] - P1[2] * P2[2] - P1[3] * P2[3]);
    TMP9 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    TMP8 = (V2[2] * V1[2] - V2[3] * V1[3] - V2[4] * V1[4] - V2[5] * V1[5]);
    TMP13 = (P2[0] * V1[2] - P2[1] * V1[3] - P2[2] * V1[4] - P2[3] * V1[5]);
    vertex = COUP * S3[2] * (-cI * (TMP9 * TMP13) + cI * (TMP8 * TMP15));
}

void VVS4_1(complex<double> V2[], complex<double> S3[], complex<double> COUP,
            double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> denom;
    double P1[4];
    double P2[4];
    complex<double> TMP15;
    complex<double> TMP9;
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    V1[0] = +V2[0] + S3[0];
    V1[1] = +V2[1] + S3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP15 = (P1[0] * P2[0] - P1[1] * P2[1] - P1[2] * P2[2] - P1[3] * P2[3]);
    TMP9 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] = denom * S3[2] * (-cI * (P2[0] * TMP9) + cI * (V2[2] * TMP15));
    V1[3] = denom * S3[2] * (-cI * (P2[1] * TMP9) + cI * (V2[3] * TMP15));
    V1[4] = denom * S3[2] * (-cI * (P2[2] * TMP9) + cI * (V2[4] * TMP15));
    V1[5] = denom * S3[2] * (-cI * (P2[3] * TMP9) + cI * (V2[5] * TMP15));
}

void VVS4_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
            double M3, double W3, complex<double> S3[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> denom;
    double P1[4];
    double P2[4];
    double P3[4];
    complex<double> TMP15;
    complex<double> TMP9;
    complex<double> TMP13;
    complex<double> TMP8;
    P1[0] = V1[0].real();
    P1[1] = V1[1].real();
    P1[2] = V1[1].imag();
    P1[3] = V1[0].imag();
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    S3[0] = +V1[0] + V2[0];
    S3[1] = +V1[1] + V2[1];
    P3[0] = -S3[0].real();
    P3[1] = -S3[1].real();
    P3[2] = -S3[1].imag();
    P3[3] = -S3[0].imag();
    TMP15 = (P1[0] * P2[0] - P1[1] * P2[1] - P1[2] * P2[2] - P1[3] * P2[3]);
    TMP9 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    TMP8 = (V2[2] * V1[2] - V2[3] * V1[3] - V2[4] * V1[4] - V2[5] * V1[5]);
    TMP13 = (P2[0] * V1[2] - P2[1] * V1[3] - P2[2] * V1[4] - P2[3] * V1[5]);
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    S3[2] = denom * (-cI * (TMP8 * TMP15) + cI * (TMP9 * TMP13));
}

void VVS5_0(complex<double> V1[], complex<double> V2[], complex<double> S3[],
            complex<double> COUP, complex<double> &vertex)
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP12;
    complex<double> TMP11;
    double P1[4];
    complex<double> TMP10;
    double P2[4];
    double P3[4];
    complex<double> TMP15;
    complex<double> TMP14;
    complex<double> TMP9;
    complex<double> TMP13;
    complex<double> TMP8;
    P1[0] = V1[0].real();
    P1[1] = V1[1].real();
    P1[2] = V1[1].imag();
    P1[3] = V1[0].imag();
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    P3[0] = S3[0].real();
    P3[1] = S3[1].real();
    P3[2] = S3[1].imag();
    P3[3] = S3[0].imag();
    TMP9 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    TMP8 = (V2[2] * V1[2] - V2[3] * V1[3] - V2[4] * V1[4] - V2[5] * V1[5]);
    TMP15 = (P1[0] * P2[0] - P1[1] * P2[1] - P1[2] * P2[2] - P1[3] * P2[3]);
    TMP14 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    TMP11 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]);
    TMP10 = (P3[0] * V1[2] - P3[1] * V1[3] - P3[2] * V1[4] - P3[3] * V1[5]);
    TMP13 = (P2[0] * V1[2] - P2[1] * V1[3] - P2[2] * V1[4] - P2[3] * V1[5]);
    TMP12 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]);
    vertex = COUP * S3[2] *
             (TMP10 * (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11)) +
              TMP14 * (-cI * (TMP8 * TMP11) + cI * (TMP12 * TMP13)));
}

void VVS5_1(complex<double> V2[], complex<double> S3[], complex<double> COUP,
            double M1, double W1, complex<double> V1[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP12;
    complex<double> TMP11;
    double P1[4];
    double P2[4];
    double P3[4];
    complex<double> TMP15;
    complex<double> TMP14;
    complex<double> denom;
    complex<double> TMP9;
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    P3[0] = S3[0].real();
    P3[1] = S3[1].real();
    P3[2] = S3[1].imag();
    P3[3] = S3[0].imag();
    V1[0] = +V2[0] + S3[0];
    V1[1] = +V2[1] + S3[1];
    P1[0] = -V1[0].real();
    P1[1] = -V1[1].real();
    P1[2] = -V1[1].imag();
    P1[3] = -V1[0].imag();
    TMP15 = (P1[0] * P2[0] - P1[1] * P2[1] - P1[2] * P2[2] - P1[3] * P2[3]);
    TMP14 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    TMP11 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]);
    TMP9 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    TMP12 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]);
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    V1[2] = denom * S3[2] *
            (P3[0] * (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11)) +
             TMP14 * (-cI * (V2[2] * TMP11) + cI * (P2[0] * TMP12)));
    V1[3] = denom * S3[2] *
            (P3[1] * (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11)) +
             TMP14 * (-cI * (V2[3] * TMP11) + cI * (P2[1] * TMP12)));
    V1[4] = denom * S3[2] *
            (P3[2] * (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11)) +
             TMP14 * (-cI * (V2[4] * TMP11) + cI * (P2[2] * TMP12)));
    V1[5] = denom * S3[2] *
            (P3[3] * (-cI * (TMP12 * TMP15) + cI * (TMP9 * TMP11)) +
             TMP14 * (-cI * (V2[5] * TMP11) + cI * (P2[3] * TMP12)));
}

void VVS5_3(complex<double> V1[], complex<double> V2[], complex<double> COUP,
            double M3, double W3, complex<double> S3[])
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP12;
    complex<double> TMP11;
    double P1[4];
    complex<double> TMP10;
    double P2[4];
    double P3[4];
    complex<double> TMP15;
    complex<double> TMP14;
    complex<double> denom;
    complex<double> TMP9;
    complex<double> TMP13;
    complex<double> TMP8;
    P1[0] = V1[0].real();
    P1[1] = V1[1].real();
    P1[2] = V1[1].imag();
    P1[3] = V1[0].imag();
    P2[0] = V2[0].real();
    P2[1] = V2[1].real();
    P2[2] = V2[1].imag();
    P2[3] = V2[0].imag();
    S3[0] = +V1[0] + V2[0];
    S3[1] = +V1[1] + V2[1];
    P3[0] = -S3[0].real();
    P3[1] = -S3[1].real();
    P3[2] = -S3[1].imag();
    P3[3] = -S3[0].imag();
    TMP9 = (P1[0] * V2[2] - P1[1] * V2[3] - P1[2] * V2[4] - P1[3] * V2[5]);
    TMP8 = (V2[2] * V1[2] - V2[3] * V1[3] - V2[4] * V1[4] - V2[5] * V1[5]);
    TMP15 = (P1[0] * P2[0] - P1[1] * P2[1] - P1[2] * P2[2] - P1[3] * P2[3]);
    TMP14 = (P1[0] * P3[0] - P1[1] * P3[1] - P1[2] * P3[2] - P1[3] * P3[3]);
    TMP11 = (P2[0] * P3[0] - P2[1] * P3[1] - P2[2] * P3[2] - P2[3] * P3[3]);
    TMP10 = (P3[0] * V1[2] - P3[1] * V1[3] - P3[2] * V1[4] - P3[3] * V1[5]);
    TMP13 = (P2[0] * V1[2] - P2[1] * V1[3] - P2[2] * V1[4] - P2[3] * V1[5]);
    TMP12 = (P3[0] * V2[2] - P3[1] * V2[3] - P3[2] * V2[4] - P3[3] * V2[5]);
    denom = COUP / (pow(P3[0], 2) - pow(P3[1], 2) - pow(P3[2], 2) -
                    pow(P3[3], 2) - M3 * (M3 - cI * W3));
    S3[2] = denom * (TMP10 * (-cI * (TMP9 * TMP11) + cI * (TMP12 * TMP15)) +
                     TMP14 * (-cI * (TMP12 * TMP13) + cI * (TMP8 * TMP11)));
}

void FFS1_0(complex<double> F1[], complex<double> F2[], complex<double> S3[],
            complex<double> COUP, complex<double> &vertex)
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP0;
    TMP0 = (F2[4] * F1[4] + F2[5] * F1[5] - F2[2] * F1[2] - F2[3] * F1[3]);
    vertex = COUP * -cI * TMP0 * S3[2];
}

void FFS1_1(complex<double> F2[], complex<double> S3[], complex<double> COUP,
            double M1, double W1, complex<double> F1[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    complex<double> denom;
    F1[0] = +F2[0] + S3[0];
    F1[1] = +F2[1] + S3[1];
    P1[0] = -F1[0].real();
    P1[1] = -F1[1].real();
    P1[2] = -F1[1].imag();
    P1[3] = -F1[0].imag();
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    F1[2] = denom * -cI * S3[2] *
            (F2[4] * (P1[0] + P1[3]) +
             (F2[5] * (P1[1] + cI * (P1[2])) + F2[2] * M1));
    F1[3] = denom * cI * S3[2] *
            (F2[4] * (+cI * (P1[2]) - P1[1]) +
             (F2[5] * (P1[3] - P1[0]) - F2[3] * M1));
    F1[4] = denom * -cI * S3[2] *
            (F2[2] * (P1[3] - P1[0]) +
             (F2[3] * (P1[1] + cI * (P1[2])) - F2[4] * M1));
    F1[5] = denom * cI * S3[2] *
            (F2[2] * (+cI * (P1[2]) - P1[1]) +
             (F2[3] * (P1[0] + P1[3]) + F2[5] * M1));
}

void FFS1_2(complex<double> F1[], complex<double> S3[], complex<double> COUP,
            double M2, double W2, complex<double> F2[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P2[4];
    complex<double> denom;
    F2[0] = +F1[0] + S3[0];
    F2[1] = +F1[1] + S3[1];
    P2[0] = -F2[0].real();
    P2[1] = -F2[1].real();
    P2[2] = -F2[1].imag();
    P2[3] = -F2[0].imag();
    denom = COUP / (pow(P2[0], 2) - pow(P2[1], 2) - pow(P2[2], 2) -
                    pow(P2[3], 2) - M2 * (M2 - cI * W2));
    F2[2] = denom * cI * S3[2] *
            (F1[4] * (P2[0] - P2[3]) +
             (F1[5] * (+cI * (P2[2]) - P2[1]) - F1[2] * M2));
    F2[3] = denom * -cI * S3[2] *
            (F1[4] * (P2[1] + cI * (P2[2])) +
             (F1[5] * -1. * (P2[0] + P2[3]) + F1[3] * M2));
    F2[4] = denom * cI * S3[2] *
            (F1[2] * -1. * (P2[0] + P2[3]) +
             (F1[3] * (+cI * (P2[2]) - P2[1]) + F1[4] * M2));
    F2[5] = denom * -cI * S3[2] *
            (F1[2] * (P2[1] + cI * (P2[2])) +
             (F1[3] * (P2[0] - P2[3]) - F1[5] * M2));
}

void FFS1_2_0(complex<double> F1[], complex<double> F2[], complex<double> S3[],
              complex<double> COUP1, complex<double> COUP2,
              complex<double> &vertex)
{
    //   complex<double> cI = complex<double> (0., 1.);
    complex<double> tmp;
    FFS1_0(F1, F2, S3, COUP1, vertex);
    FFS2_0(F1, F2, S3, COUP2, tmp);
    vertex = vertex + tmp;
}

void FFS1_2_1(complex<double> F2[], complex<double> S3[], complex<double> COUP1,
              complex<double> COUP2, double M1, double W1, complex<double> F1[])
{
    //   complex<double> cI = complex<double> (0., 1.);
    //   double P1[4];
    complex<double> denom;
    int i;
    complex<double> Ftmp[6];
    FFS1_1(F2, S3, COUP1, M1, W1, F1);
    FFS2_1(F2, S3, COUP2, M1, W1, Ftmp);
    i = 2;
    while (i < 6) {
        F1[i] = F1[i] + Ftmp[i];
        i++;
    }
}

void FFS1_2_2(complex<double> F1[], complex<double> S3[], complex<double> COUP1,
              complex<double> COUP2, double M2, double W2, complex<double> F2[])
{
    //   complex<double> cI = complex<double> (0., 1.);
    complex<double> Ftmp[6];
    //   double P2[4];
    complex<double> denom;
    int i;
    FFS1_2(F1, S3, COUP1, M2, W2, F2);
    FFS2_2(F1, S3, COUP2, M2, W2, Ftmp);
    i = 2;
    while (i < 6) {
        F2[i] = F2[i] + Ftmp[i];
        i++;
    }
}

void FFS2_0(complex<double> F1[], complex<double> F2[], complex<double> S3[],
            complex<double> COUP, complex<double> &vertex)
{
    complex<double> cI = complex<double>(0., 1.);
    complex<double> TMP1;
    TMP1 = (F2[2] * F1[2] + F2[3] * F1[3] + F2[4] * F1[4] + F2[5] * F1[5]);
    vertex = COUP * -cI * TMP1 * S3[2];
}

void FFS2_1(complex<double> F2[], complex<double> S3[], complex<double> COUP,
            double M1, double W1, complex<double> F1[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P1[4];
    complex<double> denom;
    F1[0] = +F2[0] + S3[0];
    F1[1] = +F2[1] + S3[1];
    P1[0] = -F1[0].real();
    P1[1] = -F1[1].real();
    P1[2] = -F1[1].imag();
    P1[3] = -F1[0].imag();
    denom = COUP / (pow(P1[0], 2) - pow(P1[1], 2) - pow(P1[2], 2) -
                    pow(P1[3], 2) - M1 * (M1 - cI * W1));
    F1[2] = denom * -cI * S3[2] *
            (F2[4] * (P1[0] + P1[3]) +
             (F2[5] * (P1[1] + cI * (P1[2])) - F2[2] * M1));
    F1[3] = denom * cI * S3[2] *
            (F2[4] * (+cI * (P1[2]) - P1[1]) +
             (F2[5] * (P1[3] - P1[0]) + F2[3] * M1));
    F1[4] = denom * cI * S3[2] *
            (F2[2] * (P1[3] - P1[0]) +
             (F2[3] * (P1[1] + cI * (P1[2])) + F2[4] * M1));
    F1[5] = denom * -cI * S3[2] *
            (F2[2] * (+cI * (P1[2]) - P1[1]) +
             (F2[3] * (P1[0] + P1[3]) - F2[5] * M1));
}

void FFS2_2(complex<double> F1[], complex<double> S3[], complex<double> COUP,
            double M2, double W2, complex<double> F2[])
{
    complex<double> cI = complex<double>(0., 1.);
    double P2[4];
    complex<double> denom;
    F2[0] = +F1[0] + S3[0];
    F2[1] = +F1[1] + S3[1];
    P2[0] = -F2[0].real();
    P2[1] = -F2[1].real();
    P2[2] = -F2[1].imag();
    P2[3] = -F2[0].imag();
    denom = COUP / (pow(P2[0], 2) - pow(P2[1], 2) - pow(P2[2], 2) -
                    pow(P2[3], 2) - M2 * (M2 - cI * W2));
    F2[2] = denom * cI * S3[2] *
            (F1[4] * (P2[0] - P2[3]) +
             (F1[5] * (+cI * (P2[2]) - P2[1]) + F1[2] * M2));
    F2[3] = denom * -cI * S3[2] *
            (F1[4] * (P2[1] + cI * (P2[2])) +
             (F1[5] * -1. * (P2[0] + P2[3]) - F1[3] * M2));
    F2[4] = denom * -cI * S3[2] *
            (F1[2] * -1. * (P2[0] + P2[3]) +
             (F1[3] * (+cI * (P2[2]) - P2[1]) - F1[4] * M2));
    F2[5] = denom * cI * S3[2] *
            (F1[2] * (P2[1] + cI * (P2[2])) +
             (F1[3] * (P2[0] - P2[3]) + F1[5] * M2));
}

} // namespace MG5_HEF_MEKD2_1
